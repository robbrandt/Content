{"version":3,"sources":["webpack://GridStack/webpack/universalModuleDefinition","webpack://GridStack/./src/gridstack-ddi.ts","webpack://GridStack/./src/gridstack-engine.ts","webpack://GridStack/./src/gridstack.ts","webpack://GridStack/./src/index-static.ts","webpack://GridStack/./src/utils.ts","webpack://GridStack/webpack/bootstrap","webpack://GridStack/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","GridStackDDI","pluginClass","ddi","registerPlugin","el","this","GridStackEngine","column","onchange","float","maxRow","nodes","addedNodes","removedNodes","getGridHeight","obsolete","prototype","getRow","_float","batchMode","_prevFloat","_packNodes","_notify","node","_sortNodes","nn","hasLocked","Boolean","find","n","locked","x","y","w","h","moved","collisionNode","Utils","isIntercepted","moveNode","length","batchUpdate","copyNodes","forEach","noMove","autoPosition","addNode","_dirty","commit","val","dir","sort","i","_updating","undefined","_packY","newY","box","slice","bn","canBeMoved","resizing","_id","_idSeq","defaults","noResize","Number","isNaN","maxW","Math","min","maxH","minW","max","minH","verify","dirtNodes","_origY","_origX","_origW","_origH","push","filter","removeDOM","dirtyNodes","Array","isArray","concat","getDirtyNodes","triggerAddEvent","prepareNode","floor","_fixCollisions","triggerEvent","splice","findIndex","_layouts","isNodeChangedPosition","clonedNode","clone","map","canMove","noPack","_lastTriedX","_lastTriedY","_lastTriedW","_lastTriedH","reduce","memo","saveElement","widgets","key","grid","_ignoreLayoutsNodeChange","layout","l","ratio","round","oldColumn","cacheLayout","top","cacheNodes","lastIndex","cacheNode","j","newNodes","move","scale","clear","copy","prop","GridDefaults","minRow","itemClass","placeholderClass","placeholderText","handle","handleClass","styleInHead","cellHeight","margin","auto","minWidth","staticGrid","animate","alwaysShowResizeHandle","resizable","autoHide","handles","draggable","scroll","appendTo","dragIn","dragInOptions","revert","disableDrag","disableResize","rtl","removable","removableOptions","accept","removeTimeout","marginUnit","cellHeightUnit","disableOneColumnMode","oneColumnModeDomSort","GridStack","opts","_gsEventHandler","obsoleteOpts","obsoleteAttr","row","rowAttr","toNumber","getAttribute","toBool","_styleSheetClass","random","toFixed","initMargin","style","direction","classList","add","parentGridItemEl","closestByClass","gridstackNode","_isNested","subGrid","_isAutoCellHeight","marginDiff","marginRight","marginLeft","marginTop","marginBottom","cellWidth","_setStaticClass","_updateStyles","engine","cbNodes","parentNode","removeChild","_writeAttrs","elements","getGridItems","parseInt","e","item","_prepareElement","saveInitial","setAnimation","placeholderChild","document","createElement","className","innerHTML","placeholder","appendChild","_updateContainerHeight","_setupDragIn","_setupRemoveDrop","_setupAcceptWidget","_updateWindowResizeEvent","options","elOrString","getGridElement","gridstack","console","error","selector","grids","getGridElements","parent","opt","doc","implementation","createHTMLDocument","body","class","children","append","init","load","els","arguments","warn","a","id","addWidget","content","domAttr","_readAttr","_writeAttr","_triggerAddEvent","_triggerChangeEvent","saveContent","saveGridOpt","list","save","sub","querySelector","o","removeInternalAndSame","addAndRemove","items","_prevColumn","some","removed","removeWidget","update","addGrid","forcePixel","height","offsetHeight","data","parseHeight","unit","_resizeNestedGrids","offsetWidth","_triggerRemoveEvent","compact","domNodes","remove","updateNodeWidths","from","matches","setStatic","removeAll","_removeStylesheet","enableMove","enableResize","_triggerEvent","doEnable","includeNewWidgets","movable","position","useDocRelative","containerPos","getBoundingClientRect","documentElement","scrollTop","left","offsetTop","offsetLeft","relativeLeft","relativeTop","columnWidth","width","rowHeight","isAreaEmpty","getElement","name","callback","indexOf","split","on","noData","event","detail","addEventListener","log","off","removeEventListener","getElements","parentElement","get","removeNode","doAnimate","_prepareDragDropByNode","m","keys","k","changed","ddChanged","cleanNodes","beginUpdate","endUpdate","value","canBePlacedWithRespectToHeight","layoutsNodesChange","CustomEvent","bubbles","Event","dispatchEvent","_styles","removeStylesheet","forceUpdate","prefix","styleLocation","createStylesheet","_max","addCSSRule","bottom","right","getHeight","rows","cssMinHeight","getComputedStyle","getCellHeight","setAttribute","String","removeProperty","target","querySelectorAll","onParentResize","same","attrs","resizeHandles","removeAttribute","hasOwnProperty","classes","throttle","clientWidth","_oneColumnMode","forceRemove","workTodo","_windowResizeBind","window","bind","margins","Engine","f","oldName","newName","rev","wrapper","args","apply","info","oldAttr","getElementById","substring","b","widths","styleSheet","cssText","createTextNode","insertBefore","firstChild","getElementsByTagName","sheet","rules","addRule","insertRule","v","toLowerCase","match","Error","parseFloat","sources","source","Object","contains","delay","isWaiting","setTimeout","returnEl","scrollHeight","clientHeight","getScrollParent","distance","rect","innerHeightOrClientHeight","innerHeight","offsetDiffDown","offsetDiffUp","scrollEl","prevScroll","abs","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__"],"mappings":"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","file":"gridstack-static.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GridStack\"] = factory();\n\telse\n\t\troot[\"GridStack\"] = factory();\n})(self, function() {\nreturn ","// gridstack-ddi.ts 3.1.0 @preserve\r\n\r\n/**\r\n * https://gridstackjs.com/\r\n * (c) 2014-2020 Alain Dumesny, Dylan Weiss, Pavel Reznikov\r\n * gridstack.js may be freely distributed under the MIT license.\r\n*/\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n\r\nimport { GridItemHTMLElement } from './types';\r\n\r\n/**\r\n * Abstract Partial Interface API for drag'n'drop plugin - look at GridStackDD and HTML5 / Jquery implementation versions\r\n */\r\nexport class GridStackDDI {\r\n\r\n  protected static ddi: GridStackDDI;\r\n\r\n  /** call this method to register your plugin instead of the default no-op one */\r\n  static registerPlugin(pluginClass: typeof GridStackDDI): void {\r\n    GridStackDDI.ddi = new pluginClass();\r\n  }\r\n\r\n  /** get the current registered plugin to use */\r\n  static get(): GridStackDDI {\r\n    if (!GridStackDDI.ddi) { GridStackDDI.registerPlugin(GridStackDDI); }\r\n    return GridStackDDI.ddi;\r\n  }\r\n\r\n  /** removes any drag&drop present (called during destroy) */\r\n  public remove(el: GridItemHTMLElement): GridStackDDI {\r\n    return this; // no-op for static grids\r\n  }\r\n}\r\n","// gridstack-engine.ts 3.1.0 @preserve\r\n\r\n/**\r\n * https://gridstackjs.com/\r\n * (c) 2014-2020 Alain Dumesny, Dylan Weiss, Pavel Reznikov\r\n * gridstack.js may be freely distributed under the MIT license.\r\n*/\r\n\r\nimport { Utils, obsolete } from './utils';\r\nimport { GridStackNode, ColumnOptions, GridStackWidget } from './types';\r\n\r\nexport type onChangeCB = (nodes: GridStackNode[], removeDOM?: boolean) => void;\r\n\r\n/**\r\n * Defines the GridStack engine that does most no DOM grid manipulation.\r\n * See GridStack methods and vars for descriptions.\r\n *\r\n * NOTE: values should not be modified directly - call the main GridStack API instead\r\n */\r\nexport class GridStackEngine {\r\n  public column: number;\r\n  public maxRow: number;\r\n  public nodes: GridStackNode[];\r\n  public onchange: onChangeCB;\r\n  public addedNodes: GridStackNode[] = [];\r\n  public removedNodes: GridStackNode[] = [];\r\n  public batchMode: boolean;\r\n  /** @internal */\r\n  private _float: boolean;\r\n  /** @internal */\r\n  private _prevFloat: boolean;\r\n  /** @internal */\r\n  private _layouts?: Layout[][]; // maps column # to array of values nodes\r\n  /** @internal */\r\n  private _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal */\r\n  private static _idSeq = 1;\r\n\r\n  public constructor(column = 12, onchange?: onChangeCB, float = false, maxRow = 0, nodes: GridStackNode[] = []) {\r\n    this.column = column;\r\n    this.onchange = onchange;\r\n    this._float = float;\r\n    this.maxRow = maxRow;\r\n    this.nodes = nodes;\r\n  }\r\n\r\n  public batchUpdate(): GridStackEngine {\r\n    if (this.batchMode) return this;\r\n    this.batchMode = true;\r\n    this._prevFloat = this._float;\r\n    this._float = true; // let things go anywhere for now... commit() will restore and possibly reposition\r\n    return this;\r\n  }\r\n\r\n  public commit(): GridStackEngine {\r\n    if (!this.batchMode) return this;\r\n    this.batchMode = false;\r\n    this._float = this._prevFloat;\r\n    delete this._prevFloat;\r\n    this._packNodes();\r\n    this._notify();\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _fixCollisions(node: GridStackNode): GridStackEngine {\r\n    this._sortNodes(-1);\r\n\r\n    let nn = node;\r\n    let hasLocked = Boolean(this.nodes.find(n => n.locked));\r\n    if (!this.float && !hasLocked) {\r\n      nn = {x: 0, y: node.y, w: this.column, h: node.h};\r\n    }\r\n    while (true) {\r\n      let collisionNode = this.nodes.find( n => n !== node && Utils.isIntercepted(n, nn), {node: node, nn: nn});\r\n      if (!collisionNode) { return this }\r\n      let moved;\r\n      if (collisionNode.locked) {\r\n        // if colliding with a locked item, move ourself instead\r\n        moved = this.moveNode(node, node.x, collisionNode.y + collisionNode.h,\r\n          node.w, node.h, true);\r\n      } else {\r\n        moved = this.moveNode(collisionNode, collisionNode.x, node.y + node.h,\r\n          collisionNode.w, collisionNode.h, true);\r\n      }\r\n      if (!moved) { return this } // break inf loop if we couldn't move after all (ex: maxRow, fixed)\r\n    }\r\n  }\r\n\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    let nn: GridStackNode = {x: x || 0, y: y || 0, w: w || 1, h: h || 1};\r\n    let collisionNode = this.nodes.find(n => {\r\n      return Utils.isIntercepted(n, nn);\r\n    });\r\n    return !collisionNode;\r\n  }\r\n\r\n  /** re-layout grid items to reclaim any empty space */\r\n  public compact(): GridStackEngine {\r\n    if (this.nodes.length === 0) { return this }\r\n    this.batchUpdate();\r\n    this._sortNodes();\r\n    let copyNodes = this.nodes;\r\n    this.nodes = []; // pretend we have no nodes to conflict layout to start with...\r\n    copyNodes.forEach(node => {\r\n      if (!node.noMove && !node.locked) {\r\n        node.autoPosition = true;\r\n      }\r\n      this.addNode(node, false); // 'false' for add event trigger\r\n      node._dirty = true; // force attr update\r\n    });\r\n    this.commit();\r\n    return this;\r\n  }\r\n\r\n  /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\r\n  public set float(val: boolean) {\r\n    if (this._float === val) { return; }\r\n    this._float = val || false;\r\n    if (!val) {\r\n      this._packNodes();\r\n      this._notify();\r\n    }\r\n  }\r\n\r\n  /** float getter method */\r\n  public get float(): boolean { return this._float || false; }\r\n\r\n  /** @internal */\r\n  private _sortNodes(dir?: -1 | 1): GridStackEngine {\r\n    this.nodes = Utils.sort(this.nodes, dir, this.column);\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _packNodes(): GridStackEngine {\r\n    this._sortNodes();\r\n\r\n    if (this.float) {\r\n      this.nodes.forEach((n, i) => {\r\n        if (n._updating || n._packY === undefined || n.y === n._packY) {\r\n          return this;\r\n        }\r\n        let newY = n.y;\r\n        while (newY >= n._packY) {\r\n          let box: GridStackWidget = {x: n.x, y: newY, w: n.w, h: n.h};\r\n          let collisionNode = this.nodes\r\n            .slice(0, i)\r\n            .find(bn => Utils.isIntercepted(box, bn), {n: n, newY: newY});\r\n          if (!collisionNode) {\r\n            n._dirty = true;\r\n            n.y = newY;\r\n          }\r\n          --newY;\r\n        }\r\n      });\r\n    } else {\r\n      this.nodes.forEach((n, i) => {\r\n        if (n.locked) { return this }\r\n        while (n.y > 0) {\r\n          let newY = n.y - 1;\r\n          let canBeMoved = i === 0;\r\n          let box: GridStackWidget = {x: n.x, y: newY, w: n.w, h: n.h};\r\n          if (i > 0) {\r\n            let collisionNode = this.nodes\r\n              .slice(0, i)\r\n              .find(bn => Utils.isIntercepted(box, bn), {n: n, newY: newY});\r\n            canBeMoved = collisionNode === undefined;\r\n          }\r\n\r\n          if (!canBeMoved) { break; }\r\n          // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\r\n          // and move items back. The user 'change' CB should detect changes from the original\r\n          // starting position instead.\r\n          n._dirty = (n.y !== newY);\r\n          n.y = newY;\r\n        }\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * given a random node, makes sure it's coordinates/values are valid in the current grid\r\n   * @param node to adjust\r\n   * @param resizing if out of bound, resize down or move into the grid to fit ?\r\n   */\r\n  public prepareNode(node: GridStackNode, resizing?: boolean): GridStackNode {\r\n    node = node || {};\r\n    node._id = node._id || GridStackEngine._idSeq++;\r\n\r\n    // if we're missing position, have the grid position us automatically (before we set them to 0,0)\r\n    if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\r\n      node.autoPosition = true;\r\n    }\r\n\r\n    // assign defaults for missing required fields\r\n    let defaults: GridStackNode = { x: 0, y: 0, w: 1, h: 1};\r\n    Utils.defaults(node, defaults);\r\n\r\n    if (!node.autoPosition) { delete node.autoPosition; }\r\n    if (!node.noResize) { delete node.noResize; }\r\n    if (!node.noMove) { delete node.noMove; }\r\n\r\n    // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\r\n    if (typeof node.x == 'string')      { node.x = Number(node.x); }\r\n    if (typeof node.y == 'string')      { node.y = Number(node.y); }\r\n    if (typeof node.w == 'string')  { node.w = Number(node.w); }\r\n    if (typeof node.h == 'string') { node.h = Number(node.h); }\r\n    if (isNaN(node.x))      { node.x = defaults.x; node.autoPosition = true; }\r\n    if (isNaN(node.y))      { node.y = defaults.y; node.autoPosition = true; }\r\n    if (isNaN(node.w))  { node.w = defaults.w; }\r\n    if (isNaN(node.h)) { node.h = defaults.h; }\r\n\r\n    if (node.maxW) { node.w = Math.min(node.w, node.maxW); }\r\n    if (node.maxH) { node.h = Math.min(node.h, node.maxH); }\r\n    if (node.minW) { node.w = Math.max(node.w, node.minW); }\r\n    if (node.minH) { node.h = Math.max(node.h, node.minH); }\r\n\r\n    if (node.w > this.column) {\r\n      node.w = this.column;\r\n    } else if (node.w < 1) {\r\n      node.w = 1;\r\n    }\r\n\r\n    if (this.maxRow && node.h > this.maxRow) {\r\n      node.h = this.maxRow;\r\n    } else if (node.h < 1) {\r\n      node.h = 1;\r\n    }\r\n\r\n    if (node.x < 0) {\r\n      node.x = 0;\r\n    }\r\n    if (node.y < 0) {\r\n      node.y = 0;\r\n    }\r\n\r\n    if (node.x + node.w > this.column) {\r\n      if (resizing) {\r\n        node.w = this.column - node.x;\r\n      } else {\r\n        node.x = this.column - node.w;\r\n      }\r\n    }\r\n    if (this.maxRow && node.y + node.h > this.maxRow) {\r\n      if (resizing) {\r\n        node.h = this.maxRow - node.y;\r\n      } else {\r\n        node.y = this.maxRow - node.h;\r\n      }\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  public getDirtyNodes(verify?: boolean): GridStackNode[] {\r\n    // compare original X,Y,W,H (or entire node?) instead as _dirty can be a temporary state\r\n    if (verify) {\r\n      let dirtNodes: GridStackNode[] = [];\r\n      this.nodes.forEach(n => {\r\n        if (n._dirty) {\r\n          if (n.y === n._origY && n.x === n._origX && n.w === n._origW && n.h === n._origH) {\r\n            delete n._dirty;\r\n          } else {\r\n            dirtNodes.push(n);\r\n          }\r\n        }\r\n      });\r\n      return dirtNodes;\r\n    }\r\n\r\n    return this.nodes.filter(n => n._dirty);\r\n  }\r\n\r\n  /** @internal */\r\n  private _notify(nodes?: GridStackNode | GridStackNode[], removeDOM = true): GridStackEngine {\r\n    if (this.batchMode) { return this }\r\n    nodes = (nodes === undefined ? [] : (Array.isArray(nodes) ? nodes : [nodes]) );\r\n    let dirtyNodes = nodes.concat(this.getDirtyNodes());\r\n    if (this.onchange) {\r\n      this.onchange(dirtyNodes, removeDOM);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public cleanNodes(): GridStackEngine {\r\n    if (this.batchMode) { return this }\r\n    this.nodes.forEach(n => { delete n._dirty; });\r\n    return this;\r\n  }\r\n\r\n  public addNode(node: GridStackNode, triggerAddEvent = false): GridStackNode {\r\n    node = this.prepareNode(node);\r\n\r\n    if (node.autoPosition) {\r\n      this._sortNodes();\r\n\r\n      for (let i = 0;; ++i) {\r\n        let x = i % this.column;\r\n        let y = Math.floor(i / this.column);\r\n        if (x + node.w > this.column) {\r\n          continue;\r\n        }\r\n        let box = {x, y, w: node.w, h: node.h};\r\n        if (!this.nodes.find(n => Utils.isIntercepted(box, n), {x, y, node})) {\r\n          node.x = x;\r\n          node.y = y;\r\n          delete node.autoPosition; // found our slot\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.nodes.push(node);\r\n    if (triggerAddEvent) {\r\n      this.addedNodes.push(node);\r\n    }\r\n\r\n    this._fixCollisions(node);\r\n    this._packNodes();\r\n    this._notify();\r\n    return node;\r\n  }\r\n\r\n  public removeNode(node: GridStackNode, removeDOM = true, triggerEvent = false): GridStackEngine {\r\n    if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)\r\n      this.removedNodes.push(node);\r\n    }\r\n    node._id = null; // hint that node is being removed\r\n    // TODO: .splice(findIndex(),1) would be faster but apparently there are cases we have 2 instances ! (see spec 'load add new, delete others')\r\n    // this.nodes = this.nodes.filter(n => n !== node);\r\n    this.nodes.splice(this.nodes.findIndex(n => n === node), 1);\r\n    if (!this.float) {\r\n      this._packNodes();\r\n    }\r\n    this._notify(node, removeDOM);\r\n    return this;\r\n  }\r\n\r\n  public removeAll(removeDOM = true): GridStackEngine {\r\n    delete this._layouts;\r\n    if (this.nodes.length === 0) { return this }\r\n    if (removeDOM) {\r\n      this.nodes.forEach(n => { n._id = null; }); // hint that node is being removed\r\n    }\r\n    this.removedNodes = this.nodes;\r\n    this.nodes = [];\r\n    this._notify(this.removedNodes, removeDOM);\r\n    return this;\r\n  }\r\n\r\n  public canMoveNode(node: GridStackNode, x: number, y: number, w?: number, h?: number): boolean {\r\n    if (!this.isNodeChangedPosition(node, x, y, w, h)) {\r\n      return false;\r\n    }\r\n    let hasLocked = Boolean(this.nodes.find(n => n.locked));\r\n\r\n    if (!this.maxRow && !hasLocked) {\r\n      return true;\r\n    }\r\n\r\n    let clonedNode: GridStackNode;\r\n    let clone = new GridStackEngine(\r\n      this.column,\r\n      null,\r\n      this.float,\r\n      0,\r\n      this.nodes.map(n => {\r\n        if (n === node) {\r\n          clonedNode = {...n};\r\n          return clonedNode;\r\n        }\r\n        return {...n};\r\n      }));\r\n\r\n    if (!clonedNode) {return true}\r\n\r\n    clone.moveNode(clonedNode, x, y, w, h);\r\n\r\n    let canMove = true;\r\n    if (hasLocked) {\r\n      canMove = canMove && !Boolean(clone.nodes.find(n => {\r\n        return n !== clonedNode && Boolean(n.locked) && Boolean(n._dirty);\r\n      }));\r\n    }\r\n    if (this.maxRow) {\r\n      canMove = canMove && (clone.getRow() <= this.maxRow);\r\n    }\r\n\r\n    return canMove;\r\n  }\r\n\r\n  public canBePlacedWithRespectToHeight(node: GridStackNode): boolean {\r\n    if (!this.maxRow) {\r\n      return true;\r\n    }\r\n\r\n    let clone = new GridStackEngine(\r\n      this.column,\r\n      null,\r\n      this.float,\r\n      0,\r\n      this.nodes.map(n => {return {...n}}));\r\n    clone.addNode(node);\r\n    return clone.getRow() <= this.maxRow;\r\n  }\r\n\r\n  public isNodeChangedPosition(node: GridStackNode, x: number, y: number, w: number, h: number): boolean {\r\n    if (typeof x !== 'number') { x = node.x; }\r\n    if (typeof y !== 'number') { y = node.y; }\r\n    if (typeof w !== 'number') { w = node.w; }\r\n    if (typeof h !== 'number') { h = node.h; }\r\n\r\n    if (node.maxW) { w = Math.min(w, node.maxW); }\r\n    if (node.maxH) { h = Math.min(h, node.maxH); }\r\n    if (node.minW) { w = Math.max(w, node.minW); }\r\n    if (node.minH) { h = Math.max(h, node.minH); }\r\n\r\n    if (node.x === x && node.y === y && node.w === w && node.h === h) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  public moveNode(node: GridStackNode, x: number, y: number, w?: number, h?: number, noPack?: boolean): GridStackNode {\r\n    if (node.locked) { return null; }\r\n    if (typeof x !== 'number') { x = node.x; }\r\n    if (typeof y !== 'number') { y = node.y; }\r\n    if (typeof w !== 'number') { w = node.w; }\r\n    if (typeof h !== 'number') { h = node.h; }\r\n\r\n    // constrain the passed in values and check if we're still changing our node\r\n    let resizing = (node.w !== w || node.h !== h);\r\n    let nn: GridStackNode = { x, y, w, h, maxW: node.maxW, maxH: node.maxH, minW: node.minW, minH: node.minH};\r\n    nn = this.prepareNode(nn, resizing);\r\n    if (node.x === nn.x && node.y === nn.y && node.w === nn.w && node.h === nn.h) {\r\n      return null;\r\n    }\r\n\r\n    node._dirty = true;\r\n\r\n    node.x = node._lastTriedX = nn.x;\r\n    node.y = node._lastTriedY = nn.y;\r\n    node.w = node._lastTriedW = nn.w;\r\n    node.h = node._lastTriedH = nn.h;\r\n\r\n    this._fixCollisions(node);\r\n    if (!noPack) {\r\n      this._packNodes();\r\n      this._notify();\r\n    }\r\n    return node;\r\n  }\r\n\r\n  public getRow(): number {\r\n    return this.nodes.reduce((memo, n) => Math.max(memo, n.y + n.h), 0);\r\n  }\r\n\r\n  public beginUpdate(node: GridStackNode): GridStackEngine {\r\n    if (node._updating) return this;\r\n    node._updating = true;\r\n    this.nodes.forEach(n => { n._packY = n.y; });\r\n    return this;\r\n  }\r\n\r\n  public endUpdate(): GridStackEngine {\r\n    let n = this.nodes.find(n => n._updating);\r\n    if (n) {\r\n      delete n._updating;\r\n      this.nodes.forEach(n => { delete n._packY; });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** saves the current layout returning a list of widgets for serialization */\r\n  public save(saveElement = true): GridStackNode[] {\r\n    let widgets: GridStackNode[] = [];\r\n    Utils.sort(this.nodes);\r\n    this.nodes.forEach(n => {\r\n      let w: GridStackNode = {};\r\n      for (let key in n) { if (key[0] !== '_' && n[key] !== null && n[key] !== undefined ) w[key] = n[key]; }\r\n      // delete other internals\r\n      if (!saveElement) delete w.el;\r\n      delete w.grid;\r\n      // delete default values (will be re-created on read)\r\n      if (!w.autoPosition) delete w.autoPosition;\r\n      if (!w.noResize) delete w.noResize;\r\n      if (!w.noMove) delete w.noMove;\r\n      if (!w.locked) delete w.locked;\r\n      widgets.push(w);\r\n    });\r\n    return widgets;\r\n  }\r\n\r\n  /** @internal called whenever a node is added or moved - updates the cached layouts */\r\n  public layoutsNodesChange(nodes: GridStackNode[]): GridStackEngine {\r\n    if (!this._layouts || this._ignoreLayoutsNodeChange) return this;\r\n    // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\r\n    this._layouts.forEach((layout, column) => {\r\n      if (!layout || column === this.column) return this;\r\n      if (column < this.column) {\r\n        this._layouts[column] = undefined;\r\n      }\r\n      else {\r\n        // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\r\n        // Note: we don't need to check against out of bound scaling/moving as that will be done when using those cache values.\r\n        nodes.forEach(node => {\r\n          let n = layout.find(l => l._id === node._id);\r\n          if (!n) return this; // no cache for new nodes. Will use those values.\r\n          let ratio = column / this.column;\r\n          // Y changed, push down same amount\r\n          // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\r\n          if (node.y !== node._origY) {\r\n            n.y += (node.y - node._origY);\r\n          }\r\n          // X changed, scale from new position\r\n          if (node.x !== node._origX) {\r\n            n.x = Math.round(node.x * ratio);\r\n          }\r\n          // width changed, scale from new width\r\n          if (node.w !== node._origW) {\r\n            n.w = Math.round(node.w * ratio);\r\n          }\r\n          // ...height always carries over from cache\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @internal Called to scale the widget width & position up/down based on the column change.\r\n   * Note we store previous layouts (especially original ones) to make it possible to go\r\n   * from say 12 -> 1 -> 12 and get back to where we were.\r\n   *\r\n   * @param oldColumn previous number of columns\r\n   * @param column  new column number\r\n   * @param nodes different sorted list (ex: DOM order) instead of current list\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n   */\r\n  public updateNodeWidths(oldColumn: number, column: number, nodes: GridStackNode[], layout: ColumnOptions = 'moveScale'): GridStackEngine {\r\n    if (!this.nodes.length || oldColumn === column) { return this }\r\n\r\n    // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data\r\n    this.cacheLayout(this.nodes, oldColumn);\r\n\r\n    // if we're going to 1 column and using DOM order rather than default sorting, then generate that layout\r\n    if (column === 1 && nodes && nodes.length) {\r\n      let top = 0;\r\n      nodes.forEach(n => {\r\n        n.x = 0;\r\n        n.w = 1;\r\n        n.y = Math.max(n.y, top);\r\n        top = n.y + n.h;\r\n      });\r\n    } else {\r\n      nodes = Utils.sort(this.nodes, -1, oldColumn); // current column reverse sorting so we can insert last to front (limit collision)\r\n    }\r\n\r\n    // see if we have cached previous layout.\r\n    let cacheNodes = this._layouts[column] || [];\r\n    // if not AND we are going up in size start with the largest layout as down-scaling is more accurate\r\n    let lastIndex = this._layouts.length - 1;\r\n    if (cacheNodes.length === 0 && column > oldColumn && column < lastIndex) {\r\n      cacheNodes = this._layouts[lastIndex] || [];\r\n      if (cacheNodes.length) {\r\n        // pretend we came from that larger column by assigning those values as starting point\r\n        oldColumn = lastIndex;\r\n        cacheNodes.forEach(cacheNode => {\r\n          let j = nodes.findIndex(n => n._id === cacheNode._id);\r\n          if (j !== -1) {\r\n            // still current, use cache info positions\r\n            nodes[j].x = cacheNode.x;\r\n            nodes[j].y = cacheNode.y;\r\n            nodes[j].w = cacheNode.w;\r\n          }\r\n        });\r\n        cacheNodes = []; // we still don't have new column cached data... will generate from larger one.\r\n      }\r\n    }\r\n\r\n    // if we found cache re-use those nodes that are still current\r\n    let newNodes: GridStackNode[] = [];\r\n    cacheNodes.forEach(cacheNode => {\r\n      let j = nodes.findIndex(n => n._id === cacheNode._id);\r\n      if (j !== -1) {\r\n        // still current, use cache info positions\r\n        nodes[j].x = cacheNode.x;\r\n        nodes[j].y = cacheNode.y;\r\n        nodes[j].w = cacheNode.w;\r\n        newNodes.push(nodes[j]);\r\n        nodes.splice(j, 1);\r\n      }\r\n    });\r\n    // ...and add any extra non-cached ones\r\n    if (nodes.length) {\r\n      if (typeof layout === 'function') {\r\n        layout(column, oldColumn, newNodes, nodes);\r\n      } else {\r\n        let ratio = column / oldColumn;\r\n        let move = (layout === 'move' || layout === 'moveScale');\r\n        let scale = (layout === 'scale' || layout === 'moveScale');\r\n        nodes.forEach(node => {\r\n          node.x = (column === 1 ? 0 : (move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1)));\r\n          node.w = ((column === 1 || oldColumn === 1) ? 1 :\r\n            scale ? (Math.round(node.w * ratio) || 1) : (Math.min(node.w, column)));\r\n          newNodes.push(node);\r\n        });\r\n        nodes = [];\r\n      }\r\n    }\r\n\r\n    // finally re-layout them in reverse order (to get correct placement)\r\n    newNodes = Utils.sort(newNodes, -1, column);\r\n    this._ignoreLayoutsNodeChange = true;\r\n    this.batchUpdate();\r\n    this.nodes = []; // pretend we have no nodes to start with (we use same structures) to simplify layout\r\n    newNodes.forEach(node => {\r\n      this.addNode(node, false); // 'false' for add event trigger\r\n      node._dirty = true; // force attr update\r\n    }, this);\r\n    this.commit();\r\n    delete this._ignoreLayoutsNodeChange;\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to save initial position/size */\r\n  public saveInitial(): GridStackEngine {\r\n    this.nodes.forEach(n => {\r\n      n._origX = n.x;\r\n      n._origY = n.y;\r\n      n._origW = n.w;\r\n      n._origH = n.h;\r\n      delete n._dirty;\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * call to cache the given layout internally to the given location so we can restore back when column changes size\r\n   * @param nodes list of nodes\r\n   * @param column corresponding column index to save it under\r\n   * @param clear if true, will force other caches to be removed (default false)\r\n   */\r\n  public cacheLayout(nodes: GridStackNode[], column: number, clear = false): GridStackEngine {\r\n    let copy: Layout[] = [];\r\n    nodes.forEach((n, i) => {\r\n      n._id = n._id || GridStackEngine._idSeq++; // make sure we have an id in case this is new layout, else re-use id already set\r\n      copy[i] = {x: n.x, y: n.y, w: n.w, _id: n._id} // only thing we change is x,y,w and id to find it back\r\n    });\r\n    this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\r\n    this._layouts[column] = copy;\r\n    return this;\r\n  }\r\n\r\n\r\n  /** called to remove all internal values */\r\n  public cleanupNode(node: GridStackNode): GridStackEngine {\r\n    for (let prop in node) {\r\n      if (prop[0] === '_') delete node[prop];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal legacy method renames */\r\n  private getGridHeight = obsolete(this, GridStackEngine.prototype.getRow, 'getGridHeight', 'getRow', 'v1.0.0');\r\n}\r\n\r\n/** @internal class to store per column layout bare minimal info (subset of GridStackWidget) */\r\ninterface Layout {\r\n  x: number;\r\n  y: number;\r\n  w: number;\r\n  _id: number; // so we can find full node back\r\n}\r\n","// gridstack.ts 3.1.0 @preserve\r\n\r\n/**\r\n * https://gridstackjs.com/\r\n * (c) 2014-2020 Alain Dumesny, Dylan Weiss, Pavel Reznikov\r\n * gridstack.js may be freely distributed under the MIT license.\r\n*/\r\n\r\nimport { GridStackEngine } from './gridstack-engine';\r\nimport { obsoleteOpts, obsoleteAttr, Utils, HeightData } from './utils';\r\nimport { GridStackElement, GridItemHTMLElement, GridStackWidget, GridStackNode, GridStackOptions, numberOrString, ColumnOptions } from './types';\r\nimport { GridStackDDI } from './gridstack-ddi';\r\n\r\n// export all dependent file as well to make it easier for users to just import the main file\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\nexport * from './gridstack-ddi';\r\n\r\nexport interface GridHTMLElement extends HTMLElement {\r\n  gridstack?: GridStack; // grid's parent DOM element points back to grid class\r\n}\r\nexport type GridStackEvent = 'added' | 'change' | 'disable' | 'dragstart' | 'dragstop' | 'dropped' |\r\n  'enable' | 'removed' | 'resizestart' | 'resizestop';\r\n\r\n/** Defines the coordinates of an object */\r\nexport interface MousePosition {\r\n  top: number;\r\n  left: number;\r\n}\r\n\r\n/** Defines the position of a cell inside the grid*/\r\nexport interface CellPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface GridCSSStyleSheet extends CSSStyleSheet {\r\n  _id?: string; // random id we will use to style us\r\n  _max?: number; // internal tracker of the max # of rows we created\\\r\n}\r\n\r\n// default values for grid options - used during init and when saving out\r\nconst GridDefaults: GridStackOptions = {\r\n  column: 12,\r\n  minRow: 0,\r\n  maxRow: 0,\r\n  itemClass: 'grid-stack-item',\r\n  placeholderClass: 'grid-stack-placeholder',\r\n  placeholderText: '',\r\n  handle: '.grid-stack-item-content',\r\n  handleClass: null,\r\n  styleInHead: false,\r\n  cellHeight: 'auto',\r\n  margin: 10,\r\n  auto: true,\r\n  minWidth: 768,\r\n  float: false,\r\n  staticGrid: false,\r\n  animate: true,\r\n  alwaysShowResizeHandle: false,\r\n  resizable: {\r\n    autoHide: true,\r\n    handles: 'se'\r\n  },\r\n  draggable: {\r\n    handle: '.grid-stack-item-content',\r\n    scroll: false,\r\n    appendTo: 'body'\r\n  },\r\n  dragIn: undefined,\r\n  dragInOptions : {\r\n    revert: 'invalid',\r\n    handle: '.grid-stack-item-content',\r\n    scroll: false,\r\n    appendTo: 'body'\r\n  },\r\n  disableDrag: false,\r\n  disableResize: false,\r\n  rtl: 'auto',\r\n  removable: false,\r\n  removableOptions: {\r\n    accept: '.grid-stack-item'\r\n  },\r\n  removeTimeout: 2000,\r\n  marginUnit: 'px',\r\n  cellHeightUnit: 'px',\r\n  disableOneColumnMode: false,\r\n  oneColumnModeDomSort: false\r\n};\r\n\r\n/**\r\n * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.\r\n * Note: your grid elements MUST have the following classes for the CSS layout to work:\r\n * @example\r\n * <div class=\"grid-stack\">\r\n *   <div class=\"grid-stack-item\">\r\n *     <div class=\"grid-stack-item-content\">Item 1</div>\r\n *   </div>\r\n * </div>\r\n */\r\nexport class GridStack {\r\n\r\n  /**\r\n   * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will\r\n   * simply return the existing instance (ignore any passed options). There is also an initAll() version that support\r\n   * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.\r\n   * @param options grid options (optional)\r\n   * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   *\r\n   * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\r\n   * let grid = document.querySelector('.grid-stack').gridstack;\r\n   */\r\n  public static init(options: GridStackOptions = {}, elOrString: GridStackElement = '.grid-stack'): GridStack {\r\n    let el = GridStack.getGridElement(elOrString);\r\n    if (!el) {\r\n      if (typeof elOrString === 'string') {\r\n        console.error('GridStack.initAll() no grid was found with selector \"' + elOrString + '\" - element missing or wrong selector ?' +\r\n        '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n      } else {\r\n        console.error('GridStack.init() no grid element was passed.');\r\n      }\r\n      return null;\r\n    }\r\n    if (!el.gridstack) {\r\n      el.gridstack = new GridStack(el, {...options});\r\n    }\r\n    return el.gridstack\r\n  }\r\n\r\n  /**\r\n   * Will initialize a list of elements (given a selector) and return an array of grids.\r\n   * @param options grid options (optional)\r\n   * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grids = GridStack.initAll();\r\n   * grids.forEach(...)\r\n   */\r\n  public static initAll(options: GridStackOptions = {}, selector = '.grid-stack'): GridStack[] {\r\n    let grids: GridStack[] = [];\r\n    GridStack.getGridElements(selector).forEach(el => {\r\n      if (!el.gridstack) {\r\n        el.gridstack = new GridStack(el, {...options});\r\n      }\r\n      grids.push(el.gridstack);\r\n    });\r\n    if (grids.length === 0) {\r\n      console.error('GridStack.initAll() no grid was found with selector \"' + selector + '\" - element missing or wrong selector ?' +\r\n      '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n    }\r\n    return grids;\r\n  }\r\n\r\n  /**\r\n   * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then\r\n   * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from\r\n   * JSON serialized data, including options.\r\n   * @param parent HTML element parent to the grid\r\n   * @param opt grids options used to initialize the grid, and list of children\r\n   */\r\n  public static addGrid(parent: HTMLElement, opt: GridStackOptions = {}): GridStack {\r\n    if (!parent) { return null; }\r\n\r\n    // create the grid element\r\n    let doc = document.implementation.createHTMLDocument();\r\n    doc.body.innerHTML = `<div class=\"grid-stack ${opt.class || ''}\"></div>`;\r\n    let el = doc.body.children[0] as HTMLElement;\r\n    parent.append(el);\r\n\r\n    // create grid class and load any children\r\n    let grid = GridStack.init(opt, el);\r\n    if (opt.children) {\r\n      grid.load(opt.children);\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  /** scoping so users can call GridStack.Utils.sort() for example */\r\n  public static Utils = Utils;\r\n\r\n  /** scoping so users can call new GridStack.Engine(12) for example */\r\n  public static Engine = GridStackEngine;\r\n\r\n  /** the HTML element tied to this grid after it's been initialized */\r\n  public el: GridHTMLElement;\r\n\r\n  /** engine used to implement non DOM grid functionality */\r\n  public engine: GridStackEngine;\r\n\r\n  /** grid options - public for classes to access, but use methods to modify! */\r\n  public opts: GridStackOptions;\r\n\r\n  /** @internal */\r\n  public placeholder: HTMLElement;\r\n  /** @internal */\r\n  private _oneColumnMode: boolean;\r\n  /** @internal */\r\n  private _prevColumn: number;\r\n  /** @internal */\r\n  private _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal */\r\n  public _gsEventHandler = {};\r\n  /** @internal */\r\n  private _styles: GridCSSStyleSheet;\r\n  /** @internal flag to keep cells square during resize */\r\n  private _isAutoCellHeight: boolean;\r\n  /** @internal track event binding to window resize so we can remove */\r\n  private _windowResizeBind: () => GridStack;\r\n\r\n  /**\r\n   * Construct a grid item from the given element and options\r\n   * @param el\r\n   * @param opts\r\n   */\r\n  public constructor(el: GridHTMLElement, opts: GridStackOptions = {}) {\r\n    this.el = el; // exposed HTML element to the user\r\n    opts = opts || {}; // handles null/undefined/0\r\n\r\n    obsoleteOpts(opts, 'verticalMargin', 'margin', 'v2.0');\r\n\r\n    obsoleteAttr(this.el, 'data-gs-current-height', 'gs-current-row', 'v1.0.0');\r\n\r\n    // if row property exists, replace minRow and maxRow instead\r\n    if (opts.row) {\r\n      opts.minRow = opts.maxRow = opts.row;\r\n      delete opts.row;\r\n    }\r\n    let rowAttr = Utils.toNumber(el.getAttribute('gs-row'));\r\n\r\n    // elements attributes override any passed options (like CSS style) - merge the two together\r\n    let defaults: GridStackOptions = {...GridDefaults,\r\n      column: Utils.toNumber(el.getAttribute('gs-column')) || 12,\r\n      minRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-min-row')) || 0,\r\n      maxRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-max-row')) || 0,\r\n      staticGrid: Utils.toBool(el.getAttribute('gs-static')) || false,\r\n      _styleSheetClass: 'grid-stack-instance-' + (Math.random() * 10000).toFixed(0),\r\n      alwaysShowResizeHandle: opts.alwaysShowResizeHandle || false,\r\n      resizable: {\r\n        autoHide: !(opts.alwaysShowResizeHandle || false),\r\n        handles: 'se'\r\n      },\r\n      draggable: {\r\n        handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) || '.grid-stack-item-content',\r\n        scroll: false,\r\n        appendTo: 'body'\r\n      },\r\n      removableOptions: {\r\n        accept: '.' + (opts.itemClass || 'grid-stack-item')\r\n      },\r\n    };\r\n    if (el.getAttribute('gs-animate')) { // default to true, but if set to false use that instead\r\n      defaults.animate = Utils.toBool(el.getAttribute('gs-animate'))\r\n    }\r\n\r\n    this.opts = Utils.defaults(opts, defaults);\r\n    opts = null; // make sure we use this.opts instead\r\n    this.initMargin();\r\n\r\n    if (this.opts.rtl === 'auto') {\r\n      this.opts.rtl = el.style.direction === 'rtl';\r\n    }\r\n\r\n    if (this.opts.rtl) {\r\n      this.el.classList.add('grid-stack-rtl');\r\n    }\r\n\r\n    // check if we're been nested, and if so update our style and keep pointer around (used during save)\r\n    let parentGridItemEl = Utils.closestByClass(this.el, GridDefaults.itemClass) as GridItemHTMLElement;\r\n    if (parentGridItemEl && parentGridItemEl.gridstackNode) {\r\n      this.opts._isNested = parentGridItemEl.gridstackNode;\r\n      this.opts._isNested.subGrid = this;\r\n      this.el.classList.add('grid-stack-nested');\r\n    }\r\n\r\n    this._isAutoCellHeight = (this.opts.cellHeight === 'auto');\r\n    if (this._isAutoCellHeight) {\r\n      // make the cell content square initially (will use resize event to keep it square)\r\n      let marginDiff = - (this.opts.marginRight as number) - (this.opts.marginLeft as number)\r\n        + (this.opts.marginTop as number) + (this.opts.marginBottom as number);\r\n      this.cellHeight(this.cellWidth() + marginDiff, false);\r\n    } else {\r\n      this.cellHeight(this.opts.cellHeight, false);\r\n    }\r\n\r\n    this.el.classList.add(this.opts._styleSheetClass);\r\n\r\n    this._setStaticClass();\r\n    this._updateStyles();\r\n\r\n    this.engine = new GridStackEngine(this.opts.column, (cbNodes, removeDOM = true) => {\r\n      let maxH = 0;\r\n      this.engine.nodes.forEach(n => { maxH = Math.max(maxH, n.y + n.h) });\r\n      cbNodes.forEach(n => {\r\n        let el = n.el;\r\n        if (removeDOM && n._id === null) {\r\n          if (el && el.parentNode) { el.parentNode.removeChild(el) }\r\n        } else {\r\n          this._writeAttrs(el, n.x, n.y, n.w, n.h);\r\n        }\r\n      });\r\n      this._updateStyles(false, maxH); // false = don't recreate, just append if need be\r\n    }, this.opts.float, this.opts.maxRow);\r\n\r\n    if (this.opts.auto) {\r\n      let elements: {el: HTMLElement; i: number}[] = [];\r\n      this.getGridItems().forEach(el => {\r\n        let x = parseInt(el.getAttribute('gs-x'));\r\n        let y = parseInt(el.getAttribute('gs-y'));\r\n        elements.push({\r\n          el,\r\n          // if x,y are missing (autoPosition) add them to end of list - but keep their respective DOM order\r\n          i: (Number.isNaN(x) ? 1000 : x) + (Number.isNaN(y) ? 1000 : y) * this.opts.column\r\n        });\r\n      });\r\n      elements.sort(e => e.i).forEach(item => { this._prepareElement(item.el) });\r\n    }\r\n    this.engine.saveInitial(); // initial start of items\r\n\r\n    this.setAnimation(this.opts.animate);\r\n\r\n    let placeholderChild = document.createElement('div');\r\n    placeholderChild.className = 'placeholder-content';\r\n    placeholderChild.innerHTML = this.opts.placeholderText;\r\n    this.placeholder = document.createElement('div');\r\n    this.placeholder.classList.add(this.opts.placeholderClass, defaults.itemClass, this.opts.itemClass);\r\n    this.placeholder.appendChild(placeholderChild);\r\n\r\n    this._updateContainerHeight();\r\n\r\n    this._setupDragIn();\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this._updateWindowResizeEvent(); // finally this may size us down to 1 column\r\n  }\r\n\r\n  /**\r\n   * add a new widget and returns it.\r\n   *\r\n   * Widget will be always placed even if result height is more than actual grid height.\r\n   * You need to use willItFit method before calling addWidget for additional check.\r\n   * See also `makeWidget()`.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.addWidget({w: 3, content: 'hello'});\r\n   * grid.addWidget('<div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">hello</div></div>', {w: 3});\r\n   *\r\n   * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add\r\n   * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget\r\n   */\r\n  public addWidget(els?: GridStackWidget | GridStackElement, options?: GridStackWidget): GridItemHTMLElement {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `addWidget(el, x, y, width...)` is deprecated. Use `addWidget({x, y, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1,\r\n        opt: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++],\r\n          minW:a[i++], maxW:a[i++], minH:a[i++], maxH:a[i++], id:a[i++] };\r\n      return this.addWidget(els, opt);\r\n    }\r\n\r\n    function isGridStackWidget(w: GridStackWidget): w is GridStackWidget { // https://medium.com/ovrsea/checking-the-type-of-an-object-in-typescript-the-type-guards-24d98d9119b0\r\n      return w.x !== undefined || w.y !== undefined || w.w !== undefined || w.h !== undefined || w.content !== undefined ? true : false;\r\n    }\r\n\r\n    let el: HTMLElement;\r\n    if (typeof els === 'string') {\r\n      let doc = document.implementation.createHTMLDocument();\r\n      doc.body.innerHTML = els;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else if (arguments.length === 0 || arguments.length === 1 && isGridStackWidget(els)) {\r\n      let content = els ? (els as GridStackWidget).content || '' : '';\r\n      options = els;\r\n      let doc = document.implementation.createHTMLDocument();\r\n      doc.body.innerHTML = `<div class=\"grid-stack-item ${this.opts.itemClass || ''}\"><div class=\"grid-stack-item-content\">${content}</div></div>`;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else {\r\n      el = els as HTMLElement;\r\n    }\r\n\r\n    // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos\r\n    // as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz) before adding the node.\r\n    // So make sure we load any DOM attributes that are not specified in passed in options (which override)\r\n    let domAttr = this._readAttr(el);\r\n    options = {...(options || {})};  // make a copy before we modify in case caller re-uses it\r\n    Utils.defaults(options, domAttr);\r\n    this.engine.prepareNode(options);\r\n    this._writeAttr(el, options);\r\n\r\n    this.el.appendChild(el);\r\n\r\n    // similar to makeWidget() that doesn't read attr again and worse re-create a new node and loose any _id\r\n    this._prepareElement(el, true, options);\r\n    this._updateContainerHeight();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * saves the current layout returning a list of widgets for serialization (with default to save content), which might include any nested grids.\r\n   * Optionally you can also save the grid with options itself, so you can call the new GridStack.addGrid()\r\n   * to recreate everything from scratch. GridStackOptions.children would then contain the widget list.\r\n   */\r\n  public save(saveContent = true, saveGridOpt = false): GridStackWidget[] | GridStackOptions {\r\n    // return copied nodes we can modify at will...\r\n    let list = this.engine.save(saveContent);\r\n\r\n    // check for HTML content as well\r\n    if (saveContent) {\r\n      list.forEach(n => {\r\n        if (n.el) {\r\n          let sub = n.el.querySelector('.grid-stack-item-content');\r\n          n.content = sub ? sub.innerHTML : undefined;\r\n          if (!n.content) delete n.content;\r\n          delete n.el;\r\n        }\r\n      });\r\n    }\r\n\r\n    // check if save entire grid options (needed for recursive) + children...\r\n    if (saveGridOpt) {\r\n\r\n      // check for nested grid\r\n      list.forEach(n => {\r\n        if (n.subGrid) {\r\n          n.subGrid = (n.subGrid as GridStack).save(saveContent, true) as GridStackOptions;\r\n        }\r\n      })\r\n\r\n      let o: GridStackOptions = {...this.opts};\r\n      // delete default values that will be recreated on launch\r\n      if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {\r\n        o.margin = o.marginTop;\r\n        delete o.marginTop; delete o.marginRight; delete o.marginBottom; delete o.marginLeft;\r\n      }\r\n      if (o.rtl === (this.el.style.direction === 'rtl')) { o.rtl = 'auto' }\r\n      if (this._isAutoCellHeight) { o.cellHeight = 'auto' }\r\n      Utils.removeInternalAndSame(o, GridDefaults);\r\n      o.children = list;\r\n      return o;\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  /**\r\n   * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.\r\n   *\r\n   * @param layout list of widgets definition to update/create\r\n   * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving\r\n   * the user control of insertion.\r\n   *\r\n   * @example\r\n   * see http://gridstackjs.com/demo/serialization.html\r\n   **/\r\n  public load(layout: GridStackWidget[], addAndRemove: boolean | ((g: GridStack, w: GridStackWidget, add: boolean) => GridItemHTMLElement)  = true): GridStack {\r\n    let items = GridStack.Utils.sort(layout, -1, this._prevColumn || this.opts.column);\r\n\r\n    // if we're loading a layout into 1 column (_prevColumn is set only when going to 1) and items don't fit, make sure to save\r\n    // the original wanted layout so we can scale back up correctly #1471\r\n    if (this._prevColumn && this._prevColumn !== this.opts.column && items.some(n => (n.x + n.w) > this.opts.column)) {\r\n      this._ignoreLayoutsNodeChange = true; // skip layout update\r\n      this.engine.cacheLayout(items, this._prevColumn, true);\r\n    }\r\n\r\n    let removed: GridStackNode[] = [];\r\n    this.batchUpdate();\r\n\r\n    // see if any items are missing from new layout and need to be removed first\r\n    if (addAndRemove) {\r\n      let copyNodes = [...this.engine.nodes]; // don't loop through array you modify\r\n      copyNodes.forEach(n => {\r\n        let item = items.find(w => n.id === w.id);\r\n        if (!item) {\r\n          if (typeof(addAndRemove) === 'function') {\r\n            addAndRemove(this, n, false);\r\n          } else {\r\n            removed.push(n); // batch keep track\r\n            this.removeWidget(n.el, true, false);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // now add/update the widgets\r\n    items.forEach(w => {\r\n      let item = (w.id || w.id === 0) ? this.engine.nodes.find(n => n.id === w.id) : undefined;\r\n      if (item) {\r\n        this.update(item.el, w);\r\n        if (w.subGrid && (w.subGrid as GridStackOptions).children) { // update any sub grid as well\r\n          let sub = item.el.querySelector('.grid-stack') as GridHTMLElement;\r\n          if (sub && sub.gridstack) {\r\n            sub.gridstack.load((w.subGrid as GridStackOptions).children); // TODO: support updating grid options ?\r\n          }\r\n        }\r\n      } else if (addAndRemove) {\r\n        if (typeof(addAndRemove) === 'function') {\r\n          w = addAndRemove(this, w, true).gridstackNode;\r\n        } else {\r\n          w = this.addWidget(w).gridstackNode;\r\n        }\r\n        if (w.subGrid) { // see if there is a sub-grid to create too\r\n          let content = w.el.querySelector('.grid-stack-item-content') as HTMLElement;\r\n          w.subGrid = GridStack.addGrid(content, w.subGrid as GridStackOptions);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.engine.removedNodes = removed;\r\n    this.commit();\r\n\r\n    // after commit, clear that flag\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Initializes batch updates. You will see no changes until `commit()` method is called.\r\n   */\r\n  public batchUpdate(): GridStack {\r\n    this.engine.batchUpdate();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets current cell height.\r\n   */\r\n  public getCellHeight(forcePixel = false): number {\r\n    if (this.opts.cellHeight && this.opts.cellHeight !== 'auto' &&\r\n       (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === 'px')) {\r\n      return this.opts.cellHeight as number;\r\n    }\r\n    // else get first cell height\r\n    // or do entire grid and # of rows ? (this.el.getBoundingClientRect().height) / parseInt(this.el.getAttribute('gs-current-row'))\r\n    let el = this.el.querySelector('.' + this.opts.itemClass) as HTMLElement;\r\n    let height = Utils.toNumber(el.getAttribute('gs-h'));\r\n    return Math.round(el.offsetHeight / height);\r\n  }\r\n\r\n  /**\r\n   * Update current cell height - see `GridStackOptions.cellHeight` for format.\r\n   * This method rebuilds an internal CSS style sheet.\r\n   * Note: You can expect performance issues if call this method too often.\r\n   *\r\n   * @param val the cell height\r\n   * @param update (Optional) if false, styles will not be updated\r\n   *\r\n   * @example\r\n   * grid.cellHeight(grid.cellWidth() * 1.2);\r\n   */\r\n  public cellHeight(val: numberOrString, update = true): GridStack {\r\n    let data = Utils.parseHeight(val);\r\n    if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {\r\n      return this;\r\n    }\r\n    this.opts.cellHeightUnit = data.unit;\r\n    this.opts.cellHeight = data.h;\r\n\r\n    if (update) {\r\n      this._updateStyles(true); // true = force re-create\r\n    }\r\n    this._resizeNestedGrids(this.el);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets current cell width.\r\n   */\r\n  public cellWidth(): number {\r\n    return this.el.offsetWidth / this.opts.column;\r\n  }\r\n\r\n  /**\r\n   * Finishes batch updates. Updates DOM nodes. You must call it after batchUpdate.\r\n   */\r\n  public commit(): GridStack {\r\n    this.engine.commit();\r\n    this._triggerRemoveEvent();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /** re-layout grid items to reclaim any empty space */\r\n  public compact(): GridStack {\r\n    this.engine.compact();\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,\r\n   * as well as cache the original layout so you can revert back to previous positions without loss.\r\n   * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],\r\n   * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)\r\n   * @param column - Integer > 0 (default 12).\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n   */\r\n  public column(column: number, layout: ColumnOptions = 'moveScale'): GridStack {\r\n    if (this.opts.column === column) { return this; }\r\n    let oldColumn = this.opts.column;\r\n\r\n    // if we go into 1 column mode (which happens if we're sized less than minW unless disableOneColumnMode is on)\r\n    // then remember the original columns so we can restore.\r\n    if (column === 1) {\r\n      this._prevColumn = oldColumn;\r\n    } else {\r\n      delete this._prevColumn;\r\n    }\r\n\r\n    this.el.classList.remove('grid-stack-' + oldColumn);\r\n    this.el.classList.add('grid-stack-' + column);\r\n    this.opts.column = this.engine.column = column;\r\n\r\n    // update the items now - see if the dom order nodes should be passed instead (else default to current list)\r\n    let domNodes: GridStackNode[];\r\n    if (column === 1 && this.opts.oneColumnModeDomSort) {\r\n      domNodes = [];\r\n      this.getGridItems().forEach(el => {\r\n        if (el.gridstackNode) { domNodes.push(el.gridstackNode); }\r\n      });\r\n      if (!domNodes.length) { domNodes = undefined; }\r\n    }\r\n    this.engine.updateNodeWidths(oldColumn, column, domNodes, layout);\r\n\r\n    // and trigger our event last...\r\n    this._ignoreLayoutsNodeChange = true; // skip layout update\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the number of columns in the grid (default 12)\r\n   */\r\n  public getColumn(): number {\r\n    return this.opts.column;\r\n  }\r\n\r\n  /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children */\r\n  public getGridItems(): GridItemHTMLElement[] {\r\n    return Array.from(this.el.children)\r\n      .filter((el: HTMLElement) => el.matches('.' + this.opts.itemClass) && !el.matches('.' + this.opts.placeholderClass)) as GridItemHTMLElement[];\r\n  }\r\n\r\n  /**\r\n   * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.\r\n   * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).\r\n   */\r\n  public destroy(removeDOM = true): GridStack {\r\n    if (!this.el) { return; } // prevent multiple calls\r\n    this._updateWindowResizeEvent(true);\r\n    this.setStatic(true); // permanently removes DD\r\n    if (!removeDOM) {\r\n      this.removeAll(removeDOM);\r\n      this.el.classList.remove(this.opts._styleSheetClass);\r\n    } else {\r\n      this.el.parentNode.removeChild(this.el);\r\n    }\r\n    this._removeStylesheet();\r\n    delete this.opts._isNested;\r\n    delete this.opts;\r\n    delete this.placeholder;\r\n    delete this.engine;\r\n    delete this.el.gridstack; // remove circular dependency that would prevent a freeing\r\n    delete this.el;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Temporarily disables widgets moving/resizing.\r\n   * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n   * Note: no-op for static grid\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(false);\r\n   *  grid.enableResize(false);\r\n   */\r\n  public disable(): GridStack {\r\n    if (this.opts.staticGrid) { return; }\r\n    this.enableMove(false);\r\n    this.enableResize(false);\r\n    this._triggerEvent('disable');\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Re-enables widgets moving/resizing - see disable().\r\n   * Note: no-op for static grid.\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(true);\r\n   *  grid.enableResize(true);\r\n   */\r\n  public enable(): GridStack {\r\n    if (this.opts.staticGrid) { return; }\r\n    this.enableMove(true);\r\n    this.enableResize(true);\r\n    this._triggerEvent('enable');\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/disables widget moving. No-op for static grids.\r\n   *\r\n   * @param doEnable\r\n   * @param includeNewWidgets will force new widgets to be draggable as per\r\n   * doEnable`s value by changing the disableDrag grid option (default: true).\r\n   */\r\n  public enableMove(doEnable: boolean, includeNewWidgets = true): GridStack {\r\n    if (this.opts.staticGrid) { return this; } // can't move a static grid!\r\n    this.getGridItems().forEach(el => this.movable(el, doEnable));\r\n    if (includeNewWidgets) {\r\n      this.opts.disableDrag = !doEnable;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/disables widget resizing. No-op for static grids.\r\n   * @param doEnable\r\n   * @param includeNewWidgets will force new widgets to be draggable as per\r\n   * doEnable`s value by changing the disableResize grid option (default: true).\r\n   */\r\n  public enableResize(doEnable: boolean, includeNewWidgets = true): GridStack {\r\n    if (this.opts.staticGrid) { return this; } // can't size a static grid!\r\n    this.getGridItems().forEach(el => this.resizable(el, doEnable));\r\n    if (includeNewWidgets) {\r\n      this.opts.disableResize = !doEnable;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)\r\n   */\r\n  public float(val: boolean): GridStack {\r\n    /*\r\n    if (val === undefined) {\r\n      // TODO: should we support and/or change signature ? figure this soon...\r\n      console.warn('gridstack.ts: getter `float()` is deprecated in 2.x and has been replaced by `getFloat()`. It will be **completely** removed soon');\r\n      return this.getFloat();\r\n    }\r\n    */\r\n    this.engine.float = val;\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the current float mode\r\n   */\r\n  public getFloat(): boolean {\r\n    return this.engine.float;\r\n  }\r\n\r\n  /**\r\n   * Get the position of the cell under a pixel on screen.\r\n   * @param position the position of the pixel to resolve in\r\n   * absolute coordinates, as an object with top and left properties\r\n   * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).\r\n   * Useful when grid is within `position: relative` element\r\n   *\r\n   * Returns an object with properties `x` and `y` i.e. the column and row in the grid.\r\n   */\r\n  public getCellFromPixel(position: MousePosition, useDocRelative = false): CellPosition {\r\n    let box = this.el.getBoundingClientRect();\r\n    // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)\r\n    let containerPos;\r\n    if (useDocRelative) {\r\n      containerPos = {top: box.top + document.documentElement.scrollTop, left: box.left};\r\n      // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)\r\n    } else {\r\n      containerPos = {top: this.el.offsetTop, left: this.el.offsetLeft}\r\n      // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)\r\n    }\r\n    let relativeLeft = position.left - containerPos.left;\r\n    let relativeTop = position.top - containerPos.top;\r\n\r\n    let columnWidth = (box.width / this.opts.column);\r\n    let rowHeight = (box.height / parseInt(this.el.getAttribute('gs-current-row')));\r\n\r\n    return {x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight)};\r\n  }\r\n\r\n  /** returns the current number of rows, which will be at least `minRow` if set */\r\n  public getRow(): number {\r\n    return Math.max(this.engine.getRow(), this.opts.minRow);\r\n  }\r\n\r\n  /**\r\n   * Checks if specified area is empty.\r\n   * @param x the position x.\r\n   * @param y the position y.\r\n   * @param w the width of to check\r\n   * @param h the height of to check\r\n   */\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    return this.engine.isAreaEmpty(x, y, w, h);\r\n  }\r\n\r\n  /**\r\n   * If you add elements to your grid by hand, you have to tell gridstack afterwards to make them widgets.\r\n   * If you want gridstack to add the elements for you, use `addWidget()` instead.\r\n   * Makes the given element a widget and returns it.\r\n   * @param els widget or single selector to convert.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.el.appendChild('<div id=\"gsi-1\" gs-w=\"3\"></div>');\r\n   * grid.makeWidget('#gsi-1');\r\n   */\r\n  public makeWidget(els: GridStackElement): GridItemHTMLElement {\r\n    let el = GridStack.getElement(els);\r\n    this._prepareElement(el, true);\r\n    this._updateContainerHeight();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Event handler that extracts our CustomEvent data out automatically for receiving custom\r\n   * notifications (see doc for supported events)\r\n   * @param name of the event (see possible values) or list of names space separated\r\n   * @param callback function called with event and optional second/third param\r\n   * (see README documentation for each signature).\r\n   *\r\n   * @example\r\n   * grid.on('added', function(e, items) { log('added ', items)} );\r\n   * or\r\n   * grid.on('added removed change', function(e, items) { log(e.type, items)} );\r\n   *\r\n   * Note: in some cases it is the same as calling native handler and parsing the event.\r\n   * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );\r\n   *\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  public on(name: GridStackEvent, callback: (event: Event, arg2?: GridItemHTMLElement | GridStackNode[]) => void): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.on(name, callback));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // native CustomEvent handlers - cash the generic handlers so we can easily remove\r\n      let noData = (name === 'enable' || name === 'disable');\r\n      if (noData) {\r\n        this._gsEventHandler[name] = (event: Event) => callback(event);\r\n      } else {\r\n        this._gsEventHandler[name] = (event: CustomEvent) => callback(event, event.detail);\r\n      }\r\n      this.el.addEventListener(name, this._gsEventHandler[name]);\r\n    } else if (name === 'dragstart' || name === 'dragstop' || name === 'resizestart' || name === 'resizestop' || name === 'dropped') {\r\n      // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.\r\n      // do same for start event to make it easier...\r\n      this._gsEventHandler[name] = callback;\r\n    } else {\r\n      console.log('GridStack.on(' + name + ') event not supported, but you can still use $(\".grid-stack\").on(...) while jquery-ui is still used internally.');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * unsubscribe from the 'on' event below\r\n   * @param name of the event (see possible values)\r\n   */\r\n  public off(name: GridStackEvent): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.off(name));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // remove native CustomEvent handlers\r\n      if (this._gsEventHandler[name]) {\r\n        this.el.removeEventListener(name, this._gsEventHandler[name]);\r\n      }\r\n    }\r\n    delete this._gsEventHandler[name];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes widget from the grid.\r\n   * @param el  widget or selector to modify\r\n   * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).\r\n   * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\r\n   */\r\n  public removeWidget(els: GridStackElement, removeDOM = true, triggerEvent = true): GridStack {\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (el.parentElement !== this.el) return; // not our child!\r\n      let node = el.gridstackNode;\r\n      // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272\r\n      if (!node) {\r\n        node = this.engine.nodes.find(n => el === n.el);\r\n      }\r\n      if (!node) return;\r\n\r\n      // remove our DOM data (circular link) and drag&drop permanently\r\n      delete el.gridstackNode;\r\n      GridStackDDI.get().remove(el);\r\n\r\n      this.engine.removeNode(node, removeDOM, triggerEvent);\r\n\r\n      if (removeDOM && el.parentElement) {\r\n        el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM\r\n      }\r\n    });\r\n    if (triggerEvent) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes all widgets from the grid.\r\n   * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).\r\n   */\r\n  public removeAll(removeDOM = true): GridStack {\r\n    // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently\r\n    this.engine.nodes.forEach(n => {\r\n      delete n.el.gridstackNode;\r\n      GridStackDDI.get().remove(n.el);\r\n    });\r\n    this.engine.removeAll(removeDOM);\r\n    this._triggerRemoveEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.\r\n   * @param doAnimate if true the grid will animate.\r\n   */\r\n  public setAnimation(doAnimate: boolean): GridStack {\r\n    if (doAnimate) {\r\n      this.el.classList.add('grid-stack-animate');\r\n    } else {\r\n      this.el.classList.remove('grid-stack-animate');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.\r\n   * Also toggle the grid-stack-static class.\r\n   * @param val if true the grid become static.\r\n   */\r\n  public setStatic(val: boolean): GridStack {\r\n    if (this.opts.staticGrid === val) { return this; }\r\n    this.opts.staticGrid = val;\r\n    this.engine.nodes.forEach(n => this._prepareDragDropByNode(n)); // either delete Drag&drop or initialize it\r\n    this._setStaticClass();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.\r\n   * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)\r\n   * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.\r\n   */\r\n  public update(els: GridStackElement, opt: GridStackWidget): GridStack {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update({x, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1;\r\n      opt = { x:a[i++], y:a[i++], w:a[i++], h:a[i++] };\r\n      return this.update(els, opt);\r\n    }\r\n\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (!el || !el.gridstackNode) { return; }\r\n      let n = el.gridstackNode;\r\n      let w = {...opt}; // make a copy we can modify in case they re-use it or multiple items\r\n      delete w.autoPosition;\r\n\r\n      // move/resize widget if anything changed\r\n      let keys = ['x', 'y', 'w', 'h'];\r\n      let m: GridStackWidget;\r\n      if (keys.some(k => w[k] !== undefined && w[k] !== n[k])) {\r\n        m = {};\r\n        keys.forEach(k => {\r\n          m[k] = (w[k] !== undefined) ? w[k] : n[k];\r\n          delete w[k];\r\n        });\r\n      }\r\n      // for a move as well IFF there is any min/max fields set\r\n      if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {\r\n        m = {}; // will use node position but validate values\r\n      }\r\n\r\n      // check for content changing\r\n      if (w.content) {\r\n        let sub = el.querySelector('.grid-stack-item-content');\r\n        if (sub && sub.innerHTML !== w.content) {\r\n          sub.innerHTML = w.content;\r\n        }\r\n        delete w.content;\r\n      }\r\n\r\n      // any remaining fields are assigned, but check for dragging changes, resize constrain\r\n      let changed = false;\r\n      let ddChanged = false;\r\n      for (const key in w) {\r\n        if (key[0] !== '_' && n[key] !== w[key]) {\r\n          n[key] = w[key];\r\n          changed = true;\r\n          ddChanged = ddChanged || (!this.opts.staticGrid && (key === 'noResize' || key === 'noMove' || key === 'locked'));\r\n        }\r\n      }\r\n\r\n      // finally move the widget\r\n      if (m) {\r\n        this.engine.cleanNodes();\r\n        this.engine.beginUpdate(n);\r\n        this.engine.moveNode(n, m.x, m.y, m.w, m.h);\r\n        this._updateContainerHeight();\r\n        this._triggerChangeEvent();\r\n        this.engine.endUpdate();\r\n      }\r\n      if (changed) { // move will only update x,y,w,h so update the rest too\r\n        this._writeAttr(el, n);\r\n      }\r\n      if (ddChanged) {\r\n        this._prepareDragDropByNode(n);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).\r\n   * @param value margin value\r\n   */\r\n  public margin(value: numberOrString): GridStack {\r\n    let isMultiValue = (typeof value === 'string' && value.split(' ').length > 1);\r\n    // check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)\r\n    if (!isMultiValue) {\r\n      let data = Utils.parseHeight(value);\r\n      if (this.opts.marginUnit === data.unit && this.opts.margin === data.h) return;\r\n    }\r\n    // re-use existing margin handling\r\n    this.opts.margin = value;\r\n    this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = undefined;\r\n    this.initMargin();\r\n\r\n    this._updateStyles(true); // true = force re-create\r\n\r\n    return this;\r\n  }\r\n\r\n  /** returns current margin number value (undefined if 4 sides don't match) */\r\n  public getMargin(): number { return this.opts.margin as number; }\r\n\r\n  /**\r\n   * Returns true if the height of the grid will be less the vertical\r\n   * constraint. Always returns true if grid doesn't have height constraint.\r\n   * @param x new position x. If value is null or undefined it will be ignored.\r\n   * @param y new position y. If value is null or undefined it will be ignored.\r\n   * @param w new dimensions width. If value is null or undefined it will be ignored.\r\n   * @param h new dimensions height. If value is null or undefined it will be ignored.\r\n   * @param autoPosition if true then x, y parameters will be ignored and widget\r\n   * will be places on the first available position\r\n   *\r\n   * @example\r\n   * if (grid.willItFit(newNode.x, newNode.y, newNode.w, newNode.h, newNode.autoPosition)) {\r\n   *   grid.addWidget(newNode);\r\n   * } else {\r\n   *   alert('Not enough free space to place the widget');\r\n   * }\r\n   */\r\n  public willItFit(x: number, y: number, w: number, h: number, autoPosition: boolean): boolean {\r\n    return this.engine.canBePlacedWithRespectToHeight({x, y, w, h, autoPosition});\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerChangeEvent(): GridStack {\r\n    if (this.engine.batchMode) { return this; }\r\n    let elements = this.engine.getDirtyNodes(true); // verify they really changed\r\n    if (elements && elements.length) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(elements);\r\n      }\r\n      this._triggerEvent('change', elements);\r\n    }\r\n    this.engine.saveInitial(); // we called, now reset initial values & dirty flags\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerAddEvent(): GridStack {\r\n    if (this.engine.batchMode) { return this }\r\n    if (this.engine.addedNodes && this.engine.addedNodes.length > 0) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(this.engine.addedNodes);\r\n      }\r\n      // prevent added nodes from also triggering 'change' event (which is called next)\r\n      this.engine.addedNodes.forEach(n => { delete n._dirty; });\r\n      this._triggerEvent('added', this.engine.addedNodes);\r\n      this.engine.addedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  public _triggerRemoveEvent(): GridStack {\r\n    if (this.engine.batchMode) { return this; }\r\n    if (this.engine.removedNodes && this.engine.removedNodes.length > 0) {\r\n      this._triggerEvent('removed', this.engine.removedNodes);\r\n      this.engine.removedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerEvent(name: string, data?: GridStackNode[]): GridStack {\r\n    let event = data ? new CustomEvent(name, {bubbles: false, detail: data}) : new Event(name);\r\n    this.el.dispatchEvent(event);\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to delete the current dynamic style sheet used for our layout */\r\n  private _removeStylesheet(): GridStack {\r\n\r\n    if (this._styles) {\r\n      Utils.removeStylesheet(this._styles._id);\r\n      delete this._styles;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal updated/create the CSS styles for row based layout and initial margin setting */\r\n  private _updateStyles(forceUpdate = false, maxH?: number): GridStack {\r\n    // call to delete existing one if we change cellHeight / margin\r\n    if (forceUpdate) {\r\n      this._removeStylesheet();\r\n    }\r\n\r\n    this._updateContainerHeight();\r\n    if (!this.opts.cellHeight) { // The rest will be handled by CSS TODO: I don't understand this usage\r\n      return this;\r\n    }\r\n\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let cellHeightUnit = this.opts.cellHeightUnit;\r\n    let prefix = `.${this.opts._styleSheetClass} > .${this.opts.itemClass}`;\r\n\r\n    // create one as needed\r\n    if (!this._styles) {\r\n      let id = 'gridstack-style-' + (Math.random() * 100000).toFixed();\r\n      // insert style to parent (instead of 'head' by default) to support WebComponent\r\n      let styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode as HTMLElement;\r\n      this._styles = Utils.createStylesheet(id, styleLocation);\r\n      if (!this._styles) { return this; }\r\n      this._styles._id = id;\r\n      this._styles._max = 0;\r\n\r\n      // these are done once only\r\n      Utils.addCSSRule(this._styles, prefix, `min-height: ${cellHeight}${cellHeightUnit}`);\r\n      // content margins\r\n      let top: string = this.opts.marginTop + this.opts.marginUnit;\r\n      let bottom: string = this.opts.marginBottom + this.opts.marginUnit;\r\n      let right: string = this.opts.marginRight + this.opts.marginUnit;\r\n      let left: string = this.opts.marginLeft + this.opts.marginUnit;\r\n      let content = `${prefix} > .grid-stack-item-content`;\r\n      let placeholder = `.${this.opts._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;\r\n      Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      // resize handles offset (to match margin)\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);\r\n    }\r\n\r\n    // now update the height specific fields\r\n    maxH = maxH || this._styles._max;\r\n    if (maxH > this._styles._max) {\r\n      let getHeight = (rows: number): string => (cellHeight * rows) + cellHeightUnit;\r\n      for (let i = this._styles._max + 1; i <= maxH; i++) { // start at 1\r\n        let h: string = getHeight(i);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-y=\"${i-1}\"]`,        `top: ${getHeight(i-1)}`); // start at 0\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-h=\"${i}\"]`,     `height: ${h}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-min-h=\"${i}\"]`, `min-height: ${h}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-max-h=\"${i}\"]`, `max-height: ${h}`);\r\n      }\r\n      this._styles._max = maxH;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _updateContainerHeight(): GridStack {\r\n    if (!this.engine || this.engine.batchMode) { return this; }\r\n    let row = this.getRow(); // checks for minRow already\r\n    // check for css min height\r\n    let cssMinHeight = parseInt(getComputedStyle(this.el)['min-height']);\r\n    if (cssMinHeight > 0) {\r\n      let minRow = Math.round(cssMinHeight / this.getCellHeight(true));\r\n      if (row < minRow) {\r\n        row = minRow;\r\n      }\r\n    }\r\n    this.el.setAttribute('gs-current-row', String(row));\r\n    if (row === 0) {\r\n      this.el.style.removeProperty('height');\r\n      return this;\r\n    }\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let unit = this.opts.cellHeightUnit;\r\n    if (!cellHeight) { return this }\r\n    this.el.style.height = row * cellHeight + unit;\r\n    return this;\r\n  }\r\n\r\n  /** called to resize children nested grids when we/item resizes */\r\n  private _resizeNestedGrids(target: HTMLElement): GridStack {\r\n    target.querySelectorAll('.grid-stack').forEach((el: GridHTMLElement) => {\r\n      if (el.gridstack) {\r\n        el.gridstack.onParentResize();\r\n      }});\r\n    return this;\r\n  }\r\n\r\n\r\n  /** @internal */\r\n  private _prepareElement(el: GridItemHTMLElement, triggerAddEvent = false, node?: GridStackNode): GridStack {\r\n    if (!node) {\r\n      el.classList.add(this.opts.itemClass);\r\n      node = this._readAttr(el);\r\n    }\r\n    el.gridstackNode = node;\r\n    node.el = el;\r\n    node.grid = this;\r\n    let copy = {...node};\r\n    node = this.engine.addNode(node, triggerAddEvent);\r\n    // write node attr back in case there was collision or we have to fix bad values during addNode()\r\n    if (!Utils.same(node, copy)) {\r\n      this._writeAttr(el, node);\r\n    }\r\n    this._prepareDragDropByNode(node);\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write x,y,w,h attributes back to element */\r\n  private _writeAttrs(el: HTMLElement, x?: number, y?: number, w?: number, h?: number): GridStack {\r\n    if (x !== undefined && x !== null) { el.setAttribute('gs-x', String(x)); }\r\n    if (y !== undefined && y !== null) { el.setAttribute('gs-y', String(y)); }\r\n    if (w) { el.setAttribute('gs-w', String(w)); }\r\n    if (h) { el.setAttribute('gs-h', String(h)); }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write any default attributes back to element */\r\n  private _writeAttr(el: HTMLElement, node: GridStackWidget): GridStack {\r\n    if (!node) return this;\r\n    this._writeAttrs(el, node.x, node.y, node.w, node.h);\r\n\r\n    let attrs /*: GridStackWidget*/ = { // remaining attributes\r\n      autoPosition: 'gs-auto-position',\r\n      minW: 'gs-min-w',\r\n      minH: 'gs-min-h',\r\n      maxW: 'gs-max-w',\r\n      maxH: 'gs-max-h',\r\n      noResize: 'gs-no-resize',\r\n      noMove: 'gs-no-move',\r\n      locked: 'gs-locked',\r\n      id: 'gs-id',\r\n      resizeHandles: 'gs-resize-handles'\r\n    };\r\n    for (const key in attrs) {\r\n      if (node[key]) { // 0 is valid for x,y only but done above already and not in list\r\n        el.setAttribute(attrs[key], String(node[key]));\r\n      } else {\r\n        el.removeAttribute(attrs[key]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to read any default attributes from element */\r\n  private _readAttr(el: HTMLElement, node: GridStackNode = {}): GridStackWidget {\r\n    node.x = Utils.toNumber(el.getAttribute('gs-x'));\r\n    node.y = Utils.toNumber(el.getAttribute('gs-y'));\r\n    node.w = Utils.toNumber(el.getAttribute('gs-w'));\r\n    node.h = Utils.toNumber(el.getAttribute('gs-h'));\r\n    node.maxW = Utils.toNumber(el.getAttribute('gs-max-w'));\r\n    node.minW = Utils.toNumber(el.getAttribute('gs-min-w'));\r\n    node.maxH = Utils.toNumber(el.getAttribute('gs-max-h'));\r\n    node.minH = Utils.toNumber(el.getAttribute('gs-min-h'));\r\n    node.autoPosition = Utils.toBool(el.getAttribute('gs-auto-position'));\r\n    node.noResize = Utils.toBool(el.getAttribute('gs-no-resize'));\r\n    node.noMove = Utils.toBool(el.getAttribute('gs-no-move'));\r\n    node.locked = Utils.toBool(el.getAttribute('gs-locked'));\r\n    node.resizeHandles = el.getAttribute('gs-resize-handles');\r\n    node.id = el.getAttribute('gs-id');\r\n\r\n    // remove any key not found (null or false which is default)\r\n    for (const key in node) {\r\n      if (!node.hasOwnProperty(key)) { return; }\r\n      if (!node[key] && node[key] !== 0) { // 0 can be valid value (x,y only really)\r\n        delete node[key];\r\n      }\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  /** @internal */\r\n  private _setStaticClass(): GridStack {\r\n    let classes = ['grid-stack-static'];\r\n\r\n    if (this.opts.staticGrid) {\r\n      this.el.classList.add(...classes);\r\n      this.el.setAttribute('gs-static', 'true');\r\n    } else {\r\n      this.el.classList.remove(...classes);\r\n      this.el.removeAttribute('gs-static');\r\n\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * called when we are being resized by the window - check if the one Column Mode needs to be turned on/off\r\n   * and remember the prev columns we used, as well as check for auto cell height (square)\r\n   */\r\n  public onParentResize(): GridStack {\r\n    if (!this.el) {return} // return if we're gone\r\n\r\n    // make the cells content (minus margin) square again\r\n    if (this._isAutoCellHeight) {\r\n      Utils.throttle(() => {\r\n        let marginDiff = - (this.opts.marginRight as number) - (this.opts.marginLeft as number)\r\n          + (this.opts.marginTop as number) + (this.opts.marginBottom as number);\r\n        this.cellHeight(this.cellWidth() + marginDiff);\r\n      }, 100);\r\n    }\r\n\r\n    if (!this.opts.disableOneColumnMode && this.el.clientWidth <= this.opts.minWidth) {\r\n      if (this._oneColumnMode) { return this }\r\n      this._oneColumnMode = true;\r\n      this.column(1);\r\n      this._resizeNestedGrids(this.el);\r\n    } else {\r\n      if (!this._oneColumnMode) { return this }\r\n      delete this._oneColumnMode;\r\n      this.column(this._prevColumn);\r\n      this._resizeNestedGrids(this.el);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** add or remove the window size event handler */\r\n  private _updateWindowResizeEvent(forceRemove = false): GridStack {\r\n    const workTodo = (this._isAutoCellHeight || !this.opts.disableOneColumnMode);\r\n\r\n    // only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting oneColumn (i.e. doing work)\r\n    if (workTodo && !forceRemove && !this.opts._isNested && !this._windowResizeBind) {\r\n      this._windowResizeBind = this.onParentResize.bind(this); // so we can properly remove later\r\n      window.addEventListener('resize', this._windowResizeBind);\r\n      this.onParentResize(); // initially call it once...\r\n    } else if ((forceRemove || !workTodo) && this._windowResizeBind) {\r\n      window.removeEventListener('resize', this._windowResizeBind);\r\n      delete this._windowResizeBind; // remove link to us so we can free\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal convert a potential selector into actual element */\r\n  public static getElement(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement { return Utils.getElement(els) }\r\n  /** @internal */\r\n  public static getElements(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement[] { return Utils.getElements(els) }\r\n  /** @internal */\r\n  public static getGridElement(els: GridStackElement): GridHTMLElement { return GridStack.getElement(els) }\r\n  /** @internal */\r\n  public static getGridElements(els: string): GridHTMLElement[] { return Utils.getElements(els) }\r\n\r\n  /** @internal initialize margin top/bottom/left/right and units */\r\n  private initMargin(): GridStack {\r\n\r\n    let data: HeightData;\r\n    let margin = 0;\r\n\r\n    // support passing multiple values like CSS (ex: '5px 10px 0 20px')\r\n    let margins: string[] = [];\r\n    if (typeof this.opts.margin === 'string') {\r\n      margins = this.opts.margin.split(' ')\r\n    }\r\n    if (margins.length === 2) { // top/bot, left/right like CSS\r\n      this.opts.marginTop = this.opts.marginBottom = margins[0];\r\n      this.opts.marginLeft = this.opts.marginRight = margins[1];\r\n    } else if (margins.length === 4) { // Clockwise like CSS\r\n      this.opts.marginTop = margins[0];\r\n      this.opts.marginRight = margins[1];\r\n      this.opts.marginBottom = margins[2];\r\n      this.opts.marginLeft = margins[3];\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.margin);\r\n      this.opts.marginUnit = data.unit;\r\n      margin = this.opts.margin = data.h;\r\n    }\r\n\r\n    // see if top/bottom/left/right need to be set as well\r\n    if (this.opts.marginTop === undefined) {\r\n      this.opts.marginTop = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginTop);\r\n      this.opts.marginTop = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginBottom === undefined) {\r\n      this.opts.marginBottom = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginBottom);\r\n      this.opts.marginBottom = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginRight === undefined) {\r\n      this.opts.marginRight = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginRight);\r\n      this.opts.marginRight = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginLeft === undefined) {\r\n      this.opts.marginLeft = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginLeft);\r\n      this.opts.marginLeft = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n    this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...\r\n    if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {\r\n      this.opts.margin = this.opts.marginTop; // makes it easier to check for no-ops in setMargin()\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /*\r\n   * drag&drop empty stubs that will be implemented in gridstack-dd.ts for non static grid\r\n   * so we don't incur the load unless needed.\r\n   * NOTE: had to make those methods public in order to define them else as\r\n   *   GridStack.prototype._setupAcceptWidget = function()\r\n   * maybe there is a better way....\r\n   */\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n\r\n  /**\r\n   * Enables/Disables moving. No-op for static grids.\r\n   * @param els widget or selector to modify.\r\n   * @param val if true widget will be draggable.\r\n   */\r\n  public movable(els: GridStackElement, val: boolean): GridStack { return this; }\r\n  /**\r\n   * Enables/Disables resizing. No-op for static grids.\r\n   * @param els  widget or selector to modify\r\n   * @param val  if true widget will be resizable.\r\n   */\r\n  public resizable(els: GridStackElement, val: boolean): GridStack { return this; }\r\n  /** @internal called to add drag over support to support widgets */\r\n  public _setupAcceptWidget(): GridStack { return this; }\r\n  /** @internal called to setup a trash drop zone if the user specifies it */\r\n  public _setupRemoveDrop(): GridStack { return this; }\r\n  /** @internal */\r\n  public _setupRemovingTimeout(el: GridItemHTMLElement): GridStack { return this; }\r\n  /** @internal */\r\n  public _clearRemovingTimeout(el: GridItemHTMLElement): GridStack { return this; }\r\n  /** @internal call to setup dragging in from the outside (say toolbar), with options */\r\n  public _setupDragIn():  GridStack {return this; }\r\n  /** @internal prepares the element for drag&drop **/\r\n  public _prepareDragDropByNode(node: GridStackNode): GridStack { return this; }\r\n\r\n  // 2.x API that just calls the new and better update() - keep those around for backward compat only...\r\n  /** @internal */\r\n  public locked(els: GridStackElement, locked: boolean): GridStack { return this.update(els, {locked}) }\r\n  /** @internal */\r\n  public maxWidth(els: GridStackElement, maxW: number): GridStack { return this.update(els, {maxW}) }\r\n  /** @internal */\r\n  public minWidth(els: GridStackElement, minW: number): GridStack {  return this.update(els, {minW}) }\r\n  /** @internal */\r\n  public maxHeight(els: GridStackElement, maxH: number): GridStack { return this.update(els, {maxH}) }\r\n  /** @internal */\r\n  public minHeight(els: GridStackElement, minH: number): GridStack { return this.update(els, {minH}) }\r\n  /** @internal */\r\n  public move(els: GridStackElement, x?: number, y?: number): GridStack { return this.update(els, {x, y}) }\r\n  /** @internal */\r\n  public resize(els: GridStackElement, w?: number, h?: number): GridStack { return this.update(els, {w, h}) }\r\n}\r\n","// index.static.ts 3.1.0 - everything you need for a static Grid (non draggable) @preserve\r\n\r\n// import './gridstack-poly.js';\r\n\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\nexport * from './gridstack-ddi';\r\nexport * from './gridstack';\r\n\r\n// declare module 'gridstack'; for umd ?\r\n","// utils.ts 3.1.0 @preserve\r\n\r\n/**\r\n * https://gridstackjs.com/\r\n * (c) 2014-2020 Alain Dumesny, Dylan Weiss, Pavel Reznikov\r\n * gridstack.js may be freely distributed under the MIT license.\r\n*/\r\n\r\nimport { GridStackElement, GridStackWidget, GridStackNode, GridStackOptions, numberOrString } from './types';\r\n\r\nexport interface HeightData {\r\n  h: number;\r\n  unit: string;\r\n}\r\n\r\n/** checks for obsolete method names */\r\n// eslint-disable-next-line\r\nexport function obsolete(self, f, oldName: string, newName: string, rev: string): (...args: any[]) => any {\r\n  let wrapper = (...args) => {\r\n    console.warn('gridstack.js: Function `' + oldName + '` is deprecated in ' + rev + ' and has been replaced ' +\r\n    'with `' + newName + '`. It will be **completely** removed in v1.0');\r\n    return f.apply(self, args);\r\n  }\r\n  wrapper.prototype = f.prototype;\r\n  return wrapper;\r\n}\r\n\r\n/** checks for obsolete grid options (can be used for any fields, but msg is about options) */\r\nexport function obsoleteOpts(opts: GridStackOptions, oldName: string, newName: string, rev: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    opts[newName] = opts[oldName];\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **completely** removed in v1.0');\r\n  }\r\n}\r\n\r\n/** checks for obsolete grid options which are gone */\r\nexport function obsoleteOptsDel(opts: GridStackOptions, oldName: string, rev: string, info: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + info);\r\n  }\r\n}\r\n\r\n/** checks for obsolete Jquery element attributes */\r\nexport function obsoleteAttr(el: HTMLElement, oldName: string, newName: string, rev: string): void {\r\n  let oldAttr = el.getAttribute(oldName);\r\n  if (oldAttr !== null) {\r\n    el.setAttribute(newName, oldAttr);\r\n    console.warn('gridstack.js: attribute `' + oldName + '`=' + oldAttr + ' is deprecated on this object in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **completely** removed in v1.0');\r\n  }\r\n}\r\n\r\n/**\r\n * Utility methods\r\n */\r\nexport class Utils {\r\n\r\n  /** convert a potential selector into actual list of html elements */\r\n  static getElements(els: GridStackElement): HTMLElement[] {\r\n    if (typeof els === 'string') {\r\n      let list = document.querySelectorAll(els);\r\n      if (!list.length && els[0] !== '.' && els[0] !== '#') {\r\n        list = document.querySelectorAll('.' + els);\r\n        if (!list.length) { list = document.querySelectorAll('#' + els) }\r\n      }\r\n      return Array.from(list) as HTMLElement[];\r\n    }\r\n    return [els];\r\n  }\r\n\r\n  /** convert a potential selector into actual single element */\r\n  static getElement(els: GridStackElement): HTMLElement {\r\n    if (typeof els === 'string') {\r\n      if (!els.length) { return null}\r\n      if (els[0] === '#') {\r\n        return document.getElementById(els.substring(1));\r\n      }\r\n      if (els[0] === '.' || els[0] === '[') {\r\n        return document.querySelector(els);\r\n      }\r\n\r\n      // if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS\r\n      if(!isNaN(+els[0])) { // start with digit\r\n        return document.getElementById(els);\r\n      }\r\n\r\n      // finally try string, then id then class\r\n      let el = document.querySelector(els);\r\n      if (!el) { el = document.getElementById(els) }\r\n      if (!el) { el = document.querySelector('.' + els) }\r\n      return el as HTMLElement;\r\n    }\r\n    return els;\r\n  }\r\n\r\n  /** returns true if a and b overlap */\r\n  static isIntercepted(a: GridStackWidget, b: GridStackWidget): boolean {\r\n    return !(a.x + a.w <= b.x || b.x + b.w <= a.x || a.y + a.h <= b.y || b.y + b.h <= a.y);\r\n  }\r\n\r\n  /**\r\n   * Sorts array of nodes\r\n   * @param nodes array to sort\r\n   * @param dir 1 for asc, -1 for desc (optional)\r\n   * @param width width of the grid. If undefined the width will be calculated automatically (optional).\r\n   **/\r\n  static sort(nodes: GridStackNode[], dir?: -1 | 1, column?: number): GridStackNode[] {\r\n    if (!column) {\r\n      let widths = nodes.map(n => n.x + n.w);\r\n      column = Math.max(...widths);\r\n    }\r\n\r\n    if (dir === -1)\r\n      return nodes.sort((a, b) => (b.x + b.y * column)-(a.x + a.y * column));\r\n    else\r\n      return nodes.sort((b, a) => (b.x + b.y * column)-(a.x + a.y * column));\r\n  }\r\n\r\n  /**\r\n   * creates a style sheet with style id under given parent\r\n   * @param id will set the 'gs-style-id' attribute to that id\r\n   * @param parent to insert the stylesheet as first child,\r\n   * if none supplied it will be appended to the document head instead.\r\n   */\r\n  static createStylesheet(id: string, parent?: HTMLElement): CSSStyleSheet {\r\n    let style: HTMLStyleElement = document.createElement('style');\r\n    style.setAttribute('type', 'text/css');\r\n    style.setAttribute('gs-style-id', id);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if ((style as any).styleSheet) { // TODO: only CSSImportRule have that and different beast ??\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (style as any).styleSheet.cssText = '';\r\n    } else {\r\n      style.appendChild(document.createTextNode('')); // WebKit hack\r\n    }\r\n    if (!parent) {\r\n      // default to head\r\n      parent = document.getElementsByTagName('head')[0];\r\n      parent.appendChild(style);\r\n    } else {\r\n      parent.insertBefore(style, parent.firstChild);\r\n    }\r\n    return style.sheet as CSSStyleSheet;\r\n  }\r\n\r\n  /** removed the given stylesheet id */\r\n  static removeStylesheet(id: string): void {\r\n    let el = document.querySelector('STYLE[gs-style-id=' + id + ']');\r\n    if (!el || !el.parentNode) return;\r\n    el.parentNode.removeChild(el);\r\n  }\r\n\r\n  /** inserts a CSS rule */\r\n  static addCSSRule(sheet: CSSStyleSheet, selector: string, rules: string): void {\r\n    if (typeof sheet.addRule === 'function') {\r\n      sheet.addRule(selector, rules);\r\n    } else if (typeof sheet.insertRule === 'function') {\r\n      sheet.insertRule(`${selector}{${rules}}`);\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  static toBool(v: unknown): boolean {\r\n    if (typeof v === 'boolean') {\r\n      return v;\r\n    }\r\n    if (typeof v === 'string') {\r\n      v = v.toLowerCase();\r\n      return !(v === '' || v === 'no' || v === 'false' || v === '0');\r\n    }\r\n    return Boolean(v);\r\n  }\r\n\r\n  static toNumber(value: null | string): number {\r\n    return (value === null || value.length === 0) ? undefined : Number(value);\r\n  }\r\n\r\n  static parseHeight(val: numberOrString): HeightData {\r\n    let h: number;\r\n    let unit = 'px';\r\n    if (typeof val === 'string') {\r\n      let match = val.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);\r\n      if (!match) {\r\n        throw new Error('Invalid height');\r\n      }\r\n      unit = match[2] || 'px';\r\n      h = parseFloat(match[1]);\r\n    } else {\r\n      h = val;\r\n    }\r\n    return { h, unit };\r\n  }\r\n\r\n  /** copies unset fields in target to use the given default sources values */\r\n  // eslint-disable-next-line\r\n  static defaults(target, ...sources): {} {\r\n\r\n    sources.forEach(source => {\r\n      for (const key in source) {\r\n        if (!source.hasOwnProperty(key)) { return; }\r\n        if (target[key] === null || target[key] === undefined) {\r\n          target[key] = source[key];\r\n        } else if (typeof source[key] === 'object' && typeof target[key] === 'object') {\r\n          // property is an object, recursively add it's field over... #1373\r\n          this.defaults(target[key], source[key]);\r\n        }\r\n      }\r\n    });\r\n\r\n    return target;\r\n  }\r\n\r\n  /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */\r\n  static same(a: unknown, b: unknown): boolean {\r\n    if (typeof a !== 'object')  { return a == b; }\r\n    if (typeof a !== typeof b) { return false; }\r\n    // else we have object, check just 1 level deep for being same things...\r\n    if (Object.keys(a).length !== Object.keys(b).length) { return false; }\r\n    for (const key in a) {\r\n      if (a[key] !== b[key]) { return false; }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */\r\n  static removeInternalAndSame(a: unknown, b: unknown):void {\r\n    if (typeof a !== 'object' || typeof b !== 'object') return;\r\n    for (let key in a) {\r\n      let val = a[key];\r\n      if (val && typeof val === 'object') {\r\n        for (let i in val) {\r\n          if (val[i] === b[key][i] || i[0] === '_') { delete val[i] }\r\n        }\r\n        if (!Object.keys(val).length) { delete a[key] }\r\n      } else if (val === b[key] || key[0] === '_') { delete a[key] }\r\n    }\r\n  }\r\n\r\n  /** return the closest parent matching the given class */\r\n  static closestByClass(el: HTMLElement, name: string): HTMLElement {\r\n\r\n    while(el = el.parentElement) {\r\n      if (el.classList.contains(name)) return el;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** delay calling the given function by certain amount of time */\r\n  static throttle(callback: () => void, delay: number): () => void {\r\n    let isWaiting = false;\r\n\r\n    return (...args) => {\r\n      if (!isWaiting) {\r\n        callback.apply(this, args);\r\n        isWaiting = true;\r\n        setTimeout(() => isWaiting = false, delay);\r\n      }\r\n    }\r\n  }\r\n\r\n  static removePositioningStyles(el: HTMLElement): void {\r\n    let style = el.style;\r\n    if (style.position) {\r\n      style.removeProperty('position');\r\n    }\r\n    if (style.left) {\r\n      style.removeProperty('left');\r\n    }\r\n    if (style.top) {\r\n      style.removeProperty('top');\r\n    }\r\n    if (style.width) {\r\n      style.removeProperty('width');\r\n    }\r\n    if (style.height) {\r\n      style.removeProperty('height');\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  static getScrollParent(el: HTMLElement): HTMLElement {\r\n    let returnEl;\r\n    if (el === null) {\r\n      returnEl = null;\r\n    } else if (el.scrollHeight > el.clientHeight) {\r\n      returnEl = el;\r\n    } else {\r\n      returnEl = this.getScrollParent(el.parentElement);\r\n    }\r\n    return returnEl;\r\n  }\r\n\r\n  /** @internal */\r\n  static updateScrollPosition(el: HTMLElement, position: {top: number}, distance: number): void {\r\n    // is widget in view?\r\n    let rect = el.getBoundingClientRect();\r\n    let innerHeightOrClientHeight = (window.innerHeight || document.documentElement.clientHeight);\r\n    if (rect.top < 0 ||\r\n      rect.bottom > innerHeightOrClientHeight\r\n    ) {\r\n      // set scrollTop of first parent that scrolls\r\n      // if parent is larger than el, set as low as possible\r\n      // to get entire widget on screen\r\n      let offsetDiffDown = rect.bottom - innerHeightOrClientHeight;\r\n      let offsetDiffUp = rect.top;\r\n      let scrollEl = this.getScrollParent(el);\r\n      if (scrollEl !== null) {\r\n        let prevScroll = scrollEl.scrollTop;\r\n        if (rect.top < 0 && distance < 0) {\r\n          // moving up\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;\r\n          }\r\n        } else if (distance > 0) {\r\n          // moving down\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;\r\n          }\r\n        }\r\n        // move widget y by amount scrolled\r\n        position.top += scrollEl.scrollTop - prevScroll;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(822);\n"],"sourceRoot":""}