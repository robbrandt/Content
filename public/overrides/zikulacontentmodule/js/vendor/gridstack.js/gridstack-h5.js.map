{"version":3,"sources":["webpack://GridStack/webpack/universalModuleDefinition","webpack://GridStack/./src/gridstack-dd.ts","webpack://GridStack/./src/gridstack-ddi.ts","webpack://GridStack/./src/gridstack-engine.ts","webpack://GridStack/./src/gridstack-h5.ts","webpack://GridStack/./src/gridstack.ts","webpack://GridStack/./src/h5/dd-base-impl.ts","webpack://GridStack/./src/h5/dd-draggable.ts","webpack://GridStack/./src/h5/dd-droppable.ts","webpack://GridStack/./src/h5/dd-element.ts","webpack://GridStack/./src/h5/dd-manager.ts","webpack://GridStack/./src/h5/dd-resizable-handle.ts","webpack://GridStack/./src/h5/dd-resizable.ts","webpack://GridStack/./src/h5/dd-utils.ts","webpack://GridStack/./src/h5/gridstack-dd-native.ts","webpack://GridStack/./src/utils.ts","webpack://GridStack/webpack/bootstrap","webpack://GridStack/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","GridStackDD","GridStackDDI","get","el","this","draggable","resizable","gridstackNode","_initDD","_itemRemoving","remove","node","undefined","grid","_isAboutToRemove","classList","add","GridStack","prototype","_setupAcceptWidget","opts","staticGrid","acceptWidgets","removable","droppable","gridPos","cellHeight","cellWidth","onDrag","event","helper","rec","getBoundingClientRect","left","top","ui","position","_temporaryRemoved","x","Math","max","round","y","autoPosition","engine","nodeBoundFix","willItFit","off","_willFitPos","Utils","copyPos","_onStartMoving","_dragOrResize","accept","canAccept","selector","matches","maxRow","n","w","h","minW","minH","on","_leave","box","getCellHeight","_readAttr","_isExternal","offsetWidth","offsetHeight","_gridstackNodeOrig","cleanupNode","wasAdded","placeholder","parentElement","origNode","oGrid","removedNodes","push","_triggerRemoveEvent","cloneNode","removePositioningStyles","_writeAttr","appendChild","_updateContainerHeight","addedNodes","_triggerAddEvent","_triggerChangeEvent","endUpdate","_gsEventHandler","type","window","setTimeout","_prepareDragDropByNode","removeNode","_setupRemoveDrop","trashEl","document","querySelector","isDroppable","removableOptions","setupDragIn","_dragIn","_dragInOptions","dragIn","dragInOptions","revert","handle","scroll","appendTo","dd","getElements","forEach","isDraggable","noMove","disableDrag","noResize","disableResize","onStartMoving","target","dragOrResize","onEndMoving","_moving","_lastTried","gridToNotify","_orig","_writePosAttr","addNode","_extraDragRow","start","stop","drag","resize","cleanNodes","beginUpdate","_lastUiPosition","_prevYPix","cacheRects","marginTop","marginRight","marginBottom","marginLeft","maxW","maxH","restoreInitial","resizing","p","mLeft","mRight","mTop","mBottom","mHeight","mWidth","min","distance","updateScrollPosition","prev","collide","row","getRow","extra","updateScrollResize","size","width","height","rect","moveNodeCheck","_skipDown","subGrid","onParentResize","movable","els","val","disable","enableMove","enableResize","_triggerEvent","enable","doEnable","nodes","pluginClass","ddi","registerPlugin","GridStackEngine","column","onChange","_float","float","batchMode","_prevFloat","saveInitial","_packNodes","_notify","nn","_hasLocked","opt","_sortNodes","nested","swap","area","_useEntireRowArea","skip","didMove","newOpt","pack","moved","locked","moveNode","skip2","find","isIntercepted","filter","o","collides","_rect","r0","r","r2","yOver","Number","MAX_VALUE","xOver","overMax","over","right","bottom","a","b","_doSwap","_dirty","touching","isTouching","t","length","batchUpdate","copyNodes","commit","dir","sort","_updating","newY","i","_id","_idSeq","defaults","isNaN","before","_inColumnResize","cacheOneLayout","samePos","verify","removeDOM","dirtyNodes","Array","isArray","concat","getDirtyNodes","some","triggerAddEvent","dup","prepareNode","_removeDOM","floor","_fixCollisions","triggerEvent","_layouts","changedPosConstrain","clonedNode","clone","map","canMove","c","content","prevPos","collideAll","needToMove","collideCoverage","reduce","saveElement","len","layout","list","wl","l","key","ratio","prevColumn","cacheLayout","newNodes","domOrder","cacheNodes","lastIndex","cacheNode","j","findIndex","splice","move","scale","clear","copy","index","prop","GridDefaults","minRow","itemClass","placeholderClass","placeholderText","handleClass","styleInHead","cellHeightThrottle","margin","auto","minWidth","animate","alwaysShowResizeHandle","autoHide","handles","rtl","marginUnit","cellHeightUnit","disableOneColumnMode","oneColumnModeDomSort","rowAttr","toNumber","getAttribute","cloneDeep","toBool","_styleSheetClass","random","toFixed","initMargin","_widthOrContainer","_prevColumn","style","direction","parentGridItemEl","closestByClass","_isNested","_isAutoCellHeight","_setStaticClass","cbNodes","_updateStyles","elements","getGridItems","parseInt","e","_prepareElement","setAnimation","_updateWindowResizeEvent","options","elOrString","getGridElement","gridstack","console","error","grids","getGridElements","parent","contains","doc","implementation","createHTMLDocument","body","innerHTML","class","children","init","load","_placeholder","placeholderChild","createElement","className","arguments","warn","id","addWidget","domAttr","_insertNotAppend","prepend","addGrid","saveContent","saveGridOpt","save","sub","removeInternalAndSame","addAndRemove","items","_ignoreLayoutsNodeChange","removed","removeWidget","item","update","forcePixel","marginDiff","data","parseHeight","unit","clientWidth","innerWidth","compact","domNodes","oldColumn","updateNodeWidths","from","setStatic","parentNode","removeChild","removeAll","_removeStylesheet","removeAttribute","useDocRelative","containerPos","documentElement","scrollTop","offsetTop","offsetLeft","relativeLeft","relativeTop","columnWidth","rowHeight","isAreaEmpty","getElement","name","callback","indexOf","split","noData","detail","addEventListener","log","removeEventListener","doAnimate","updateClass","m","keys","k","changed","ddChanged","value","layoutsNodesChange","CustomEvent","bubbles","Event","dispatchEvent","_styles","removeStylesheet","forceUpdate","prefix","styleLocation","createStylesheet","_max","addCSSRule","getHeight","rows","cssMinHeight","getComputedStyle","setAttribute","String","removeProperty","same","attrs","resizeHandles","hasOwnProperty","classes","oneColumn","changedOneColumn","_cellHeightThrottle","throttle","forceRemove","workTodo","_windowResizeBind","bind","margins","Engine","_disabled","_eventRegister","eventName","disabled","DDDraggable","DDBaseImplement","option","super","dragging","containmentRect","offset","substring","dragEl","_dragStart","_drag","_dragEnd","forDestroy","destroy","Object","DDManager","dragElement","_createHelper","_setupHelperContainmentStyle","dragOffset","_getDragOffset","helperContainment","ev","DDUtils","initEvent","_setupDragFollowNodeNotifyStart","_dragFollow","dragFollowTimer","_cancelDragGhost","_setupHelperStyle","dragEventListenerOption","preventDefault","clearTimeout","paintTimer","cancelAnimationFrame","parentOriginStylePosition","_removeHelperStyle","dragElementOriginStyle","originStyleProp","pointerEvents","willChange","transition","basePosition","zIndex","requestAnimationFrame","clientX","clientY","match","img","dataTransfer","setDragImage","stopPropagation","xformOffsetX","xformOffsetY","testEl","addElStyles","opacity","testElPosition","targetOffset","DDDroppable","_dragEnter","_dragOver","_dragLeave","_drop","_setupAccept","moving","_removeLeaveCallbacks","_canDrop","_ui","relatedTarget","out","drop","DDElement","ddElement","ddDraggable","ddDroppable","ddResizable","updateOption","DDResizable","DDResizableHandle","host","_mouseDown","_mouseMove","_mouseUp","_init","userSelect","mouseDownEvent","s","abs","_showHandlers","_hideHandlers","newRect","originalRect","scrolled","temporalRect","_setupAutoHide","_setupHandlers","_removeHandlers","updateHandles","updateAutoHide","handlerDirection","handlers","trim","_resizeStart","_resizeStop","_resizing","scrollEl","getScrollElement","scrollY","startEvent","_setupHelper","_applyChange","_getChange","_cleanHelper","elOriginStyleVal","_originStyleProp","oEvent","offsetX","offsetY","constrain","_constrainSize","oWidth","oHeight","maxWidth","MAX_SAFE_INTEGER","maxHeight","minHeight","containmentEl","test","styles","info","evt","obj","button","which","buttons","cancelable","isEventSupportPassiveOption","supportsPassive","passiveTest","GridStackDDNative","_getDDElements","dEl","cleanResizable","setupResizable","cleanDraggable","setupDraggable","containment","dragOut","_accept","cleanDroppable","setupDroppable","create","hosts","d","f","oldName","newName","rev","wrapper","args","apply","oldAttr","querySelectorAll","getElementById","col","styleSheet","cssText","createTextNode","insertBefore","firstChild","getElementsByTagName","sheet","rules","addRule","insertRule","v","toLowerCase","Boolean","Error","parseFloat","sources","source","minMax","func","delay","isWaiting","scrollingElement","overflow","overflowY","innerHeightOrClientHeight","innerHeight","clientHeight","offsetDiffDown","offsetDiffUp","prevScroll","pointerPosY","scrollBy","behavior","ret","skipFields","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"mappings":"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","file":"gridstack-h5.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GridStack\"] = factory();\n\telse\n\t\troot[\"GridStack\"] = factory();\n})(self, function() {\nreturn ","/**\r\n * gridstack-dd.ts 4.4.1\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { GridStackDDI } from './gridstack-ddi';\r\nimport { GridItemHTMLElement, GridStackNode, GridStackElement, DDUIData, DDDragInOpt, GridStackPosition } from './types';\r\nimport { GridStack, MousePosition } from './gridstack';\r\nimport { Utils } from './utils';\r\n\r\n/** Drag&Drop drop options */\r\nexport type DDDropOpt = {\r\n  /** function or class type that this grid will accept as dropped items (see GridStackOptions.acceptWidgets) */\r\n  accept?: (el: GridItemHTMLElement) => boolean;\r\n}\r\n\r\n/** drag&drop options currently called from the main code, but others can be passed in grid options */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type DDOpts = 'enable' | 'disable' | 'destroy' | 'option' | string | any;\r\nexport type DDKey = 'minWidth' | 'minHeight' | 'maxWidth' | 'maxHeight';\r\nexport type DDValue = number | string;\r\n\r\n/** drag&drop events callbacks */\r\nexport type DDCallback = (event: Event, arg2: GridItemHTMLElement, helper?: GridItemHTMLElement) => void;\r\n\r\n/**\r\n * Base class implementing common Grid drag'n'drop functionality, with domain specific subclass (h5 vs jq subclasses)\r\n */\r\nexport abstract class GridStackDD extends GridStackDDI {\r\n\r\n  /** override to cast to correct type */\r\n  static get(): GridStackDD {\r\n    return GridStackDDI.get() as GridStackDD;\r\n  }\r\n\r\n  /** removes any drag&drop present (called during destroy) */\r\n  public remove(el: GridItemHTMLElement): GridStackDD {\r\n    this.draggable(el, 'destroy').resizable(el, 'destroy');\r\n    if (el.gridstackNode) {\r\n      delete el.gridstackNode._initDD; // reset our DD init flag\r\n    }\r\n    return this;\r\n  }\r\n\r\n  // APIs that must be implemented by subclasses to do actual darg/drop/resize called by GridStack code below\r\n\r\n  public abstract resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDD;\r\n\r\n  public abstract isResizable(el: HTMLElement): boolean;\r\n\r\n  public abstract draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDD;\r\n\r\n  public abstract dragIn(el: GridStackElement, opts: DDDragInOpt): GridStackDD;\r\n\r\n  public abstract isDraggable(el: HTMLElement): boolean;\r\n\r\n  public abstract droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): GridStackDD;\r\n\r\n  public abstract isDroppable(el: HTMLElement): boolean;\r\n\r\n  public abstract on(el: GridItemHTMLElement, eventName: string, callback: DDCallback): GridStackDD;\r\n\r\n  public abstract off(el: GridItemHTMLElement, eventName: string): GridStackDD;\r\n}\r\n\r\n/********************************************************************************\r\n * GridStack code that is doing drag&drop extracted here so main class is smaller\r\n * for static grid that don't do any of this work anyway. Saves about 10k.\r\n * TODO: no code hint in code below as this is <any> so look at alternatives ?\r\n * https://www.typescriptlang.org/docs/handbook/declaration-merging.html\r\n * https://www.typescriptlang.org/docs/handbook/mixins.html\r\n ********************************************************************************/\r\n\r\n/** @internal called to add drag over to support widgets being added externally */\r\nGridStack.prototype._setupAcceptWidget = function(this: GridStack): GridStack {\r\n\r\n  // check if we need to disable things\r\n  if (this.opts.staticGrid || (!this.opts.acceptWidgets && !this.opts.removable)) {\r\n    GridStackDD.get().droppable(this.el, 'destroy');\r\n    return this;\r\n  }\r\n\r\n  // vars shared across all methods\r\n  let gridPos: MousePosition;\r\n  let cellHeight: number, cellWidth: number;\r\n\r\n  let onDrag = (event: DragEvent, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n\r\n    helper = helper || el;\r\n    let rec = helper.getBoundingClientRect();\r\n    let left = rec.left - gridPos.left;\r\n    let top = rec.top - gridPos.top;\r\n    let ui: DDUIData = {position: {top, left}};\r\n\r\n    if (node._temporaryRemoved) {\r\n      node.x = Math.max(0, Math.round(left / cellWidth));\r\n      node.y = Math.max(0, Math.round(top / cellHeight));\r\n      delete node.autoPosition;\r\n      this.engine.nodeBoundFix(node);\r\n\r\n      // don't accept *initial* location if doesn't fit #1419 (locked drop region, or can't grow), but maybe try if it will go somewhere\r\n      if (!this.engine.willItFit(node)) {\r\n        node.autoPosition = true; // ignore x,y and try for any slot...\r\n        if (!this.engine.willItFit(node)) {\r\n          GridStackDD.get().off(el, 'drag'); // stop calling us\r\n          return; // full grid or can't grow\r\n        }\r\n        if (node._willFitPos) {\r\n          // use the auto position instead #1687\r\n          Utils.copyPos(node, node._willFitPos);\r\n          delete node._willFitPos;\r\n        }\r\n      }\r\n\r\n      // re-use the existing node dragging method\r\n      this._onStartMoving(helper, event, ui, node, cellWidth, cellHeight);\r\n    } else {\r\n      // re-use the existing node dragging that does so much of the collision detection\r\n      this._dragOrResize(helper, event, ui, node, cellWidth, cellHeight);\r\n    }\r\n  }\r\n\r\n  GridStackDD.get()\r\n    .droppable(this.el, {\r\n      accept: (el: GridItemHTMLElement) => {\r\n        let node: GridStackNode = el.gridstackNode;\r\n        // set accept drop to true on ourself (which we ignore) so we don't get \"can't drop\" icon in HTML5 mode while moving\r\n        if (node?.grid === this) return true;\r\n        if (!this.opts.acceptWidgets) return false;\r\n        // check for accept method or class matching\r\n        let canAccept = true;\r\n        if (typeof this.opts.acceptWidgets === 'function') {\r\n          canAccept = this.opts.acceptWidgets(el);\r\n        } else {\r\n          let selector = (this.opts.acceptWidgets === true ? '.grid-stack-item' : this.opts.acceptWidgets as string);\r\n          canAccept = el.matches(selector);\r\n        }\r\n        // finally check to make sure we actually have space left #1571\r\n        if (canAccept && node && this.opts.maxRow) {\r\n          let n = {w: node.w, h: node.h, minW: node.minW, minH: node.minH}; // only width/height matters and autoPosition\r\n          canAccept = this.engine.willItFit(n);\r\n        }\r\n        return canAccept;\r\n      }\r\n    })\r\n    /**\r\n     * entering our grid area\r\n     */\r\n    .on(this.el, 'dropover', (event: Event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      // ignore drop enter on ourself (unless we temporarily removed) which happens on a simple drag of our item\r\n      if (node?.grid === this && !node._temporaryRemoved) {\r\n        // delete node._added; // reset this to track placeholder again in case we were over other grid #1484 (dropout doesn't always clear)\r\n        return false; // prevent parent from receiving msg (which may be a grid as well)\r\n      }\r\n\r\n      // fix #1578 when dragging fast, we may not get a leave on the previous grid so force one now\r\n      if (node?.grid && node.grid !== this && !node._temporaryRemoved) {\r\n        // TEST console.log('dropover without leave');\r\n        let otherGrid = node.grid;\r\n        otherGrid._leave(el, helper);\r\n      }\r\n\r\n      // get grid screen coordinates and cell dimensions\r\n      let box = this.el.getBoundingClientRect();\r\n      gridPos = {top: box.top, left: box.left};\r\n      cellWidth = this.cellWidth();\r\n      cellHeight = this.getCellHeight(true);\r\n\r\n      // load any element attributes if we don't have a node\r\n      if (!node) {// @ts-ignore\r\n        node = this._readAttr(el);\r\n      }\r\n      if (!node.grid) {\r\n        node._isExternal = true;\r\n        el.gridstackNode = node;\r\n      }\r\n\r\n      // calculate the grid size based on element outer size\r\n      helper = helper || el;\r\n      let w = node.w || Math.round(helper.offsetWidth / cellWidth) || 1;\r\n      let h = node.h || Math.round(helper.offsetHeight / cellHeight) || 1;\r\n\r\n      // if the item came from another grid, make a copy and save the original info in case we go back there\r\n      if (node.grid && node.grid !== this) {\r\n        // copy the node original values (min/max/id/etc...) but override width/height/other flags which are this grid specific\r\n        // TEST console.log('dropover cloning node');\r\n        if (!el._gridstackNodeOrig) el._gridstackNodeOrig = node; // shouldn't have multiple nested!\r\n        el.gridstackNode = node = {...node, w, h, grid: this};\r\n        this.engine.cleanupNode(node)\r\n          .nodeBoundFix(node);\r\n        // restore some internal fields we need after clearing them all\r\n        node._initDD =\r\n        node._isExternal =  // DOM needs to be re-parented on a drop\r\n        node._temporaryRemoved = true; // so it can be inserted onDrag below\r\n      } else {\r\n        node.w = w; node.h = h;\r\n        node._temporaryRemoved = true; // so we can insert it\r\n      }\r\n\r\n      // clear any marked for complete removal (Note: don't check _isAboutToRemove as that is cleared above - just do it)\r\n      _itemRemoving(node.el, false);\r\n\r\n      GridStackDD.get().on(el, 'drag', onDrag);\r\n      // make sure this is called at least once when going fast #1578\r\n      onDrag(event as DragEvent, el, helper);\r\n      return false; // prevent parent from receiving msg (which may be a grid as well)\r\n    })\r\n    /**\r\n     * Leaving our grid area...\r\n     */\r\n    .on(this.el, 'dropout', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      if (!node) return false;\r\n      // fix #1578 when dragging fast, we might get leave after other grid gets enter (which calls us to clean)\r\n      // so skip this one if we're not the active grid really..\r\n      if (!node.grid || node.grid === this) {\r\n        this._leave(el, helper);\r\n      }\r\n      return false; // prevent parent from receiving msg (which may be grid as well)\r\n    })\r\n    /**\r\n     * end - releasing the mouse\r\n     */\r\n    .on(this.el, 'drop', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      // ignore drop on ourself from ourself that didn't come from the outside - dragend will handle the simple move instead\r\n      if (node?.grid === this && !node._isExternal) return false;\r\n\r\n      let wasAdded = !!this.placeholder.parentElement; // skip items not actually added to us because of constrains, but do cleanup #1419\r\n      this.placeholder.remove();\r\n\r\n      // notify previous grid of removal\r\n      // TEST console.log('drop delete _gridstackNodeOrig')\r\n      let origNode = el._gridstackNodeOrig;\r\n      delete el._gridstackNodeOrig;\r\n      if (wasAdded && origNode && origNode.grid && origNode.grid !== this) {\r\n        let oGrid = origNode.grid;\r\n        oGrid.engine.removedNodes.push(origNode);\r\n        oGrid._triggerRemoveEvent();\r\n      }\r\n\r\n      if (!node) return false;\r\n\r\n      // use existing placeholder node as it's already in our list with drop location\r\n      if (wasAdded) {\r\n        this.engine.cleanupNode(node); // removes all internal _xyz values\r\n        node.grid = this;\r\n      }\r\n      GridStackDD.get().off(el, 'drag');\r\n      // if we made a copy ('helper' which is temp) of the original node then insert a copy, else we move the original node (#1102)\r\n      // as the helper will be nuked by jquery-ui otherwise\r\n      if (helper !== el) {\r\n        helper.remove();\r\n        el.gridstackNode = origNode; // original item (left behind) is re-stored to pre dragging as the node now has drop info\r\n        if (wasAdded) {\r\n          el = el.cloneNode(true) as GridItemHTMLElement;\r\n        }\r\n      } else {\r\n        el.remove(); // reduce flicker as we change depth here, and size further down\r\n        GridStackDD.get().remove(el);\r\n      }\r\n      if (!wasAdded) return false;\r\n      el.gridstackNode = node;\r\n      node.el = el;\r\n      // @ts-ignore\r\n      Utils.copyPos(node, this._readAttr(this.placeholder)); // placeholder values as moving VERY fast can throw things off #1578\r\n      Utils.removePositioningStyles(el);// @ts-ignore\r\n      this._writeAttr(el, node);\r\n      this.el.appendChild(el);// @ts-ignore\r\n      this._updateContainerHeight();\r\n      this.engine.addedNodes.push(node);// @ts-ignore\r\n      this._triggerAddEvent();// @ts-ignore\r\n      this._triggerChangeEvent();\r\n\r\n      this.engine.endUpdate();\r\n      if (this._gsEventHandler['dropped']) {\r\n        this._gsEventHandler['dropped']({...event, type: 'dropped'}, origNode && origNode.grid ? origNode : undefined, node);\r\n      }\r\n\r\n      // wait till we return out of the drag callback to set the new drag&resize handler or they may get messed up\r\n      window.setTimeout(() => {\r\n        // IFF we are still there (some application will use as placeholder and insert their real widget instead and better call makeWidget())\r\n        if (node.el && node.el.parentElement) {\r\n          this._prepareDragDropByNode(node);\r\n        } else {\r\n          this.engine.removeNode(node);\r\n        }\r\n      });\r\n\r\n      return false; // prevent parent from receiving msg (which may be grid as well)\r\n    });\r\n  return this;\r\n}\r\n\r\n/** @internal mark item for removal */\r\nfunction _itemRemoving(el: GridItemHTMLElement, remove: boolean) {\r\n  let node = el ? el.gridstackNode : undefined;\r\n  if (!node || !node.grid) return;\r\n  remove ? node._isAboutToRemove = true : delete node._isAboutToRemove;\r\n  remove ? el.classList.add('grid-stack-item-removing') : el.classList.remove('grid-stack-item-removing');\r\n}\r\n\r\n/** @internal called to setup a trash drop zone if the user specifies it */\r\nGridStack.prototype._setupRemoveDrop = function(this: GridStack): GridStack {\r\n  if (!this.opts.staticGrid && typeof this.opts.removable === 'string') {\r\n    let trashEl = document.querySelector(this.opts.removable) as HTMLElement;\r\n    if (!trashEl) return this;\r\n    // only register ONE drop-over/dropout callback for the 'trash', and it will\r\n    // update the passed in item and parent grid because the 'trash' is a shared resource anyway,\r\n    // and Native DD only has 1 event CB (having a list and technically a per grid removableOptions complicates things greatly)\r\n    if (!GridStackDD.get().isDroppable(trashEl)) {\r\n      GridStackDD.get().droppable(trashEl, this.opts.removableOptions)\r\n        .on(trashEl, 'dropover', (event, el) => _itemRemoving(el, true))\r\n        .on(trashEl, 'dropout',  (event, el) => _itemRemoving(el, false));\r\n    }\r\n  }\r\n  return this;\r\n}\r\n\r\n/**\r\n * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n * Called during GridStack.init() as options, but can also be called directly (last param are cached) in case the toolbar\r\n * is dynamically create and needs to change later.\r\n **/\r\nGridStack.setupDragIn = function(this: GridStack, _dragIn?: string, _dragInOptions?: DDDragInOpt) {\r\n  let dragIn: string;\r\n  let dragInOptions: DDDragInOpt;\r\n  const dragInDefaultOptions: DDDragInOpt = {\r\n    revert: 'invalid',\r\n    handle: '.grid-stack-item-content',\r\n    scroll: false,\r\n    appendTo: 'body'\r\n  };\r\n\r\n  // cache in the passed in values (form grid init?) so they don't have to resend them each time\r\n  if (_dragIn) {\r\n    dragIn = _dragIn;\r\n    dragInOptions = {...dragInDefaultOptions, ...(_dragInOptions || {})};\r\n  }\r\n  if (typeof dragIn !== 'string') return;\r\n  let dd = GridStackDD.get();\r\n  Utils.getElements(dragIn).forEach(el => {\r\n    if (!dd.isDraggable(el)) dd.dragIn(el, dragInOptions);\r\n  });\r\n}\r\n\r\n/** @internal prepares the element for drag&drop **/\r\nGridStack.prototype._prepareDragDropByNode = function(this: GridStack, node: GridStackNode): GridStack {\r\n  let el = node.el;\r\n  let dd = GridStackDD.get();\r\n\r\n  // check for disabled grid first\r\n  if (this.opts.staticGrid || ((node.noMove || this.opts.disableDrag) && (node.noResize || this.opts.disableResize))) {\r\n    if (node._initDD) {\r\n      dd.remove(el); // nukes everything instead of just disable, will add some styles back next\r\n      delete node._initDD;\r\n    }\r\n    el.classList.add('ui-draggable-disabled', 'ui-resizable-disabled'); // add styles one might depend on #1435\r\n    return this;\r\n  }\r\n\r\n  if (!node._initDD) {\r\n    // variables used/cashed between the 3 start/move/end methods, in addition to node passed above\r\n    let cellWidth: number;\r\n    let cellHeight: number;\r\n\r\n    /** called when item starts moving/resizing */\r\n    let onStartMoving = (event: Event, ui: DDUIData) => {\r\n      // trigger any 'dragstart' / 'resizestart' manually\r\n      if (this._gsEventHandler[event.type]) {\r\n        this._gsEventHandler[event.type](event, event.target);\r\n      }\r\n      cellWidth = this.cellWidth();\r\n      cellHeight = this.getCellHeight(true); // force pixels for calculations\r\n\r\n      this._onStartMoving(el, event, ui, node, cellWidth, cellHeight);\r\n    }\r\n\r\n    /** called when item is being dragged/resized */\r\n    let dragOrResize = (event: Event, ui: DDUIData) => {\r\n      this._dragOrResize(el, event, ui, node, cellWidth, cellHeight);\r\n    }\r\n\r\n    /** called when the item stops moving/resizing */\r\n    let onEndMoving = (event: Event) => {\r\n      this.placeholder.remove();\r\n      delete node._moving;\r\n      delete node._lastTried;\r\n\r\n      // if the item has moved to another grid, we're done here\r\n      let target: GridItemHTMLElement = event.target as GridItemHTMLElement;\r\n      if (!target.gridstackNode || target.gridstackNode.grid !== this) return;\r\n\r\n      node.el = target;\r\n\r\n      if (node._isAboutToRemove) {\r\n        let gridToNotify = el.gridstackNode.grid;\r\n        if (gridToNotify._gsEventHandler[event.type]) {\r\n          gridToNotify._gsEventHandler[event.type](event, target);\r\n        }\r\n        dd.remove(el);\r\n        gridToNotify.engine.removedNodes.push(node);\r\n        gridToNotify._triggerRemoveEvent();\r\n        // break circular links and remove DOM\r\n        delete el.gridstackNode;\r\n        delete node.el;\r\n        el.remove();\r\n      } else {\r\n        if (!node._temporaryRemoved) {\r\n          // move to new placeholder location\r\n          Utils.removePositioningStyles(target);// @ts-ignore\r\n          this._writePosAttr(target, node);\r\n        } else {\r\n          // got removed - restore item back to before dragging position\r\n          Utils.removePositioningStyles(target);\r\n          Utils.copyPos(node, node._orig);// @ts-ignore\r\n          this._writePosAttr(target, node);\r\n          this.engine.addNode(node);\r\n        }\r\n        if (this._gsEventHandler[event.type]) {\r\n          this._gsEventHandler[event.type](event, target);\r\n        }\r\n      }\r\n      // @ts-ignore\r\n      this._extraDragRow = 0;// @ts-ignore\r\n      this._updateContainerHeight();// @ts-ignore\r\n      this._triggerChangeEvent();\r\n\r\n      this.engine.endUpdate();\r\n    }\r\n\r\n    dd.draggable(el, {\r\n      start: onStartMoving,\r\n      stop: onEndMoving,\r\n      drag: dragOrResize\r\n    }).resizable(el, {\r\n      start: onStartMoving,\r\n      stop: onEndMoving,\r\n      resize: dragOrResize\r\n    });\r\n    node._initDD = true; // we've set DD support now\r\n  }\r\n\r\n  // finally fine tune move vs resize by disabling any part...\r\n  if (node.noMove || this.opts.disableDrag) {\r\n    dd.draggable(el, 'disable');\r\n    el.classList.add('ui-draggable-disabled');\r\n  } else {\r\n    dd.draggable(el, 'enable');\r\n    el.classList.remove('ui-draggable-disabled');\r\n  }\r\n  if (node.noResize || this.opts.disableResize) {\r\n    dd.resizable(el, 'disable');\r\n    el.classList.add('ui-resizable-disabled');\r\n  } else {\r\n    dd.resizable(el, 'enable');\r\n    el.classList.remove('ui-resizable-disabled');\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n/** @internal called when item is starting a drag/resize */\r\nGridStack.prototype._onStartMoving = function(this: GridStack, el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number) {\r\n  this.engine.cleanNodes()\r\n    .beginUpdate(node);\r\n  // @ts-ignore\r\n  this._writePosAttr(this.placeholder, node)\r\n  this.el.appendChild(this.placeholder);\r\n  // TEST console.log('_onStartMoving placeholder')\r\n\r\n  node.el = this.placeholder;\r\n  node._lastUiPosition = ui.position;\r\n  node._prevYPix = ui.position.top;\r\n  node._moving = (event.type === 'dragstart'); // 'dropover' are not initially moving so they can go exactly where they enter (will push stuff out of the way)\r\n  delete node._lastTried;\r\n\r\n  if (event.type === 'dropover' && node._temporaryRemoved) {\r\n    // TEST console.log('engine.addNode x=' + node.x);\r\n    this.engine.addNode(node); // will add, fix collisions, update attr and clear _temporaryRemoved\r\n    node._moving = true; // AFTER, mark as moving object (wanted fix location before)\r\n  }\r\n\r\n  // set the min/max resize info\r\n  this.engine.cacheRects(cellWidth, cellHeight, this.opts.marginTop as number, this.opts.marginRight as number, this.opts.marginBottom as number, this.opts.marginLeft as number);\r\n  if (event.type === 'resizestart') {\r\n    let dd = GridStackDD.get()\r\n      .resizable(el, 'option', 'minWidth', cellWidth * (node.minW || 1))\r\n      .resizable(el, 'option', 'minHeight', cellHeight * (node.minH || 1));\r\n    if (node.maxW) { dd.resizable(el, 'option', 'maxWidth', cellWidth * node.maxW); }\r\n    if (node.maxH) { dd.resizable(el, 'option', 'maxHeight', cellHeight * node.maxH); }\r\n  }\r\n}\r\n\r\n/** @internal called when item leaving our area by either cursor dropout event\r\n * or shape is outside our boundaries. remove it from us, and mark temporary if this was\r\n * our item to start with else restore prev node values from prev grid it came from.\r\n **/\r\nGridStack.prototype._leave = function(this: GridStack, el: GridItemHTMLElement, helper?: GridItemHTMLElement)  {\r\n  let node = el.gridstackNode;\r\n  if (!node) return;\r\n\r\n  GridStackDD.get().off(el, 'drag'); // no need to track while being outside\r\n\r\n  // this gets called when cursor leaves and shape is outside, so only do this once\r\n  if (node._temporaryRemoved) return;\r\n  node._temporaryRemoved = true;\r\n\r\n  this.engine.removeNode(node); // remove placeholder as well, otherwise it's a sign node is not in our list, which is a bigger issue\r\n  node.el = node._isExternal && helper ? helper : el; // point back to real item being dragged\r\n\r\n  if (this.opts.removable === true) { // boolean vs a class string\r\n    // item leaving us and we are supposed to remove on leave (no need to drag onto trash) mark it so\r\n    _itemRemoving(el, true);\r\n  }\r\n\r\n  // finally if item originally came from another grid, but left us, restore things back to prev info\r\n  if (el._gridstackNodeOrig) {\r\n    // TEST console.log('leave delete _gridstackNodeOrig')\r\n    el.gridstackNode = el._gridstackNodeOrig;\r\n    delete el._gridstackNodeOrig;\r\n  } else if (node._isExternal) {\r\n    // item came from outside (like a toolbar) so nuke any node info\r\n    delete node.el;\r\n    delete el.gridstackNode;\r\n    // and restore all nodes back to original\r\n    this.engine.restoreInitial();\r\n  }\r\n}\r\n\r\n/** @internal called when item is being dragged/resized */\r\nGridStack.prototype._dragOrResize = function(this: GridStack, el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number)  {\r\n  let p = {...node._orig}; // could be undefined (_isExternal) which is ok (drag only set x,y and w,h will default to node value)\r\n  let resizing: boolean;\r\n  let mLeft = this.opts.marginLeft as number,\r\n    mRight = this.opts.marginRight as number,\r\n    mTop = this.opts.marginTop as number,\r\n    mBottom = this.opts.marginBottom as number;\r\n\r\n  // if margins (which are used to pass mid point by) are large relative to cell height/width, reduce them down #1855\r\n  let mHeight = Math.round(cellHeight * 0.1),\r\n    mWidth = Math.round(cellWidth * 0.1);\r\n  mLeft = Math.min(mLeft, mWidth);\r\n  mRight = Math.min(mRight, mWidth);\r\n  mTop = Math.min(mTop, mHeight);\r\n  mBottom = Math.min(mBottom, mHeight);\r\n\r\n  if (event.type === 'drag') {\r\n    if (node._temporaryRemoved) return; // handled by dropover\r\n    let distance = ui.position.top - node._prevYPix;\r\n    node._prevYPix = ui.position.top;\r\n    Utils.updateScrollPosition(el, ui.position, distance);\r\n\r\n    // get new position taking into account the margin in the direction we are moving! (need to pass mid point by margin)\r\n    let left = ui.position.left + (ui.position.left > node._lastUiPosition.left  ? -mRight : mLeft);\r\n    let top = ui.position.top + (ui.position.top > node._lastUiPosition.top  ? -mBottom : mTop);\r\n    p.x = Math.round(left / cellWidth);\r\n    p.y = Math.round(top / cellHeight);\r\n\r\n    // @ts-ignore// if we're at the bottom hitting something else, grow the grid so cursor doesn't leave when trying to place below others\r\n    let prev = this._extraDragRow;\r\n    if (this.engine.collide(node, p)) {\r\n      let row = this.getRow();\r\n      let extra = Math.max(0, (p.y + node.h) - row);\r\n      if (this.opts.maxRow && row + extra > this.opts.maxRow) {\r\n        extra = Math.max(0, this.opts.maxRow - row);\r\n      }// @ts-ignore\r\n      this._extraDragRow = extra;// @ts-ignore\r\n    } else this._extraDragRow = 0;// @ts-ignore\r\n    if (this._extraDragRow !== prev) this._updateContainerHeight();\r\n\r\n    if (node.x === p.x && node.y === p.y) return; // skip same\r\n    // DON'T skip one we tried as we might have failed because of coverage <50% before\r\n    // if (node._lastTried && node._lastTried.x === x && node._lastTried.y === y) return;\r\n  } else if (event.type === 'resize')  {\r\n    if (p.x < 0) return;\r\n    // Scrolling page if needed\r\n    Utils.updateScrollResize(event as MouseEvent, el, cellHeight);\r\n\r\n    // get new size\r\n    p.w = Math.round((ui.size.width - mLeft) / cellWidth);\r\n    p.h = Math.round((ui.size.height - mTop) / cellHeight);\r\n    if (node.w === p.w && node.h === p.h) return;\r\n    if (node._lastTried && node._lastTried.w === p.w && node._lastTried.h === p.h) return; // skip one we tried (but failed)\r\n\r\n    // if we size on left/top side this might move us, so get possible new position as well\r\n    let left = ui.position.left + mLeft;\r\n    let top = ui.position.top + mTop;\r\n    p.x = Math.round(left / cellWidth);\r\n    p.y = Math.round(top / cellHeight);\r\n\r\n    resizing = true;\r\n  }\r\n\r\n  node._lastTried = p; // set as last tried (will nuke if we go there)\r\n  let rect: GridStackPosition = { // screen pix of the dragged box\r\n    x: ui.position.left + mLeft,\r\n    y: ui.position.top + mTop,\r\n    w: (ui.size ? ui.size.width : node.w * cellWidth) - mLeft - mRight,\r\n    h: (ui.size ? ui.size.height : node.h * cellHeight) - mTop - mBottom\r\n  };\r\n  if (this.engine.moveNodeCheck(node, {...p, cellWidth, cellHeight, rect, resizing})) {\r\n    node._lastUiPosition = ui.position;\r\n    this.engine.cacheRects(cellWidth, cellHeight, mTop, mRight, mBottom, mLeft);\r\n    delete node._skipDown;\r\n    if (resizing && node.subGrid) { (node.subGrid as GridStack).onParentResize(); }// @ts-ignore\r\n    this._extraDragRow = 0;// @ts-ignore\r\n    this._updateContainerHeight();\r\n\r\n    let target = event.target as GridItemHTMLElement;// @ts-ignore\r\n    this._writePosAttr(target, node);\r\n    if (this._gsEventHandler[event.type]) {\r\n      this._gsEventHandler[event.type](event, target);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Enables/Disables moving.\r\n * @param els widget or selector to modify.\r\n * @param val if true widget will be draggable.\r\n */\r\nGridStack.prototype.movable = function(this: GridStack, els: GridStackElement, val: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't move a static grid!\r\n  GridStack.getElements(els).forEach(el => {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n    if (val) delete node.noMove; else node.noMove = true;\r\n    this._prepareDragDropByNode(node); // init DD if need be, and adjust\r\n  });\r\n  return this;\r\n}\r\n\r\n/**\r\n * Enables/Disables resizing.\r\n * @param els  widget or selector to modify\r\n * @param val  if true widget will be resizable.\r\n */\r\nGridStack.prototype.resizable = function(this: GridStack, els: GridStackElement, val: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't resize a static grid!\r\n  GridStack.getElements(els).forEach(el => {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n    if (val) delete node.noResize; else node.noResize = true;\r\n    this._prepareDragDropByNode(node); // init DD if need be, and adjust\r\n  });\r\n  return this;\r\n}\r\n\r\n\r\n/**\r\n  * Temporarily disables widgets moving/resizing.\r\n  * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n  * Note: no-op for static grid\r\n  * This is a shortcut for:\r\n  * @example\r\n  *  grid.enableMove(false);\r\n  *  grid.enableResize(false);\r\n  */\r\nGridStack.prototype.disable = function(this: GridStack): GridStack {\r\n  if (this.opts.staticGrid) return;\r\n  this.enableMove(false);\r\n  this.enableResize(false);// @ts-ignore\r\n  this._triggerEvent('disable');\r\n  return this;\r\n}\r\n\r\n/**\r\n  * Re-enables widgets moving/resizing - see disable().\r\n  * Note: no-op for static grid.\r\n  * This is a shortcut for:\r\n  * @example\r\n  *  grid.enableMove(true);\r\n  *  grid.enableResize(true);\r\n  */\r\nGridStack.prototype.enable = function(this: GridStack): GridStack {\r\n  if (this.opts.staticGrid) return;\r\n  this.enableMove(true);\r\n  this.enableResize(true);// @ts-ignore\r\n  this._triggerEvent('enable');\r\n  return this;\r\n}\r\n\r\n/** Enables/disables widget moving. No-op for static grids. */\r\nGridStack.prototype.enableMove = function(this: GridStack, doEnable: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't move a static grid!\r\n  this.opts.disableDrag = !doEnable; // FIRST before we update children as grid overrides #1658\r\n  this.engine.nodes.forEach(n => this.movable(n.el, doEnable));\r\n  return this;\r\n}\r\n\r\n/** Enables/disables widget resizing. No-op for static grids. */\r\nGridStack.prototype.enableResize = function(this: GridStack, doEnable: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't size a static grid!\r\n  this.opts.disableResize = !doEnable; // FIRST before we update children as grid overrides #1658\r\n  this.engine.nodes.forEach(n => this.resizable(n.el, doEnable));\r\n  return this;\r\n}\r\n","/**\r\n * gridstack-ddi.ts 4.4.1\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridItemHTMLElement } from './types';\r\n\r\n/**\r\n * Abstract Partial Interface API for drag'n'drop plugin - look at GridStackDD and HTML5 / Jquery implementation versions\r\n */\r\nexport class GridStackDDI {\r\n\r\n  protected static ddi: GridStackDDI;\r\n\r\n  /** call this method to register your plugin instead of the default no-op one */\r\n  static registerPlugin(pluginClass: typeof GridStackDDI): GridStackDDI {\r\n    GridStackDDI.ddi = new pluginClass();\r\n    return GridStackDDI.ddi;\r\n  }\r\n\r\n  /** get the current registered plugin to use */\r\n  static get(): GridStackDDI {\r\n    return GridStackDDI.ddi || GridStackDDI.registerPlugin(GridStackDDI);\r\n  }\r\n\r\n  /** removes any drag&drop present (called during destroy) */\r\n  /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\r\n  public remove(el: GridItemHTMLElement): GridStackDDI {\r\n    return this; // no-op for static grids\r\n  }\r\n}\r\n","/**\n * gridstack-engine.ts 4.4.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { Utils } from './utils';\nimport { GridStackNode, ColumnOptions, GridStackPosition, GridStackMoveOpts } from './types';\n\nexport type onChangeCB = (nodes: GridStackNode[], removeDOM?: boolean) => void;\n/** options used for creations - similar to GridStackOptions */\nexport interface GridStackEngineOptions {\n  column?: number;\n  maxRow?: number;\n  float?: boolean;\n  nodes?: GridStackNode[];\n  onChange?: onChangeCB;\n}\n\n/**\n * Defines the GridStack engine that does most no DOM grid manipulation.\n * See GridStack methods and vars for descriptions.\n *\n * NOTE: values should not be modified directly - call the main GridStack API instead\n */\nexport class GridStackEngine {\n  public column: number;\n  public maxRow: number;\n  public nodes: GridStackNode[];\n  public onChange: onChangeCB;\n  public addedNodes: GridStackNode[] = [];\n  public removedNodes: GridStackNode[] = [];\n  public batchMode: boolean;\n  /** @internal */\n  private _float: boolean;\n  /** @internal */\n  private _prevFloat: boolean;\n  /** @internal cached layouts of difference column count so we can restore ack (eg 12 -> 1 -> 12) */\n  private _layouts?: Layout[][]; // maps column # to array of values nodes\n  /** @internal true while we are resizing widgets during column resize to skip certain parts */\n  private _inColumnResize: boolean;\n  /** @internal true if we have some items locked */\n  private _hasLocked: boolean;\n  /** @internal unique global internal _id counter NOT starting at 0 */\n  private static _idSeq = 1;\n\n  public constructor(opts: GridStackEngineOptions = {}) {\n    this.column = opts.column || 12;\n    this.onChange = opts.onChange;\n    this._float = opts.float;\n    this.maxRow = opts.maxRow;\n    this.nodes = opts.nodes || [];\n  }\n\n  public batchUpdate(): GridStackEngine {\n    if (this.batchMode) return this;\n    this.batchMode = true;\n    this._prevFloat = this._float;\n    this._float = true; // let things go anywhere for now... commit() will restore and possibly reposition\n    this.saveInitial(); // since begin update (which is called multiple times) won't do this\n    return this;\n  }\n\n  public commit(): GridStackEngine {\n    if (!this.batchMode) return this;\n    this.batchMode = false;\n    this._float = this._prevFloat;\n    delete this._prevFloat;\n    return this._packNodes()\n      ._notify();\n  }\n\n  // use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip\n  private _useEntireRowArea(node: GridStackNode, nn: GridStackPosition): boolean {\n    return !this.float && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);\n  }\n\n  /** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.\n   * return true if we moved. */\n  private _fixCollisions(node: GridStackNode, nn = node, collide?: GridStackNode, opt: GridStackMoveOpts = {}): boolean {\n    this._sortNodes(-1); // from last to first, so recursive collision move items in the right order\n\n    collide = collide || this.collide(node, nn); // REAL area collide for swap and skip if none...\n    if (!collide) return false;\n\n    // swap check: if we're actively moving in gravity mode, see if we collide with an object the same size\n    if (node._moving && !opt.nested && !this.float) {\n      if (this.swap(node, collide)) return true;\n    }\n\n    // during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)\n    let area = nn;\n    if (this._useEntireRowArea(node, nn)) {\n      area = {x: 0, w: this.column, y: nn.y, h: nn.h};\n      collide = this.collide(node, area, opt.skip); // force new hit\n    }\n\n    let didMove = false;\n    let newOpt: GridStackMoveOpts = {nested: true, pack: false};\n    while (collide = collide || this.collide(node, area, opt.skip)) { // could collide with more than 1 item... so repeat for each\n      let moved: boolean;\n      // if colliding with a locked item OR moving down with top gravity (and collide could move up) -> skip past the collide,\n      // but remember that skip down so we only do this once (and push others otherwise).\n      if (collide.locked || node._moving && !node._skipDown && nn.y > node.y && !this.float &&\n        // can take space we had, or before where we're going\n        (!this.collide(collide, {...collide, y: node.y}, node) || !this.collide(collide, {...collide, y: nn.y - collide.h}, node))) {\n        node._skipDown = (node._skipDown || nn.y > node.y);\n        moved = this.moveNode(node, {...nn, y: collide.y + collide.h, ...newOpt});\n        if (collide.locked && moved) {\n          Utils.copyPos(nn, node); // moving after lock become our new desired location\n        } else if (!collide.locked && moved && opt.pack) {\n          // we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way\n          this._packNodes();\n          nn.y = collide.y + collide.h;\n          Utils.copyPos(node, nn);\n        }\n        didMove = didMove || moved;\n      } else {\n        // move collide down *after* where we will be, ignoring where we are now (don't collide with us)\n        moved = this.moveNode(collide, {...collide, y: nn.y + nn.h, skip: node, ...newOpt});\n      }\n      if (!moved) { return didMove; } // break inf loop if we couldn't move after all (ex: maxRow, fixed)\n      collide = undefined;\n    }\n    return didMove;\n  }\n\n  /** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */\n  public collide(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode {\n    return this.nodes.find(n => n !== skip && n !== skip2 && Utils.isIntercepted(n, area));\n  }\n  public collideAll(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode[] {\n    return this.nodes.filter(n => n !== skip && n !== skip2 && Utils.isIntercepted(n, area));\n  }\n\n  /** does a pixel coverage collision, returning the node that has the most coverage that is >50% mid line */\n  public collideCoverage(node: GridStackNode, o: GridStackMoveOpts, collides: GridStackNode[]): GridStackNode {\n    if (!o.rect || !node._rect) return;\n    let r0 = node._rect; // where started\n    let r = {...o.rect}; // where we are\n\n    // update dragged rect to show where it's coming from (above or below, etc...)\n    if (r.y > r0.y) {\n      r.h += r.y - r0.y;\n      r.y = r0.y;\n    } else {\n      r.h += r0.y - r.y;\n    }\n    if (r.x > r0.x) {\n      r.w += r.x - r0.x;\n      r.x = r0.x;\n    } else {\n      r.w += r0.x - r.x;\n    }\n\n    let collide: GridStackNode;\n    collides.forEach(n => {\n      if (n.locked || !n._rect) return;\n      let r2 = n._rect; // overlapping target\n      let yOver = Number.MAX_VALUE, xOver = Number.MAX_VALUE, overMax = 0.5; // need >50%\n      // depending on which side we started from, compute the overlap % of coverage\n      // (ex: from above/below we only compute the max horizontal line coverage)\n      if (r0.y < r2.y) { // from above\n        yOver = ((r.y + r.h) - r2.y) / r2.h;\n      } else if (r0.y+r0.h > r2.y+r2.h) { // from below\n        yOver = ((r2.y + r2.h) - r.y) / r2.h;\n      }\n      if (r0.x < r2.x) { // from the left\n        xOver = ((r.x + r.w) - r2.x) / r2.w;\n      } else if (r0.x+r0.w > r2.x+r2.w) { // from the right\n        xOver = ((r2.x + r2.w) - r.x) / r2.w;\n      }\n      let over = Math.min(xOver, yOver);\n      if (over > overMax) {\n        overMax = over;\n        collide = n;\n      }\n    });\n    return collide;\n  }\n\n  /** called to cache the nodes pixel rectangles used for collision detection during drag */\n  public cacheRects(w: number, h: number, top: number, right: number, bottom: number, left: number): GridStackEngine\n  {\n    this.nodes.forEach(n =>\n      n._rect = {\n        y: n.y * h + top,\n        x: n.x * w + left,\n        w: n.w * w - left - right,\n        h: n.h * h - top - bottom\n      }\n    );\n    return this;\n  }\n\n  /** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */\n  public swap(a: GridStackNode, b: GridStackNode): boolean {\n    if (!b || b.locked || !a || a.locked) return false;\n\n    function _doSwap(): true { // assumes a is before b IFF they have different height (put after rather than exact swap)\n      let x = b.x, y = b.y;\n      b.x = a.x; b.y = a.y; // b -> a position\n      if (a.h != b.h) {\n        a.x = x; a.y = b.y + b.h; // a -> goes after b\n      } else if (a.w != b.w) {\n        a.x = b.x + b.w; a.y = y; // a -> goes after b\n      } else {\n        a.x = x; a.y = y; // a -> old b position\n      }\n      a._dirty = b._dirty = true;\n      return true;\n    }\n    let touching: boolean; // remember if we called it (vs undefined)\n\n    // same size and same row or column, and touching\n    if (a.w === b.w && a.h === b.h && (a.x === b.x || a.y === b.y) && (touching = Utils.isTouching(a, b)))\n      return _doSwap();\n    if (touching === false) return; // IFF ran test and fail, bail out\n\n    // check for taking same columns (but different height) and touching\n    if (a.w === b.w && a.x === b.x && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.y < a.y) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    if (touching === false) return;\n\n    // check if taking same row (but different width) and touching\n    if (a.h === b.h && a.y === b.y && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.x < a.x) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    return false;\n  }\n\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\n    let nn: GridStackNode = {x: x || 0, y: y || 0, w: w || 1, h: h || 1};\n    return !this.collide(nn);\n  }\n\n  /** re-layout grid items to reclaim any empty space */\n  public compact(): GridStackEngine {\n    if (this.nodes.length === 0) return this;\n    this.batchUpdate()\n      ._sortNodes();\n    let copyNodes = this.nodes;\n    this.nodes = []; // pretend we have no nodes to conflict layout to start with...\n    copyNodes.forEach(node => {\n      if (!node.locked) {\n        node.autoPosition = true;\n      }\n      this.addNode(node, false); // 'false' for add event trigger\n      node._dirty = true; // will force attr update\n    });\n    return this.commit();\n  }\n\n  /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\n  public set float(val: boolean) {\n    if (this._float === val) return;\n    this._float = val || false;\n    if (!val) {\n      this._packNodes()._notify();\n    }\n  }\n\n  /** float getter method */\n  public get float(): boolean { return this._float || false; }\n\n  /** @internal */\n  private _sortNodes(dir?: -1 | 1): GridStackEngine {\n    this.nodes = Utils.sort(this.nodes, dir, this.column);\n    return this;\n  }\n\n  /** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */\n  private _packNodes(): GridStackEngine {\n    if (this.batchMode) { return this; }\n    this._sortNodes(); // first to last\n\n    if (this.float) {\n      // restore original Y pos\n      this.nodes.forEach(n => {\n        if (n._updating || n._orig === undefined || n.y === n._orig.y) return;\n        let newY = n.y;\n        while (newY > n._orig.y) {\n          --newY;\n          let collide = this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!collide) {\n            n._dirty = true;\n            n.y = newY;\n          }\n        }\n      });\n    } else {\n      // top gravity pack\n      this.nodes.forEach((n, i) => {\n        if (n.locked) return;\n        while (n.y > 0) {\n          let newY = i === 0 ? 0 : n.y - 1;\n          let canBeMoved = i === 0 || !this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!canBeMoved) break;\n          // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\n          // and move items back. The user 'change' CB should detect changes from the original\n          // starting position instead.\n          n._dirty = (n.y !== newY);\n          n.y = newY;\n        }\n      });\n    }\n    return this;\n  }\n\n  /**\n   * given a random node, makes sure it's coordinates/values are valid in the current grid\n   * @param node to adjust\n   * @param resizing if out of bound, resize down or move into the grid to fit ?\n   */\n  public prepareNode(node: GridStackNode, resizing?: boolean): GridStackNode {\n    node = node || {};\n    node._id = node._id || GridStackEngine._idSeq++;\n\n    // if we're missing position, have the grid position us automatically (before we set them to 0,0)\n    if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\n      node.autoPosition = true;\n    }\n\n    // assign defaults for missing required fields\n    let defaults: GridStackNode = { x: 0, y: 0, w: 1, h: 1};\n    Utils.defaults(node, defaults);\n\n    if (!node.autoPosition) { delete node.autoPosition; }\n    if (!node.noResize) { delete node.noResize; }\n    if (!node.noMove) { delete node.noMove; }\n\n    // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\n    if (typeof node.x == 'string')      { node.x = Number(node.x); }\n    if (typeof node.y == 'string')      { node.y = Number(node.y); }\n    if (typeof node.w == 'string')  { node.w = Number(node.w); }\n    if (typeof node.h == 'string') { node.h = Number(node.h); }\n    if (isNaN(node.x))      { node.x = defaults.x; node.autoPosition = true; }\n    if (isNaN(node.y))      { node.y = defaults.y; node.autoPosition = true; }\n    if (isNaN(node.w))  { node.w = defaults.w; }\n    if (isNaN(node.h)) { node.h = defaults.h; }\n\n    return this.nodeBoundFix(node, resizing);\n  }\n\n  /** part2 of preparing a node to fit inside our grid - checks  for x,y from grid dimensions */\n  public nodeBoundFix(node: GridStackNode, resizing?: boolean): GridStackNode {\n\n    let before = node._orig || Utils.copyPos({}, node);\n\n    if (node.maxW) { node.w = Math.min(node.w, node.maxW); }\n    if (node.maxH) { node.h = Math.min(node.h, node.maxH); }\n    if (node.minW && node.minW <= this.column) { node.w = Math.max(node.w, node.minW); }\n    if (node.minH) { node.h = Math.max(node.h, node.minH); }\n\n    if (node.w > this.column) {\n      // if user loaded a larger than allowed widget for current # of columns,\n      // remember it's full width so we can restore back (1 -> 12 column) #1655\n      // IFF we're not in the middle of column resizing!\n      if (this.column < 12 && !this._inColumnResize) {\n        node.w = Math.min(12, node.w);\n        this.cacheOneLayout(node, 12);\n      }\n      node.w = this.column;\n    } else if (node.w < 1) {\n      node.w = 1;\n    }\n\n    if (this.maxRow && node.h > this.maxRow) {\n      node.h = this.maxRow;\n    } else if (node.h < 1) {\n      node.h = 1;\n    }\n\n    if (node.x < 0) {\n      node.x = 0;\n    }\n    if (node.y < 0) {\n      node.y = 0;\n    }\n\n    if (node.x + node.w > this.column) {\n      if (resizing) {\n        node.w = this.column - node.x;\n      } else {\n        node.x = this.column - node.w;\n      }\n    }\n    if (this.maxRow && node.y + node.h > this.maxRow) {\n      if (resizing) {\n        node.h = this.maxRow - node.y;\n      } else {\n        node.y = this.maxRow - node.h;\n      }\n    }\n\n    if (!Utils.samePos(node, before)) {\n      node._dirty = true;\n    }\n\n    return node;\n  }\n\n  public getDirtyNodes(verify?: boolean): GridStackNode[] {\n    // compare original x,y,w,h instead as _dirty can be a temporary state\n    if (verify) {\n      return this.nodes.filter(n => n._dirty && !Utils.samePos(n, n._orig));\n    }\n    return this.nodes.filter(n => n._dirty);\n  }\n\n  /** @internal call this to call onChange CB with dirty nodes */\n  private _notify(nodes?: GridStackNode | GridStackNode[], removeDOM = true): GridStackEngine {\n    if (this.batchMode) return this;\n    nodes = (nodes === undefined ? [] : (Array.isArray(nodes) ? nodes : [nodes]) );\n    let dirtyNodes = nodes.concat(this.getDirtyNodes());\n    this.onChange && this.onChange(dirtyNodes, removeDOM);\n    return this;\n  }\n\n  /** @internal remove dirty and last tried info */\n  public cleanNodes(): GridStackEngine {\n    if (this.batchMode) return this;\n    this.nodes.forEach(n => {\n      delete n._dirty;\n      delete n._lastTried;\n    });\n    return this;\n  }\n\n  /** @internal called to save initial position/size to track real dirty state.\n   * Note: should be called right after we call change event (so next API is can detect changes)\n   * as well as right before we start move/resize/enter (so we can restore items to prev values) */\n  public saveInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      n._orig = Utils.copyPos({}, n);\n      delete n._dirty;\n    });\n    this._hasLocked = this.nodes.some(n => n.locked);\n    return this;\n  }\n\n  /** @internal restore all the nodes back to initial values (called when we leave) */\n  public restoreInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      if (Utils.samePos(n, n._orig)) return;\n      Utils.copyPos(n, n._orig);\n      n._dirty = true;\n    });\n    this._notify();\n    return this;\n  }\n\n  /** call to add the given node to our list, fixing collision and re-packing */\n  public addNode(node: GridStackNode, triggerAddEvent = false): GridStackNode {\n    let dup = this.nodes.find(n => n._id === node._id);\n    if (dup) return dup; // prevent inserting twice! return it instead.\n\n    // skip prepareNode if we're in middle of column resize (not new) but do check for bounds!\n    node = this._inColumnResize ? this.nodeBoundFix(node) : this.prepareNode(node);\n    delete node._temporaryRemoved;\n    delete node._removeDOM;\n\n    if (node.autoPosition) {\n      this._sortNodes();\n\n      for (let i = 0;; ++i) {\n        let x = i % this.column;\n        let y = Math.floor(i / this.column);\n        if (x + node.w > this.column) {\n          continue;\n        }\n        let box = {x, y, w: node.w, h: node.h};\n        if (!this.nodes.find(n => Utils.isIntercepted(box, n))) {\n          node.x = x;\n          node.y = y;\n          delete node.autoPosition; // found our slot\n          break;\n        }\n      }\n    }\n\n    this.nodes.push(node);\n    if (triggerAddEvent) { this.addedNodes.push(node); }\n\n    this._fixCollisions(node);\n    if (!this.batchMode) { this._packNodes()._notify(); }\n    return node;\n  }\n\n  public removeNode(node: GridStackNode, removeDOM = true, triggerEvent = false): GridStackEngine {\n    if (!this.nodes.find(n => n === node)) {\n      // TEST console.log(`Error: GridStackEngine.removeNode() node._id=${node._id} not found!`)\n      return this;\n    }\n    if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)\n      this.removedNodes.push(node);\n    }\n    if (removeDOM) node._removeDOM = true; // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\n    this.nodes = this.nodes.filter(n => n !== node);\n    return this._packNodes()\n      ._notify(node);\n  }\n\n  public removeAll(removeDOM = true): GridStackEngine {\n    delete this._layouts;\n    if (this.nodes.length === 0) return this;\n    removeDOM && this.nodes.forEach(n => n._removeDOM = true); // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    this.removedNodes = this.nodes;\n    this.nodes = [];\n    return this._notify(this.removedNodes);\n  }\n\n  /** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.\n   * In more complicated cases (maxRow) it will attempt at moving the item and fixing\n   * others in a clone first, then apply those changes if still within specs. */\n  public moveNodeCheck(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    // if (node.locked) return false;\n    if (!this.changedPosConstrain(node, o)) return false;\n    o.pack = true;\n\n    // simpler case: move item directly...\n    if (!this.maxRow/* && !this._hasLocked*/) {\n      return this.moveNode(node, o);\n    }\n\n    // complex case: create a clone with NO maxRow (will check for out of bounds at the end)\n    let clonedNode: GridStackNode;\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {\n        if (n === node) {\n          clonedNode = {...n};\n          return clonedNode;\n        }\n        return {...n};\n      })\n    });\n    if (!clonedNode) return false;\n\n    let canMove = clone.moveNode(clonedNode, o);\n    // if maxRow make sure we are still valid size\n    if (this.maxRow && canMove) {\n      canMove = (clone.getRow() <= this.maxRow);\n      // turns out we can't grow, then see if we can swap instead (ex: full grid) if we're not resizing\n      if (!canMove && !o.resizing) {\n        let collide = this.collide(node, o);\n        if (collide && this.swap(node, collide)) {\n          this._notify();\n          return true;\n        }\n      }\n    }\n    if (!canMove) return false;\n\n    // if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!\n    // Note: we can't use the list directly as elements and other parts point to actual node, so copy content\n    clone.nodes.filter(n => n._dirty).forEach(c => {\n      let n = this.nodes.find(a => a._id === c._id);\n      if (!n) return;\n      Utils.copyPos(n, c);\n      n._dirty = true;\n    });\n    this._notify();\n    return true;\n  }\n\n  /** return true if can fit in grid height constrain only (always true if no maxRow) */\n  public willItFit(node: GridStackNode): boolean {\n    delete node._willFitPos;\n    if (!this.maxRow) return true;\n    // create a clone with NO maxRow and check if still within size\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {return {...n}})\n    });\n    let n = {...node}; // clone node so we don't mod any settings on it but have full autoPosition and min/max as well! #1687\n    this.cleanupNode(n);\n    delete n.el; delete n._id; delete n.content; delete n.grid;\n    clone.addNode(n);\n    if (clone.getRow() <= this.maxRow) {\n      node._willFitPos = Utils.copyPos({}, n);\n      return true;\n    }\n    return false;\n  }\n\n  /** true if x,y or w,h are different after clamping to min/max */\n  public changedPosConstrain(node: GridStackNode, p: GridStackPosition): boolean {\n    // make sure w,h are set\n    p.w = p.w || node.w;\n    p.h = p.h || node.h;\n    if (node.x !== p.x || node.y !== p.y) return true;\n    // check constrained w,h\n    if (node.maxW) { p.w = Math.min(p.w, node.maxW); }\n    if (node.maxH) { p.h = Math.min(p.h, node.maxH); }\n    if (node.minW) { p.w = Math.max(p.w, node.minW); }\n    if (node.minH) { p.h = Math.max(p.h, node.minH); }\n    return (node.w !== p.w || node.h !== p.h);\n  }\n\n  /** return true if the passed in node was actually moved (checks for no-op and locked) */\n  public moveNode(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    if (!node || /*node.locked ||*/ !o) return false;\n    if (o.pack === undefined) o.pack = true;\n\n    // constrain the passed in values and check if we're still changing our node\n    if (typeof o.x !== 'number') { o.x = node.x; }\n    if (typeof o.y !== 'number') { o.y = node.y; }\n    if (typeof o.w !== 'number') { o.w = node.w; }\n    if (typeof o.h !== 'number') { o.h = node.h; }\n    let resizing = (node.w !== o.w || node.h !== o.h);\n    let nn: GridStackNode = Utils.copyPos({}, node, true); // get min/max out first, then opt positions next\n    Utils.copyPos(nn, o);\n    nn = this.nodeBoundFix(nn, resizing);\n    Utils.copyPos(o, nn);\n\n    if (Utils.samePos(node, o)) return false;\n    let prevPos: GridStackPosition = Utils.copyPos({}, node);\n\n    // during while() collisions make sure to check entire row so larger items don't leap frog small ones (push them all down)\n    let area = nn;\n    // if (this._useEntireRowArea(node, nn)) {\n    //   area = {x: 0, w: this.column, y: nn.y, h: nn.h};\n    // }\n\n    // check if we will need to fix collision at our new location\n    let collides = this.collideAll(node, area, o.skip);\n    let needToMove = true;\n    if (collides.length) {\n      // now check to make sure we actually collided over 50% surface area while dragging\n      let collide = node._moving && !o.nested ? this.collideCoverage(node, o, collides) : collides[0];\n      if (collide) {\n        needToMove = !this._fixCollisions(node, nn, collide, o); // check if already moved...\n      } else {\n        needToMove = false; // we didn't cover >50% for a move, skip...\n      }\n    }\n\n    // now move (to the original ask vs the collision version which might differ) and repack things\n    if (needToMove) {\n      node._dirty = true;\n      Utils.copyPos(node, nn);\n    }\n    if (o.pack) {\n      this._packNodes()\n        ._notify();\n    }\n    return !Utils.samePos(node, prevPos); // pack might have moved things back\n  }\n\n  public getRow(): number {\n    return this.nodes.reduce((row, n) => Math.max(row, n.y + n.h), 0);\n  }\n\n  public beginUpdate(node: GridStackNode): GridStackEngine {\n    if (!node._updating) {\n      node._updating = true;\n      delete node._skipDown;\n      if (!this.batchMode) this.saveInitial();\n    }\n    return this;\n  }\n\n  public endUpdate(): GridStackEngine {\n    let n = this.nodes.find(n => n._updating);\n    if (n) {\n      delete n._updating;\n      delete n._skipDown;\n    }\n    return this;\n  }\n\n  /** saves a copy of the largest column layout (eg 12 even when rendering oneColumnMode, so we don't loose orig layout),\n   * returning a list of widgets for serialization */\n  public save(saveElement = true): GridStackNode[] {\n    // use the highest layout for any saved info so we can have full detail on reload #1849\n    let len = this._layouts?.length;\n    let layout = len && this.column !== (len - 1) ? this._layouts[len - 1] : null;\n    let list: GridStackNode[] = [];\n    this._sortNodes();\n    this.nodes.forEach(n => {\n      let wl = layout?.find(l => l._id === n._id);\n      let w: GridStackNode = {...n};\n      // use layout info instead if set\n      if (wl) { w.x = wl.x; w.y = wl.y; w.w = wl.w; }\n      // delete internals\n      for (let key in w) { if (key[0] === '_' || w[key] === null || w[key] === undefined ) delete w[key]; }\n      delete w.grid;\n      if (!saveElement) delete w.el;\n      // delete default values (will be re-created on read)\n      if (!w.autoPosition) delete w.autoPosition;\n      if (!w.noResize) delete w.noResize;\n      if (!w.noMove) delete w.noMove;\n      if (!w.locked) delete w.locked;\n      list.push(w);\n    });\n    return list;\n  }\n\n  /** @internal called whenever a node is added or moved - updates the cached layouts */\n  public layoutsNodesChange(nodes: GridStackNode[]): GridStackEngine {\n    if (!this._layouts || this._inColumnResize) return this;\n    // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\n    this._layouts.forEach((layout, column) => {\n      if (!layout || column === this.column) return this;\n      if (column < this.column) {\n        this._layouts[column] = undefined;\n      }\n      else {\n        // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\n        // NOTE: we don't need to check against out of bound scaling/moving as that will be done when using those cache values. #1785\n        let ratio = column / this.column;\n        nodes.forEach(node => {\n          if (!node._orig) return; // didn't change (newly added ?)\n          let n = layout.find(l => l._id === node._id);\n          if (!n) return; // no cache for new nodes. Will use those values.\n          // Y changed, push down same amount\n          // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\n          if (node.y !== node._orig.y) {\n            n.y += (node.y - node._orig.y);\n          }\n          // X changed, scale from new position\n          if (node.x !== node._orig.x) {\n            n.x = Math.round(node.x * ratio);\n          }\n          // width changed, scale from new width\n          if (node.w !== node._orig.w) {\n            n.w = Math.round(node.w * ratio);\n          }\n          // ...height always carries over from cache\n        });\n      }\n    });\n    return this;\n  }\n\n  /**\n   * @internal Called to scale the widget width & position up/down based on the column change.\n   * Note we store previous layouts (especially original ones) to make it possible to go\n   * from say 12 -> 1 -> 12 and get back to where we were.\n   *\n   * @param prevColumn previous number of columns\n   * @param column  new column number\n   * @param nodes different sorted list (ex: DOM order) instead of current list\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\n   */\n  public updateNodeWidths(prevColumn: number, column: number, nodes: GridStackNode[], layout: ColumnOptions = 'moveScale'): GridStackEngine {\n    if (!this.nodes.length || !column || prevColumn === column) return this;\n\n    // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data\n    this.cacheLayout(this.nodes, prevColumn);\n    this.batchUpdate(); // do this EARLY as it will call saveInitial() so we can detect where we started for _dirty and collision\n    let newNodes: GridStackNode[] = [];\n\n    // if we're going to 1 column and using DOM order rather than default sorting, then generate that layout\n    let domOrder = false;\n    if (column === 1 && nodes?.length) {\n      domOrder = true;\n      let top = 0;\n      nodes.forEach(n => {\n        n.x = 0;\n        n.w = 1;\n        n.y = Math.max(n.y, top);\n        top = n.y + n.h;\n      });\n      newNodes = nodes;\n      nodes = [];\n    } else {\n      nodes = Utils.sort(this.nodes, -1, prevColumn); // current column reverse sorting so we can insert last to front (limit collision)\n    }\n\n    // see if we have cached previous layout IFF we are going up in size (restore) otherwise always\n    // generate next size down from where we are (looks more natural as you gradually size down).\n    let cacheNodes: Layout[] = [];\n    if (column > prevColumn) {\n      cacheNodes = this._layouts[column] || [];\n      // ...if not, start with the largest layout (if not already there) as down-scaling is more accurate\n      // by pretending we came from that larger column by assigning those values as starting point\n      let lastIndex = this._layouts.length - 1;\n      if (!cacheNodes.length && prevColumn !== lastIndex && this._layouts[lastIndex]?.length) {\n        prevColumn = lastIndex;\n        this._layouts[lastIndex].forEach(cacheNode => {\n          let n = nodes.find(n => n._id === cacheNode._id);\n          if (n) {\n            // still current, use cache info positions\n            n.x = cacheNode.x;\n            n.y = cacheNode.y;\n            n.w = cacheNode.w;\n          }\n        });\n      }\n    }\n\n    // if we found cache re-use those nodes that are still current\n    cacheNodes.forEach(cacheNode => {\n      let j = nodes.findIndex(n => n._id === cacheNode._id);\n      if (j !== -1) {\n        // still current, use cache info positions\n        nodes[j].x = cacheNode.x;\n        nodes[j].y = cacheNode.y;\n        nodes[j].w = cacheNode.w;\n        newNodes.push(nodes[j]);\n        nodes.splice(j, 1);\n      }\n    });\n    // ...and add any extra non-cached ones\n    if (nodes.length) {\n      if (typeof layout === 'function') {\n        layout(column, prevColumn, newNodes, nodes);\n      } else if (!domOrder) {\n        let ratio = column / prevColumn;\n        let move = (layout === 'move' || layout === 'moveScale');\n        let scale = (layout === 'scale' || layout === 'moveScale');\n        nodes.forEach(node => {\n          // NOTE: x + w could be outside of the grid, but addNode() below will handle that\n          node.x = (column === 1 ? 0 : (move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1)));\n          node.w = ((column === 1 || prevColumn === 1) ? 1 :\n            scale ? (Math.round(node.w * ratio) || 1) : (Math.min(node.w, column)));\n          newNodes.push(node);\n        });\n        nodes = [];\n      }\n    }\n\n    // finally re-layout them in reverse order (to get correct placement)\n    newNodes = Utils.sort(newNodes, -1, column);\n    this._inColumnResize = true; // prevent cache update\n    this.nodes = []; // pretend we have no nodes to start with (add() will use same structures) to simplify layout\n    newNodes.forEach(node => {\n      this.addNode(node, false); // 'false' for add event trigger\n      delete node._orig; // make sure the commit doesn't try to restore things back to original\n    });\n    this.commit();\n    delete this._inColumnResize;\n    return this;\n  }\n\n  /**\n   * call to cache the given layout internally to the given location so we can restore back when column changes size\n   * @param nodes list of nodes\n   * @param column corresponding column index to save it under\n   * @param clear if true, will force other caches to be removed (default false)\n   */\n  public cacheLayout(nodes: GridStackNode[], column: number, clear = false): GridStackEngine {\n    let copy: Layout[] = [];\n    nodes.forEach((n, i) => {\n      n._id = n._id || GridStackEngine._idSeq++; // make sure we have an id in case this is new layout, else re-use id already set\n      copy[i] = {x: n.x, y: n.y, w: n.w, _id: n._id} // only thing we change is x,y,w and id to find it back\n    });\n    this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\n    this._layouts[column] = copy;\n    return this;\n  }\n\n  /**\n   * call to cache the given node layout internally to the given location so we can restore back when column changes size\n   * @param node single node to cache\n   * @param column corresponding column index to save it under\n   */\n  public cacheOneLayout(n: GridStackNode, column: number): GridStackEngine {\n    n._id = n._id || GridStackEngine._idSeq++;\n    let layout: Layout = {x: n.x, y: n.y, w: n.w, _id: n._id}\n    this._layouts = this._layouts || [];\n    this._layouts[column] = this._layouts[column] || [];\n    let index = this._layouts[column].findIndex(l => l._id === n._id);\n    index === -1 ? this._layouts[column].push(layout) : this._layouts[column][index] = layout;\n    return this;\n  }\n\n\n  /** called to remove all internal values but the _id */\n  public cleanupNode(node: GridStackNode): GridStackEngine {\n    for (let prop in node) {\n      if (prop[0] === '_' && prop !== '_id') delete node[prop];\n    }\n    return this;\n  }\n}\n\n/** @internal class to store per column layout bare minimal info (subset of GridStackWidget) */\ninterface Layout {\n  x: number;\n  y: number;\n  w: number;\n  _id: number; // so we can find full node back\n}\n","/**\r\n * index-h5.ts 4.4.1 - everything you need for a Grid that uses HTML5 native drag&drop\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\nexport * from './gridstack-ddi';\r\nexport * from './gridstack';\r\n\r\nexport * from './h5/gridstack-dd-native';\r\n\r\n// declare module 'gridstack'; for umd ?\r\n","/*!\r\n * GridStack 4.4.1\r\n * https://gridstackjs.com/\r\n *\r\n * Copyright (c) 2021 Alain Dumesny\r\n * see root license https://github.com/gridstack/gridstack.js/tree/master/LICENSE\r\n */\r\nimport { GridStackEngine } from './gridstack-engine';\r\nimport { Utils, HeightData } from './utils';\r\nimport { ColumnOptions, GridItemHTMLElement, GridStackElement, GridStackEventHandlerCallback,\r\n  GridStackNode, GridStackOptions, GridStackWidget, numberOrString, DDUIData, DDDragInOpt, GridStackPosition } from './types';\r\nimport { GridStackDDI } from './gridstack-ddi';\r\n\r\n// export all dependent file as well to make it easier for users to just import the main file\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\nexport * from './gridstack-ddi';\r\n\r\nexport interface GridHTMLElement extends HTMLElement {\r\n  gridstack?: GridStack; // grid's parent DOM element points back to grid class\r\n}\r\n/** list of possible events, or space separated list of them */\r\nexport type GridStackEvent = 'added' | 'change' | 'disable' | 'drag' | 'dragstart' | 'dragstop' | 'dropped' |\r\n  'enable' | 'removed' | 'resize' | 'resizestart' | 'resizestop' | string;\r\n\r\n/** Defines the coordinates of an object */\r\nexport interface MousePosition {\r\n  top: number;\r\n  left: number;\r\n}\r\n\r\n/** Defines the position of a cell inside the grid*/\r\nexport interface CellPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface GridCSSStyleSheet extends CSSStyleSheet {\r\n  _id?: string; // random id we will use to style us\r\n  _max?: number; // internal tracker of the max # of rows we created\\\r\n}\r\n\r\n// default values for grid options - used during init and when saving out\r\nconst GridDefaults: GridStackOptions = {\r\n  column: 12,\r\n  minRow: 0,\r\n  maxRow: 0,\r\n  itemClass: 'grid-stack-item',\r\n  placeholderClass: 'grid-stack-placeholder',\r\n  placeholderText: '',\r\n  handle: '.grid-stack-item-content',\r\n  handleClass: null,\r\n  styleInHead: false,\r\n  cellHeight: 'auto',\r\n  cellHeightThrottle: 100,\r\n  margin: 10,\r\n  auto: true,\r\n  minWidth: 768,\r\n  float: false,\r\n  staticGrid: false,\r\n  animate: true,\r\n  alwaysShowResizeHandle: false,\r\n  resizable: {\r\n    autoHide: true,\r\n    handles: 'se'\r\n  },\r\n  draggable: {\r\n    handle: '.grid-stack-item-content',\r\n    scroll: false,\r\n    appendTo: 'body'\r\n  },\r\n  disableDrag: false,\r\n  disableResize: false,\r\n  rtl: 'auto',\r\n  removable: false,\r\n  removableOptions: {\r\n    accept: '.grid-stack-item'\r\n  },\r\n  marginUnit: 'px',\r\n  cellHeightUnit: 'px',\r\n  disableOneColumnMode: false,\r\n  oneColumnModeDomSort: false\r\n};\r\n\r\n/**\r\n * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.\r\n * Note: your grid elements MUST have the following classes for the CSS layout to work:\r\n * @example\r\n * <div class=\"grid-stack\">\r\n *   <div class=\"grid-stack-item\">\r\n *     <div class=\"grid-stack-item-content\">Item 1</div>\r\n *   </div>\r\n * </div>\r\n */\r\nexport class GridStack {\r\n\r\n  /**\r\n   * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will\r\n   * simply return the existing instance (ignore any passed options). There is also an initAll() version that support\r\n   * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.\r\n   * @param options grid options (optional)\r\n   * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   *\r\n   * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\r\n   * let grid = document.querySelector('.grid-stack').gridstack;\r\n   */\r\n  public static init(options: GridStackOptions = {}, elOrString: GridStackElement = '.grid-stack'): GridStack {\r\n    let el = GridStack.getGridElement(elOrString);\r\n    if (!el) {\r\n      if (typeof elOrString === 'string') {\r\n        console.error('GridStack.initAll() no grid was found with selector \"' + elOrString + '\" - element missing or wrong selector ?' +\r\n        '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n      } else {\r\n        console.error('GridStack.init() no grid element was passed.');\r\n      }\r\n      return null;\r\n    }\r\n    if (!el.gridstack) {\r\n      el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n    }\r\n    return el.gridstack\r\n  }\r\n\r\n  /**\r\n   * Will initialize a list of elements (given a selector) and return an array of grids.\r\n   * @param options grid options (optional)\r\n   * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grids = GridStack.initAll();\r\n   * grids.forEach(...)\r\n   */\r\n  public static initAll(options: GridStackOptions = {}, selector = '.grid-stack'): GridStack[] {\r\n    let grids: GridStack[] = [];\r\n    GridStack.getGridElements(selector).forEach(el => {\r\n      if (!el.gridstack) {\r\n        el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n        delete options.dragIn; delete options.dragInOptions; // only need to be done once (really a static global thing, not per grid)\r\n      }\r\n      grids.push(el.gridstack);\r\n    });\r\n    if (grids.length === 0) {\r\n      console.error('GridStack.initAll() no grid was found with selector \"' + selector + '\" - element missing or wrong selector ?' +\r\n      '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n    }\r\n    return grids;\r\n  }\r\n\r\n  /**\r\n   * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then\r\n   * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from\r\n   * JSON serialized data, including options.\r\n   * @param parent HTML element parent to the grid\r\n   * @param opt grids options used to initialize the grid, and list of children\r\n   */\r\n  public static addGrid(parent: HTMLElement, opt: GridStackOptions = {}): GridStack {\r\n    if (!parent) return null;\r\n\r\n    // create the grid element, but check if the passed 'parent' already has grid styling and should be used instead\r\n    let el = parent;\r\n    if (!parent.classList.contains('grid-stack')) {\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = `<div class=\"grid-stack ${opt.class || ''}\"></div>`;\r\n      el = doc.body.children[0] as HTMLElement;\r\n      parent.appendChild(el);\r\n    }\r\n\r\n    // create grid class and load any children\r\n    let grid = GridStack.init(opt, el);\r\n    if (grid.opts.children) {\r\n      let children = grid.opts.children;\r\n      delete grid.opts.children;\r\n      grid.load(children);\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  /** scoping so users can call GridStack.Utils.sort() for example */\r\n  public static Utils = Utils;\r\n\r\n  /** scoping so users can call new GridStack.Engine(12) for example */\r\n  public static Engine = GridStackEngine;\r\n\r\n  /** the HTML element tied to this grid after it's been initialized */\r\n  public el: GridHTMLElement;\r\n\r\n  /** engine used to implement non DOM grid functionality */\r\n  public engine: GridStackEngine;\r\n\r\n  /** grid options - public for classes to access, but use methods to modify! */\r\n  public opts: GridStackOptions;\r\n\r\n  /** @internal create placeholder DIV as needed */\r\n  public get placeholder(): HTMLElement {\r\n    if (!this._placeholder) {\r\n      let placeholderChild = document.createElement('div'); // child so padding match item-content\r\n      placeholderChild.className = 'placeholder-content';\r\n      if (this.opts.placeholderText) {\r\n        placeholderChild.innerHTML = this.opts.placeholderText;\r\n      }\r\n      this._placeholder = document.createElement('div');\r\n      this._placeholder.classList.add(this.opts.placeholderClass, GridDefaults.itemClass, this.opts.itemClass);\r\n      this.placeholder.appendChild(placeholderChild);\r\n    }\r\n    return this._placeholder;\r\n  }\r\n  /** @internal */\r\n  private _placeholder: HTMLElement;\r\n  /** @internal */\r\n  private _prevColumn: number;\r\n  /** @internal */\r\n  private _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal */\r\n  public _gsEventHandler = {};\r\n  /** @internal */\r\n  private _styles: GridCSSStyleSheet;\r\n  /** @internal flag to keep cells square during resize */\r\n  private _isAutoCellHeight: boolean;\r\n  /** @internal track event binding to window resize so we can remove */\r\n  private _windowResizeBind: () => void;\r\n  /** @internal limit auto cell resizing method */\r\n  private _cellHeightThrottle: () => void;\r\n  /** @internal true when loading items to insert first rather than append */\r\n  private _insertNotAppend: boolean;\r\n  /** @internal extra row added when dragging at the bottom of the grid */\r\n  private _extraDragRow = 0;\r\n\r\n  /**\r\n   * Construct a grid item from the given element and options\r\n   * @param el\r\n   * @param opts\r\n   */\r\n  public constructor(el: GridHTMLElement, opts: GridStackOptions = {}) {\r\n    this.el = el; // exposed HTML element to the user\r\n    opts = opts || {}; // handles null/undefined/0\r\n\r\n    // if row property exists, replace minRow and maxRow instead\r\n    if (opts.row) {\r\n      opts.minRow = opts.maxRow = opts.row;\r\n      delete opts.row;\r\n    }\r\n    let rowAttr = Utils.toNumber(el.getAttribute('gs-row'));\r\n\r\n    // elements attributes override any passed options (like CSS style) - merge the two together\r\n    let defaults: GridStackOptions = {...Utils.cloneDeep(GridDefaults),\r\n      column: Utils.toNumber(el.getAttribute('gs-column')) || 12,\r\n      minRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-min-row')) || 0,\r\n      maxRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-max-row')) || 0,\r\n      staticGrid: Utils.toBool(el.getAttribute('gs-static')) || false,\r\n      _styleSheetClass: 'grid-stack-instance-' + (Math.random() * 10000).toFixed(0),\r\n      alwaysShowResizeHandle: opts.alwaysShowResizeHandle || false,\r\n      resizable: {\r\n        autoHide: !(opts.alwaysShowResizeHandle || false),\r\n        handles: 'se'\r\n      },\r\n      draggable: {\r\n        handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) || '.grid-stack-item-content',\r\n        scroll: false,\r\n        appendTo: 'body'\r\n      },\r\n      removableOptions: {\r\n        accept: '.' + (opts.itemClass || 'grid-stack-item')\r\n      },\r\n    };\r\n    if (el.getAttribute('gs-animate')) { // default to true, but if set to false use that instead\r\n      defaults.animate = Utils.toBool(el.getAttribute('gs-animate'))\r\n    }\r\n\r\n    this.opts = Utils.defaults(opts, defaults);\r\n    opts = null; // make sure we use this.opts instead\r\n    this.initMargin(); // part of settings defaults...\r\n\r\n    // Now check if we're loading into 1 column mode FIRST so we don't do un-necessary work (like cellHeight = width / 12 then go 1 column)\r\n    if (this.opts.column !== 1 && !this.opts.disableOneColumnMode && this._widthOrContainer() <= this.opts.minWidth) {\r\n      this._prevColumn = this.opts.column;\r\n      this.opts.column = 1;\r\n    }\r\n\r\n    if (this.opts.rtl === 'auto') {\r\n      this.opts.rtl = (el.style.direction === 'rtl');\r\n    }\r\n\r\n    if (this.opts.rtl) {\r\n      this.el.classList.add('grid-stack-rtl');\r\n    }\r\n\r\n    // check if we're been nested, and if so update our style and keep pointer around (used during save)\r\n    let parentGridItemEl = Utils.closestByClass(this.el, GridDefaults.itemClass) as GridItemHTMLElement;\r\n    if (parentGridItemEl && parentGridItemEl.gridstackNode) {\r\n      this.opts._isNested = parentGridItemEl.gridstackNode;\r\n      this.opts._isNested.subGrid = this;\r\n      this.el.classList.add('grid-stack-nested');\r\n    }\r\n\r\n    this._isAutoCellHeight = (this.opts.cellHeight === 'auto');\r\n    if (this._isAutoCellHeight || this.opts.cellHeight === 'initial') {\r\n      // make the cell content square initially (will use resize/column event to keep it square)\r\n      this.cellHeight(undefined, false);\r\n    } else {\r\n      // append unit if any are set\r\n      if (typeof this.opts.cellHeight == 'number' && this.opts.cellHeightUnit && this.opts.cellHeightUnit !== GridDefaults.cellHeightUnit) {\r\n        this.opts.cellHeight = this.opts.cellHeight + this.opts.cellHeightUnit;\r\n        delete this.opts.cellHeightUnit;\r\n      }\r\n      this.cellHeight(this.opts.cellHeight, false);\r\n    }\r\n\r\n    this.el.classList.add(this.opts._styleSheetClass);\r\n\r\n    this._setStaticClass();\r\n\r\n    this.engine = new GridStackEngine({\r\n      column: this.opts.column,\r\n      float: this.opts.float,\r\n      maxRow: this.opts.maxRow,\r\n      onChange: (cbNodes) => {\r\n        let maxH = 0;\r\n        this.engine.nodes.forEach(n => { maxH = Math.max(maxH, n.y + n.h) });\r\n        cbNodes.forEach(n => {\r\n          let el = n.el;\r\n          if (!el) return;\r\n          if (n._removeDOM) {\r\n            if (el) el.remove();\r\n            delete n._removeDOM;\r\n          } else {\r\n            this._writePosAttr(el, n);\r\n          }\r\n        });\r\n        this._updateStyles(false, maxH); // false = don't recreate, just append if need be\r\n      }\r\n    });\r\n\r\n    if (this.opts.auto) {\r\n      this.batchUpdate(); // prevent in between re-layout #1535 TODO: this only set float=true, need to prevent collision check...\r\n      let elements: {el: HTMLElement; i: number}[] = [];\r\n      this.getGridItems().forEach(el => { // get dom elements (not nodes yet)\r\n        let x = parseInt(el.getAttribute('gs-x'));\r\n        let y = parseInt(el.getAttribute('gs-y'));\r\n        elements.push({\r\n          el,\r\n          // if x,y are missing (autoPosition) add them to end of list - but keep their respective DOM order\r\n          i: (Number.isNaN(x) ? 1000 : x) + (Number.isNaN(y) ? 1000 : y) * this.opts.column\r\n        });\r\n      });\r\n      elements.sort((a, b) => a.i - b.i).forEach(e => this._prepareElement(e.el));\r\n      this.commit();\r\n    }\r\n\r\n    this.setAnimation(this.opts.animate);\r\n\r\n    this._updateStyles();\r\n    if (this.opts.column != 12) {\r\n      this.el.classList.add('grid-stack-' + this.opts.column);\r\n    }\r\n\r\n    // legacy support to appear 'per grid` options when really global.\r\n    if (this.opts.dragIn) GridStack.setupDragIn(this.opts.dragIn, this.opts.dragInOptions);\r\n    delete this.opts.dragIn;\r\n    delete this.opts.dragInOptions;\r\n\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this._updateWindowResizeEvent();\r\n  }\r\n\r\n  /**\r\n   * add a new widget and returns it.\r\n   *\r\n   * Widget will be always placed even if result height is more than actual grid height.\r\n   * You need to use `willItFit()` before calling addWidget for additional check.\r\n   * See also `makeWidget()`.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.addWidget({w: 3, content: 'hello'});\r\n   * grid.addWidget('<div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">hello</div></div>', {w: 3});\r\n   *\r\n   * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add\r\n   * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget\r\n   */\r\n  public addWidget(els?: GridStackWidget | GridStackElement, options?: GridStackWidget): GridItemHTMLElement {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `addWidget(el, x, y, width...)` is deprecated. Use `addWidget({x, y, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1,\r\n        opt: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++],\r\n          minW:a[i++], maxW:a[i++], minH:a[i++], maxH:a[i++], id:a[i++] };\r\n      return this.addWidget(els, opt);\r\n    }\r\n\r\n    function isGridStackWidget(w: GridStackWidget): w is GridStackWidget { // https://medium.com/ovrsea/checking-the-type-of-an-object-in-typescript-the-type-guards-24d98d9119b0\r\n      return w.x !== undefined || w.y !== undefined || w.w !== undefined || w.h !== undefined || w.content !== undefined ? true : false;\r\n    }\r\n\r\n    let el: HTMLElement;\r\n    if (typeof els === 'string') {\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = els;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else if (arguments.length === 0 || arguments.length === 1 && isGridStackWidget(els)) {\r\n      let content = els ? (els as GridStackWidget).content || '' : '';\r\n      options = els;\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = `<div class=\"grid-stack-item ${this.opts.itemClass || ''}\"><div class=\"grid-stack-item-content\">${content}</div></div>`;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else {\r\n      el = els as HTMLElement;\r\n    }\r\n\r\n    // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos\r\n    // as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz) before adding the node.\r\n    // So make sure we load any DOM attributes that are not specified in passed in options (which override)\r\n    let domAttr = this._readAttr(el);\r\n    options = Utils.cloneDeep(options) || {};  // make a copy before we modify in case caller re-uses it\r\n    Utils.defaults(options, domAttr);\r\n    let node = this.engine.prepareNode(options);\r\n    this._writeAttr(el, options);\r\n\r\n    if (this._insertNotAppend) {\r\n      this.el.prepend(el);\r\n    } else {\r\n      this.el.appendChild(el);\r\n    }\r\n\r\n    // similar to makeWidget() that doesn't read attr again and worse re-create a new node and loose any _id\r\n    this._prepareElement(el, true, options);\r\n    this._updateContainerHeight();\r\n\r\n    // check if nested grid definition is present\r\n    if (node.subGrid && !(node.subGrid as GridStack).el) { // see if there is a sub-grid to create too\r\n      let content = node.el.querySelector('.grid-stack-item-content') as HTMLElement;\r\n      node.subGrid = GridStack.addGrid(content, node.subGrid as GridStackOptions);\r\n    }\r\n\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n\r\n    return el;\r\n  }\r\n\r\n  /**\r\n  /**\r\n   * saves the current layout returning a list of widgets for serialization which might include any nested grids.\r\n   * @param saveContent if true (default) the latest html inside .grid-stack-content will be saved to GridStackWidget.content field, else it will\r\n   * be removed.\r\n   * @param saveGridOpt if true (default false), save the grid options itself, so you can call the new GridStack.addGrid()\r\n   * to recreate everything from scratch. GridStackOptions.children would then contain the widget list instead.\r\n   * @returns list of widgets or full grid option, including .children list of widgets\r\n   */\r\n  public save(saveContent = true, saveGridOpt = false): GridStackWidget[] | GridStackOptions {\r\n    // return copied nodes we can modify at will...\r\n    let list = this.engine.save(saveContent);\r\n\r\n    // check for HTML content and nested grids\r\n    list.forEach(n => {\r\n      if (saveContent && n.el && !n.subGrid) { // sub-grid are saved differently, not plain content\r\n        let sub = n.el.querySelector('.grid-stack-item-content');\r\n        n.content = sub ? sub.innerHTML : undefined;\r\n        if (!n.content) delete n.content;\r\n      } else {\r\n        if (!saveContent) { delete n.content; }\r\n        // check for nested grid\r\n        if (n.subGrid) {\r\n          n.subGrid = (n.subGrid as GridStack).save(saveContent, true) as GridStackOptions;\r\n        }\r\n      }\r\n      delete n.el;\r\n    });\r\n\r\n    // check if save entire grid options (needed for recursive) + children...\r\n    if (saveGridOpt) {\r\n      let o: GridStackOptions = Utils.cloneDeep(this.opts);\r\n      // delete default values that will be recreated on launch\r\n      if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {\r\n        o.margin = o.marginTop;\r\n        delete o.marginTop; delete o.marginRight; delete o.marginBottom; delete o.marginLeft;\r\n      }\r\n      if (o.rtl === (this.el.style.direction === 'rtl')) { o.rtl = 'auto' }\r\n      if (this._isAutoCellHeight) { o.cellHeight = 'auto' }\r\n      Utils.removeInternalAndSame(o, GridDefaults);\r\n      o.children = list;\r\n      return o;\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  /**\r\n   * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.\r\n   *\r\n   * @param layout list of widgets definition to update/create\r\n   * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving\r\n   * the user control of insertion.\r\n   *\r\n   * @example\r\n   * see http://gridstackjs.com/demo/serialization.html\r\n   **/\r\n  public load(layout: GridStackWidget[], addAndRemove: boolean | ((g: GridStack, w: GridStackWidget, add: boolean) => GridItemHTMLElement)  = true): GridStack {\r\n    let items = GridStack.Utils.sort([...layout], -1, this._prevColumn || this.opts.column); // make copy before we mod/sort\r\n    this._insertNotAppend = true; // since create in reverse order...\r\n\r\n    // if we're loading a layout into 1 column (_prevColumn is set only when going to 1) and items don't fit, make sure to save\r\n    // the original wanted layout so we can scale back up correctly #1471\r\n    if (this._prevColumn && this._prevColumn !== this.opts.column && items.some(n => (n.x + n.w) > this.opts.column)) {\r\n      this._ignoreLayoutsNodeChange = true; // skip layout update\r\n      this.engine.cacheLayout(items, this._prevColumn, true);\r\n    }\r\n\r\n    let removed: GridStackNode[] = [];\r\n    this.batchUpdate();\r\n\r\n    // see if any items are missing from new layout and need to be removed first\r\n    if (addAndRemove) {\r\n      let copyNodes = [...this.engine.nodes]; // don't loop through array you modify\r\n      copyNodes.forEach(n => {\r\n        let item = items.find(w => n.id === w.id);\r\n        if (!item) {\r\n          if (typeof(addAndRemove) === 'function') {\r\n            addAndRemove(this, n, false);\r\n          } else {\r\n            removed.push(n); // batch keep track\r\n            this.removeWidget(n.el, true, false);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // now add/update the widgets\r\n    items.forEach(w => {\r\n      let item = (w.id || w.id === 0) ? this.engine.nodes.find(n => n.id === w.id) : undefined;\r\n      if (item) {\r\n        this.update(item.el, w);\r\n        if (w.subGrid && (w.subGrid as GridStackOptions).children) { // update any sub grid as well\r\n          let sub = item.el.querySelector('.grid-stack') as GridHTMLElement;\r\n          if (sub && sub.gridstack) {\r\n            sub.gridstack.load((w.subGrid as GridStackOptions).children); // TODO: support updating grid options ?\r\n            this._insertNotAppend = true; // got reset by above call\r\n          }\r\n        }\r\n      } else if (addAndRemove) {\r\n        if (typeof(addAndRemove) === 'function') {\r\n          w = addAndRemove(this, w, true).gridstackNode;\r\n        } else {\r\n          w = this.addWidget(w).gridstackNode;\r\n        }\r\n      }\r\n    });\r\n\r\n    this.engine.removedNodes = removed;\r\n    this.commit();\r\n\r\n    // after commit, clear that flag\r\n    delete this._ignoreLayoutsNodeChange;\r\n    delete this._insertNotAppend;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Initializes batch updates. You will see no changes until `commit()` method is called.\r\n   */\r\n  public batchUpdate(): GridStack {\r\n    this.engine.batchUpdate();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets current cell height.\r\n   */\r\n  public getCellHeight(forcePixel = false): number {\r\n    if (this.opts.cellHeight && this.opts.cellHeight !== 'auto' &&\r\n       (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === 'px')) {\r\n      return this.opts.cellHeight as number;\r\n    }\r\n    // else do entire grid and # of rows\r\n    // or get first cell height ?\r\n    // let el = this.el.querySelector('.' + this.opts.itemClass) as HTMLElement;\r\n    // let height = Utils.toNumber(el.getAttribute('gs-h'));\r\n    // return Math.round(el.offsetHeight / height);\r\n    return Math.round(this.el.getBoundingClientRect().height) / parseInt(this.el.getAttribute('gs-current-row'));\r\n  }\r\n\r\n  /**\r\n   * Update current cell height - see `GridStackOptions.cellHeight` for format.\r\n   * This method rebuilds an internal CSS style sheet.\r\n   * Note: You can expect performance issues if call this method too often.\r\n   *\r\n   * @param val the cell height. If not passed (undefined), cells content will be made square (match width minus margin),\r\n   * if pass 0 the CSS will be generated by the application instead.\r\n   * @param update (Optional) if false, styles will not be updated\r\n   *\r\n   * @example\r\n   * grid.cellHeight(100); // same as 100px\r\n   * grid.cellHeight('70px');\r\n   * grid.cellHeight(grid.cellWidth() * 1.2);\r\n   */\r\n  public cellHeight(val?: numberOrString, update = true): GridStack {\r\n\r\n    // if not called internally, check if we're changing mode\r\n    if (update && val !== undefined) {\r\n      if (this._isAutoCellHeight !== (val === 'auto')) {\r\n        this._isAutoCellHeight = (val === 'auto');\r\n        this._updateWindowResizeEvent();\r\n      }\r\n    }\r\n    if (val === 'initial' || val === 'auto') { val = undefined; }\r\n\r\n    // make item content be square\r\n    if (val === undefined) {\r\n      let marginDiff = - (this.opts.marginRight as number) - (this.opts.marginLeft as number)\r\n        + (this.opts.marginTop as number) + (this.opts.marginBottom as number);\r\n      val = this.cellWidth() + marginDiff;\r\n    }\r\n\r\n    let data = Utils.parseHeight(val);\r\n    if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {\r\n      return this;\r\n    }\r\n    this.opts.cellHeightUnit = data.unit;\r\n    this.opts.cellHeight = data.h;\r\n\r\n    if (update) {\r\n      this._updateStyles(true, this.getRow()); // true = force re-create, for that # of rows\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** Gets current cell width. */\r\n  public cellWidth(): number {\r\n    return this._widthOrContainer() / this.opts.column;\r\n  }\r\n  /** return our expected width (or parent) for 1 column check */\r\n  private _widthOrContainer(): number {\r\n    // use `offsetWidth` or `clientWidth` (no scrollbar) ?\r\n    // https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively\r\n    return (this.el.clientWidth || this.el.parentElement.clientWidth || window.innerWidth);\r\n  }\r\n\r\n  /**\r\n   * Finishes batch updates. Updates DOM nodes. You must call it after batchUpdate.\r\n   */\r\n  public commit(): GridStack {\r\n    this.engine.commit();\r\n    this._triggerRemoveEvent();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /** re-layout grid items to reclaim any empty space */\r\n  public compact(): GridStack {\r\n    this.engine.compact();\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,\r\n   * as well as cache the original layout so you can revert back to previous positions without loss.\r\n   * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],\r\n   * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)\r\n   * @param column - Integer > 0 (default 12).\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n   */\r\n  public column(column: number, layout: ColumnOptions = 'moveScale'): GridStack {\r\n    if (column < 1 || this.opts.column === column) return this;\r\n    let oldColumn = this.opts.column;\r\n\r\n    // if we go into 1 column mode (which happens if we're sized less than minW unless disableOneColumnMode is on)\r\n    // then remember the original columns so we can restore.\r\n    if (column === 1) {\r\n      this._prevColumn = oldColumn;\r\n    } else {\r\n      delete this._prevColumn;\r\n    }\r\n\r\n    this.el.classList.remove('grid-stack-' + oldColumn);\r\n    this.el.classList.add('grid-stack-' + column);\r\n    this.opts.column = this.engine.column = column;\r\n\r\n    // update the items now - see if the dom order nodes should be passed instead (else default to current list)\r\n    let domNodes: GridStackNode[];\r\n    if (column === 1 && this.opts.oneColumnModeDomSort) {\r\n      domNodes = [];\r\n      this.getGridItems().forEach(el => { // get dom elements in order\r\n        if (el.gridstackNode) { domNodes.push(el.gridstackNode); }\r\n      });\r\n      if (!domNodes.length) { domNodes = undefined; }\r\n    }\r\n    this.engine.updateNodeWidths(oldColumn, column, domNodes, layout);\r\n    if (this._isAutoCellHeight) this.cellHeight();\r\n\r\n    // and trigger our event last...\r\n    this._ignoreLayoutsNodeChange = true; // skip layout update\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the number of columns in the grid (default 12)\r\n   */\r\n  public getColumn(): number {\r\n    return this.opts.column;\r\n  }\r\n\r\n  /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children in DOM order */\r\n  public getGridItems(): GridItemHTMLElement[] {\r\n    return Array.from(this.el.children)\r\n      .filter((el: HTMLElement) => el.matches('.' + this.opts.itemClass) && !el.matches('.' + this.opts.placeholderClass)) as GridItemHTMLElement[];\r\n  }\r\n\r\n  /**\r\n   * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.\r\n   * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).\r\n   */\r\n  public destroy(removeDOM = true): GridStack {\r\n    if (!this.el) return; // prevent multiple calls\r\n    this._updateWindowResizeEvent(true);\r\n    this.setStatic(true, false); // permanently removes DD but don't set CSS class (we're going away)\r\n    this.setAnimation(false);\r\n    if (!removeDOM) {\r\n      this.removeAll(removeDOM);\r\n      this.el.classList.remove(this.opts._styleSheetClass);\r\n    } else {\r\n      this.el.parentNode.removeChild(this.el);\r\n    }\r\n    this._removeStylesheet();\r\n    this.el.removeAttribute('gs-current-row');\r\n    delete this.opts._isNested;\r\n    delete this.opts;\r\n    delete this._placeholder;\r\n    delete this.engine;\r\n    delete this.el.gridstack; // remove circular dependency that would prevent a freeing\r\n    delete this.el;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)\r\n   */\r\n  public float(val: boolean): GridStack {\r\n    this.engine.float = val;\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the current float mode\r\n   */\r\n  public getFloat(): boolean {\r\n    return this.engine.float;\r\n  }\r\n\r\n  /**\r\n   * Get the position of the cell under a pixel on screen.\r\n   * @param position the position of the pixel to resolve in\r\n   * absolute coordinates, as an object with top and left properties\r\n   * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).\r\n   * Useful when grid is within `position: relative` element\r\n   *\r\n   * Returns an object with properties `x` and `y` i.e. the column and row in the grid.\r\n   */\r\n  public getCellFromPixel(position: MousePosition, useDocRelative = false): CellPosition {\r\n    let box = this.el.getBoundingClientRect();\r\n    // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)\r\n    let containerPos: {top: number, left: number};\r\n    if (useDocRelative) {\r\n      containerPos = {top: box.top + document.documentElement.scrollTop, left: box.left};\r\n      // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)\r\n    } else {\r\n      containerPos = {top: this.el.offsetTop, left: this.el.offsetLeft}\r\n      // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)\r\n    }\r\n    let relativeLeft = position.left - containerPos.left;\r\n    let relativeTop = position.top - containerPos.top;\r\n\r\n    let columnWidth = (box.width / this.opts.column);\r\n    let rowHeight = (box.height / parseInt(this.el.getAttribute('gs-current-row')));\r\n\r\n    return {x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight)};\r\n  }\r\n\r\n  /** returns the current number of rows, which will be at least `minRow` if set */\r\n  public getRow(): number {\r\n    return Math.max(this.engine.getRow(), this.opts.minRow);\r\n  }\r\n\r\n  /**\r\n   * Checks if specified area is empty.\r\n   * @param x the position x.\r\n   * @param y the position y.\r\n   * @param w the width of to check\r\n   * @param h the height of to check\r\n   */\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    return this.engine.isAreaEmpty(x, y, w, h);\r\n  }\r\n\r\n  /**\r\n   * If you add elements to your grid by hand, you have to tell gridstack afterwards to make them widgets.\r\n   * If you want gridstack to add the elements for you, use `addWidget()` instead.\r\n   * Makes the given element a widget and returns it.\r\n   * @param els widget or single selector to convert.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.el.appendChild('<div id=\"gsi-1\" gs-w=\"3\"></div>');\r\n   * grid.makeWidget('#gsi-1');\r\n   */\r\n  public makeWidget(els: GridStackElement): GridItemHTMLElement {\r\n    let el = GridStack.getElement(els);\r\n    this._prepareElement(el, true);\r\n    this._updateContainerHeight();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Event handler that extracts our CustomEvent data out automatically for receiving custom\r\n   * notifications (see doc for supported events)\r\n   * @param name of the event (see possible values) or list of names space separated\r\n   * @param callback function called with event and optional second/third param\r\n   * (see README documentation for each signature).\r\n   *\r\n   * @example\r\n   * grid.on('added', function(e, items) { log('added ', items)} );\r\n   * or\r\n   * grid.on('added removed change', function(e, items) { log(e.type, items)} );\r\n   *\r\n   * Note: in some cases it is the same as calling native handler and parsing the event.\r\n   * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );\r\n   *\r\n   */\r\n  public on(name: GridStackEvent, callback: GridStackEventHandlerCallback): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.on(name, callback));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // native CustomEvent handlers - cash the generic handlers so we can easily remove\r\n      let noData = (name === 'enable' || name === 'disable');\r\n      if (noData) {\r\n        this._gsEventHandler[name] = (event: Event) => callback(event);\r\n      } else {\r\n        this._gsEventHandler[name] = (event: CustomEvent) => callback(event, event.detail);\r\n      }\r\n      this.el.addEventListener(name, this._gsEventHandler[name]);\r\n    } else if (name === 'drag' || name === 'dragstart' || name === 'dragstop' || name === 'resizestart' || name === 'resize' || name === 'resizestop' || name === 'dropped') {\r\n      // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.\r\n      // do same for start event to make it easier...\r\n      this._gsEventHandler[name] = callback;\r\n    } else {\r\n      console.log('GridStack.on(' + name + ') event not supported, but you can still use $(\".grid-stack\").on(...) while jquery-ui is still used internally.');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * unsubscribe from the 'on' event below\r\n   * @param name of the event (see possible values)\r\n   */\r\n  public off(name: GridStackEvent): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.off(name));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // remove native CustomEvent handlers\r\n      if (this._gsEventHandler[name]) {\r\n        this.el.removeEventListener(name, this._gsEventHandler[name]);\r\n      }\r\n    }\r\n    delete this._gsEventHandler[name];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes widget from the grid.\r\n   * @param el  widget or selector to modify\r\n   * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).\r\n   * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\r\n   */\r\n  public removeWidget(els: GridStackElement, removeDOM = true, triggerEvent = true): GridStack {\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (el.parentElement !== this.el) return; // not our child!\r\n      let node = el.gridstackNode;\r\n      // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272\r\n      if (!node) {\r\n        node = this.engine.nodes.find(n => el === n.el);\r\n      }\r\n      if (!node) return;\r\n\r\n      // remove our DOM data (circular link) and drag&drop permanently\r\n      delete el.gridstackNode;\r\n      GridStackDDI.get().remove(el);\r\n\r\n      this.engine.removeNode(node, removeDOM, triggerEvent);\r\n\r\n      if (removeDOM && el.parentElement) {\r\n        el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM\r\n      }\r\n    });\r\n    if (triggerEvent) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes all widgets from the grid.\r\n   * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).\r\n   */\r\n  public removeAll(removeDOM = true): GridStack {\r\n    // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently\r\n    this.engine.nodes.forEach(n => {\r\n      delete n.el.gridstackNode;\r\n      GridStackDDI.get().remove(n.el);\r\n    });\r\n    this.engine.removeAll(removeDOM);\r\n    this._triggerRemoveEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.\r\n   * @param doAnimate if true the grid will animate.\r\n   */\r\n  public setAnimation(doAnimate: boolean): GridStack {\r\n    if (doAnimate) {\r\n      this.el.classList.add('grid-stack-animate');\r\n    } else {\r\n      this.el.classList.remove('grid-stack-animate');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.\r\n   * Also toggle the grid-stack-static class.\r\n   * @param val if true the grid become static.\r\n   */\r\n  public setStatic(val: boolean, updateClass = true): GridStack {\r\n    if (this.opts.staticGrid === val) return this;\r\n    this.opts.staticGrid = val;\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this.engine.nodes.forEach(n => this._prepareDragDropByNode(n)); // either delete or init Drag&drop\r\n    if (updateClass) { this._setStaticClass(); }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.\r\n   * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)\r\n   * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.\r\n   */\r\n  public update(els: GridStackElement, opt: GridStackWidget): GridStack {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update(el, {x, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1;\r\n      opt = { x:a[i++], y:a[i++], w:a[i++], h:a[i++] };\r\n      return this.update(els, opt);\r\n    }\r\n\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (!el || !el.gridstackNode) return;\r\n      let n = el.gridstackNode;\r\n      let w = Utils.cloneDeep(opt); // make a copy we can modify in case they re-use it or multiple items\r\n      delete w.autoPosition;\r\n\r\n      // move/resize widget if anything changed\r\n      let keys = ['x', 'y', 'w', 'h'];\r\n      let m: GridStackWidget;\r\n      if (keys.some(k => w[k] !== undefined && w[k] !== n[k])) {\r\n        m = {};\r\n        keys.forEach(k => {\r\n          m[k] = (w[k] !== undefined) ? w[k] : n[k];\r\n          delete w[k];\r\n        });\r\n      }\r\n      // for a move as well IFF there is any min/max fields set\r\n      if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {\r\n        m = {}; // will use node position but validate values\r\n      }\r\n\r\n      // check for content changing\r\n      if (w.content) {\r\n        let sub = el.querySelector('.grid-stack-item-content');\r\n        if (sub && sub.innerHTML !== w.content) {\r\n          sub.innerHTML = w.content;\r\n        }\r\n        delete w.content;\r\n      }\r\n\r\n      // any remaining fields are assigned, but check for dragging changes, resize constrain\r\n      let changed = false;\r\n      let ddChanged = false;\r\n      for (const key in w) {\r\n        if (key[0] !== '_' && n[key] !== w[key]) {\r\n          n[key] = w[key];\r\n          changed = true;\r\n          ddChanged = ddChanged || (!this.opts.staticGrid && (key === 'noResize' || key === 'noMove' || key === 'locked'));\r\n        }\r\n      }\r\n\r\n      // finally move the widget\r\n      if (m) {\r\n        this.engine.cleanNodes()\r\n          .beginUpdate(n)\r\n          .moveNode(n, m);\r\n        this._updateContainerHeight();\r\n        this._triggerChangeEvent();\r\n        this.engine.endUpdate();\r\n      }\r\n      if (changed) { // move will only update x,y,w,h so update the rest too\r\n        this._writeAttr(el, n);\r\n      }\r\n      if (ddChanged) {\r\n        this._prepareDragDropByNode(n);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).\r\n   * @param value margin value\r\n   */\r\n  public margin(value: numberOrString): GridStack {\r\n    let isMultiValue = (typeof value === 'string' && value.split(' ').length > 1);\r\n    // check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)\r\n    if (!isMultiValue) {\r\n      let data = Utils.parseHeight(value);\r\n      if (this.opts.marginUnit === data.unit && this.opts.margin === data.h) return;\r\n    }\r\n    // re-use existing margin handling\r\n    this.opts.margin = value;\r\n    this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = undefined;\r\n    this.initMargin();\r\n\r\n    this._updateStyles(true); // true = force re-create\r\n\r\n    return this;\r\n  }\r\n\r\n  /** returns current margin number value (undefined if 4 sides don't match) */\r\n  public getMargin(): number { return this.opts.margin as number; }\r\n\r\n  /**\r\n   * Returns true if the height of the grid will be less than the vertical\r\n   * constraint. Always returns true if grid doesn't have height constraint.\r\n   * @param node contains x,y,w,h,auto-position options\r\n   *\r\n   * @example\r\n   * if (grid.willItFit(newWidget)) {\r\n   *   grid.addWidget(newWidget);\r\n   * } else {\r\n   *   alert('Not enough free space to place the widget');\r\n   * }\r\n   */\r\n  public willItFit(node: GridStackWidget): boolean {\r\n    // support legacy call for now\r\n    if (arguments.length > 1) {\r\n      console.warn('gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 0,\r\n        w: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++] };\r\n      return this.willItFit(w);\r\n    }\r\n    return this.engine.willItFit(node);\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerChangeEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    let elements = this.engine.getDirtyNodes(true); // verify they really changed\r\n    if (elements && elements.length) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(elements);\r\n      }\r\n      this._triggerEvent('change', elements);\r\n    }\r\n    this.engine.saveInitial(); // we called, now reset initial values & dirty flags\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerAddEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.addedNodes && this.engine.addedNodes.length > 0) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(this.engine.addedNodes);\r\n      }\r\n      // prevent added nodes from also triggering 'change' event (which is called next)\r\n      this.engine.addedNodes.forEach(n => { delete n._dirty; });\r\n      this._triggerEvent('added', this.engine.addedNodes);\r\n      this.engine.addedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  public _triggerRemoveEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.removedNodes && this.engine.removedNodes.length > 0) {\r\n      this._triggerEvent('removed', this.engine.removedNodes);\r\n      this.engine.removedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerEvent(name: string, data?: GridStackNode[]): GridStack {\r\n    let event = data ? new CustomEvent(name, {bubbles: false, detail: data}) : new Event(name);\r\n    this.el.dispatchEvent(event);\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to delete the current dynamic style sheet used for our layout */\r\n  private _removeStylesheet(): GridStack {\r\n\r\n    if (this._styles) {\r\n      Utils.removeStylesheet(this._styles._id);\r\n      delete this._styles;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal updated/create the CSS styles for row based layout and initial margin setting */\r\n  private _updateStyles(forceUpdate = false, maxH?: number): GridStack {\r\n    // call to delete existing one if we change cellHeight / margin\r\n    if (forceUpdate) {\r\n      this._removeStylesheet();\r\n    }\r\n\r\n    this._updateContainerHeight();\r\n\r\n    // if user is telling us they will handle the CSS themselves by setting heights to 0. Do we need this opts really ??\r\n    if (this.opts.cellHeight === 0) {\r\n      return this;\r\n    }\r\n\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let cellHeightUnit = this.opts.cellHeightUnit;\r\n    let prefix = `.${this.opts._styleSheetClass} > .${this.opts.itemClass}`;\r\n\r\n    // create one as needed\r\n    if (!this._styles) {\r\n      let id = 'gridstack-style-' + (Math.random() * 100000).toFixed();\r\n      // insert style to parent (instead of 'head' by default) to support WebComponent\r\n      let styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode as HTMLElement;\r\n      this._styles = Utils.createStylesheet(id, styleLocation);\r\n      if (!this._styles) return this;\r\n      this._styles._id = id;\r\n      this._styles._max = 0;\r\n\r\n      // these are done once only\r\n      Utils.addCSSRule(this._styles, prefix, `min-height: ${cellHeight}${cellHeightUnit}`);\r\n      // content margins\r\n      let top: string = this.opts.marginTop + this.opts.marginUnit;\r\n      let bottom: string = this.opts.marginBottom + this.opts.marginUnit;\r\n      let right: string = this.opts.marginRight + this.opts.marginUnit;\r\n      let left: string = this.opts.marginLeft + this.opts.marginUnit;\r\n      let content = `${prefix} > .grid-stack-item-content`;\r\n      let placeholder = `.${this.opts._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;\r\n      Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      // resize handles offset (to match margin)\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);\r\n    }\r\n\r\n    // now update the height specific fields\r\n    maxH = maxH || this._styles._max;\r\n    if (maxH > this._styles._max) {\r\n      let getHeight = (rows: number): string => (cellHeight * rows) + cellHeightUnit;\r\n      for (let i = this._styles._max + 1; i <= maxH; i++) { // start at 1\r\n        let h: string = getHeight(i);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-y=\"${i-1}\"]`,        `top: ${getHeight(i-1)}`); // start at 0\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-h=\"${i}\"]`,     `height: ${h}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-min-h=\"${i}\"]`, `min-height: ${h}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-max-h=\"${i}\"]`, `max-height: ${h}`);\r\n      }\r\n      this._styles._max = maxH;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _updateContainerHeight(): GridStack {\r\n    if (!this.engine || this.engine.batchMode) return this;\r\n    let row = this.getRow() + this._extraDragRow; // checks for minRow already\r\n    // check for css min height\r\n    let cssMinHeight = parseInt(getComputedStyle(this.el)['min-height']);\r\n    if (cssMinHeight > 0) {\r\n      let minRow = Math.round(cssMinHeight / this.getCellHeight(true));\r\n      if (row < minRow) {\r\n        row = minRow;\r\n      }\r\n    }\r\n    this.el.setAttribute('gs-current-row', String(row));\r\n    if (row === 0) {\r\n      this.el.style.removeProperty('height');\r\n      return this;\r\n    }\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let unit = this.opts.cellHeightUnit;\r\n    if (!cellHeight) return this;\r\n    this.el.style.height = row * cellHeight + unit;\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _prepareElement(el: GridItemHTMLElement, triggerAddEvent = false, node?: GridStackNode): GridStack {\r\n    if (!node) {\r\n      el.classList.add(this.opts.itemClass);\r\n      node = this._readAttr(el);\r\n    }\r\n    el.gridstackNode = node;\r\n    node.el = el;\r\n    node.grid = this;\r\n    let copy = {...node};\r\n    node = this.engine.addNode(node, triggerAddEvent);\r\n    // write node attr back in case there was collision or we have to fix bad values during addNode()\r\n    if (!Utils.same(node, copy)) {\r\n      this._writeAttr(el, node);\r\n    }\r\n    this._prepareDragDropByNode(node);\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write position x,y,w,h attributes back to element */\r\n  private _writePosAttr(el: HTMLElement, n: GridStackPosition): GridStack {\r\n    if (n.x !== undefined && n.x !== null) { el.setAttribute('gs-x', String(n.x)); }\r\n    if (n.y !== undefined && n.y !== null) { el.setAttribute('gs-y', String(n.y)); }\r\n    if (n.w) { el.setAttribute('gs-w', String(n.w)); }\r\n    if (n.h) { el.setAttribute('gs-h', String(n.h)); }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write any default attributes back to element */\r\n  private _writeAttr(el: HTMLElement, node: GridStackWidget): GridStack {\r\n    if (!node) return this;\r\n    this._writePosAttr(el, node);\r\n\r\n    let attrs /*: GridStackWidget but strings */ = { // remaining attributes\r\n      autoPosition: 'gs-auto-position',\r\n      minW: 'gs-min-w',\r\n      minH: 'gs-min-h',\r\n      maxW: 'gs-max-w',\r\n      maxH: 'gs-max-h',\r\n      noResize: 'gs-no-resize',\r\n      noMove: 'gs-no-move',\r\n      locked: 'gs-locked',\r\n      id: 'gs-id',\r\n      resizeHandles: 'gs-resize-handles'\r\n    };\r\n    for (const key in attrs) {\r\n      if (node[key]) { // 0 is valid for x,y only but done above already and not in list anyway\r\n        el.setAttribute(attrs[key], String(node[key]));\r\n      } else {\r\n        el.removeAttribute(attrs[key]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to read any default attributes from element */\r\n  private _readAttr(el: HTMLElement): GridStackWidget {\r\n    let node: GridStackNode = {};\r\n    node.x = Utils.toNumber(el.getAttribute('gs-x'));\r\n    node.y = Utils.toNumber(el.getAttribute('gs-y'));\r\n    node.w = Utils.toNumber(el.getAttribute('gs-w'));\r\n    node.h = Utils.toNumber(el.getAttribute('gs-h'));\r\n    node.maxW = Utils.toNumber(el.getAttribute('gs-max-w'));\r\n    node.minW = Utils.toNumber(el.getAttribute('gs-min-w'));\r\n    node.maxH = Utils.toNumber(el.getAttribute('gs-max-h'));\r\n    node.minH = Utils.toNumber(el.getAttribute('gs-min-h'));\r\n    node.autoPosition = Utils.toBool(el.getAttribute('gs-auto-position'));\r\n    node.noResize = Utils.toBool(el.getAttribute('gs-no-resize'));\r\n    node.noMove = Utils.toBool(el.getAttribute('gs-no-move'));\r\n    node.locked = Utils.toBool(el.getAttribute('gs-locked'));\r\n    node.resizeHandles = el.getAttribute('gs-resize-handles');\r\n    node.id = el.getAttribute('gs-id');\r\n\r\n    // remove any key not found (null or false which is default)\r\n    for (const key in node) {\r\n      if (!node.hasOwnProperty(key)) return;\r\n      if (!node[key] && node[key] !== 0) { // 0 can be valid value (x,y only really)\r\n        delete node[key];\r\n      }\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  /** @internal */\r\n  private _setStaticClass(): GridStack {\r\n    let classes = ['grid-stack-static'];\r\n\r\n    if (this.opts.staticGrid) {\r\n      this.el.classList.add(...classes);\r\n      this.el.setAttribute('gs-static', 'true');\r\n    } else {\r\n      this.el.classList.remove(...classes);\r\n      this.el.removeAttribute('gs-static');\r\n\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * called when we are being resized by the window - check if the one Column Mode needs to be turned on/off\r\n   * and remember the prev columns we used, as well as check for auto cell height (square)\r\n   */\r\n  public onParentResize(): GridStack {\r\n    if (!this.el || !this.el.clientWidth) return; // return if we're gone or no size yet (will get called again)\r\n    let oneColumn = !this.opts.disableOneColumnMode && this.el.clientWidth <= this.opts.minWidth;\r\n    let changedOneColumn = false;\r\n\r\n    if ((this.opts.column === 1) !== oneColumn) {\r\n      changedOneColumn = true;\r\n      if (this.opts.animate) { this.setAnimation(false); } // 1 <-> 12 is too radical, turn off animation\r\n      this.column(oneColumn ? 1 : this._prevColumn);\r\n      if (this.opts.animate) { this.setAnimation(true); }\r\n    }\r\n\r\n    // make the cells content square again\r\n    if (this._isAutoCellHeight) {\r\n      if (!changedOneColumn && this.opts.cellHeightThrottle) {\r\n        if (!this._cellHeightThrottle) {\r\n          this._cellHeightThrottle = Utils.throttle(() => this.cellHeight(), this.opts.cellHeightThrottle);\r\n        }\r\n        this._cellHeightThrottle();\r\n      } else {\r\n        // immediate update if we've changed to/from oneColumn or have no threshold\r\n        this.cellHeight();\r\n      }\r\n    }\r\n\r\n    // finally update any nested grids\r\n    this.engine.nodes.forEach(n => {\r\n      if (n.subGrid) {(n.subGrid as GridStack).onParentResize()}\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /** add or remove the window size event handler */\r\n  private _updateWindowResizeEvent(forceRemove = false): GridStack {\r\n    // only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting oneColumn (i.e. doing work)\r\n    const workTodo = (this._isAutoCellHeight || !this.opts.disableOneColumnMode) && !this.opts._isNested;\r\n\r\n    if (!forceRemove && workTodo && !this._windowResizeBind) {\r\n      this._windowResizeBind = this.onParentResize.bind(this); // so we can properly remove later\r\n      window.addEventListener('resize', this._windowResizeBind);\r\n    } else if ((forceRemove || !workTodo) && this._windowResizeBind) {\r\n      window.removeEventListener('resize', this._windowResizeBind);\r\n      delete this._windowResizeBind; // remove link to us so we can free\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal convert a potential selector into actual element */\r\n  public static getElement(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement { return Utils.getElement(els) }\r\n  /** @internal */\r\n  public static getElements(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement[] { return Utils.getElements(els) }\r\n  /** @internal */\r\n  public static getGridElement(els: GridStackElement): GridHTMLElement { return GridStack.getElement(els) }\r\n  /** @internal */\r\n  public static getGridElements(els: string): GridHTMLElement[] { return Utils.getElements(els) }\r\n\r\n  /** @internal initialize margin top/bottom/left/right and units */\r\n  private initMargin(): GridStack {\r\n\r\n    let data: HeightData;\r\n    let margin = 0;\r\n\r\n    // support passing multiple values like CSS (ex: '5px 10px 0 20px')\r\n    let margins: string[] = [];\r\n    if (typeof this.opts.margin === 'string') {\r\n      margins = this.opts.margin.split(' ')\r\n    }\r\n    if (margins.length === 2) { // top/bot, left/right like CSS\r\n      this.opts.marginTop = this.opts.marginBottom = margins[0];\r\n      this.opts.marginLeft = this.opts.marginRight = margins[1];\r\n    } else if (margins.length === 4) { // Clockwise like CSS\r\n      this.opts.marginTop = margins[0];\r\n      this.opts.marginRight = margins[1];\r\n      this.opts.marginBottom = margins[2];\r\n      this.opts.marginLeft = margins[3];\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.margin);\r\n      this.opts.marginUnit = data.unit;\r\n      margin = this.opts.margin = data.h;\r\n    }\r\n\r\n    // see if top/bottom/left/right need to be set as well\r\n    if (this.opts.marginTop === undefined) {\r\n      this.opts.marginTop = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginTop);\r\n      this.opts.marginTop = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginBottom === undefined) {\r\n      this.opts.marginBottom = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginBottom);\r\n      this.opts.marginBottom = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginRight === undefined) {\r\n      this.opts.marginRight = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginRight);\r\n      this.opts.marginRight = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginLeft === undefined) {\r\n      this.opts.marginLeft = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginLeft);\r\n      this.opts.marginLeft = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n    this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...\r\n    if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {\r\n      this.opts.margin = this.opts.marginTop; // makes it easier to check for no-ops in setMargin()\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /*\r\n   * drag&drop empty stubs that will be implemented in gridstack-dd.ts for non static grid\r\n   * so we don't incur the load unless needed.\r\n   * NOTE: had to make those methods public in order to define them else as\r\n   *   GridStack.prototype._setupAcceptWidget = function()\r\n   * maybe there is a better way ????\r\n   */\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n\r\n  /**\r\n   * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n   * Called during GridStack.init() as options, but can also be called directly (last param are cached) in case the toolbar\r\n   * is dynamically create and needs to change later.\r\n   * @param dragIn string selector (ex: '.sidebar .grid-stack-item')\r\n   * @param dragInOptions options - see DDDragInOpt. (default: {revert: 'invalid', handle: '.grid-stack-item-content', scroll: false, appendTo: 'body'}\r\n   **/\r\n  public static setupDragIn(dragIn?: string, dragInOptions?: DDDragInOpt): void { /* implemented in gridstack-dd.ts */ }\r\n\r\n  /**\r\n   * Enables/Disables dragging by the user of specific grid element. If you want all items, and have it affect future items, use enableMove() instead. No-op for static grids.\r\n   * IF you are looking to prevent an item from moving (due to being pushed around by another during collision) use locked property instead.\r\n   * @param els widget or selector to modify.\r\n   * @param val if true widget will be draggable.\r\n   */\r\n  public movable(els: GridStackElement, val: boolean): GridStack { return this }\r\n  /**\r\n   * Enables/Disables user resizing of specific grid element. If you want all items, and have it affect future items, use enableResize() instead. No-op for static grids.\r\n   * @param els  widget or selector to modify\r\n   * @param val  if true widget will be resizable.\r\n   */\r\n  public resizable(els: GridStackElement, val: boolean): GridStack { return this }\r\n  /**\r\n   * Temporarily disables widgets moving/resizing.\r\n   * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n   * Note: no-op for static grid\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(false);\r\n   *  grid.enableResize(false);\r\n   */\r\n  public disable(): GridStack { return this }\r\n  /**\r\n   * Re-enables widgets moving/resizing - see disable().\r\n   * Note: no-op for static grid.\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(true);\r\n   *  grid.enableResize(true);\r\n   */\r\n  public enable(): GridStack { return this }\r\n  /**\r\n   * Enables/disables widget moving. No-op for static grids.\r\n   */\r\n  public enableMove(doEnable: boolean): GridStack { return this }\r\n  /**\r\n   * Enables/disables widget resizing. No-op for static grids.\r\n   */\r\n  public enableResize(doEnable: boolean): GridStack { return this }\r\n\r\n  /** @internal called to add drag over support to support widgets */\r\n  public _setupAcceptWidget(): GridStack { return this }\r\n  /** @internal called to setup a trash drop zone if the user specifies it */\r\n  public _setupRemoveDrop(): GridStack { return this }\r\n  /** @internal prepares the element for drag&drop **/\r\n  public _prepareDragDropByNode(node: GridStackNode): GridStack { return this }\r\n  /** @internal handles actual drag/resize start **/\r\n  public _onStartMoving(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void { return }\r\n  /** @internal handles actual drag/resize **/\r\n  public _dragOrResize(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void { return }\r\n  /** @internal called when a node leaves our area (mouse out or shape outside) **/\r\n  public _leave(el: GridItemHTMLElement, helper?: GridItemHTMLElement): void { return }\r\n}\r\n","/**\n * dd-base-impl.ts 4.4.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nexport type EventCallback = (event: Event) => boolean|void;\nexport abstract class DDBaseImplement {\n  /** returns the enable state, but you have to call enable()/disable() to change (as other things need to happen) */\n  public get disabled(): boolean   { return this._disabled; }\n\n  /** @internal */\n  private _disabled = false;\n  /** @internal */\n  private _eventRegister: {\n    [eventName: string]: EventCallback;\n  } = {};\n\n  public on(event: string, callback: EventCallback): void {\n    this._eventRegister[event] = callback;\n  }\n\n  public off(event: string): void {\n    delete this._eventRegister[event];\n  }\n\n  public enable(): void {\n    this._disabled = false;\n  }\n\n  public disable(): void {\n    this._disabled = true;\n  }\n\n  public destroy(): void {\n    delete this._eventRegister;\n  }\n\n  public triggerEvent(eventName: string, event: Event): boolean|void {\n    if (!this.disabled && this._eventRegister && this._eventRegister[eventName])\n      return this._eventRegister[eventName](event);\n  }\n}\n\nexport interface HTMLElementExtendOpt<T> {\n  el: HTMLElement;\n  option: T;\n  updateOption(T): DDBaseImplement;\n}\n","/**\n * dd-draggable.ts 4.4.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\nimport { DDUtils } from './dd-utils';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { GridItemHTMLElement, DDUIData } from '../types';\n\n// TODO: merge with DDDragOpt ?\nexport interface DDDraggableOpt {\n  appendTo?: string | HTMLElement;\n  containment?: string | HTMLElement; // TODO: not implemented yet\n  handle?: string;\n  revert?: string | boolean | unknown; // TODO: not implemented yet\n  scroll?: boolean; // nature support by HTML5 drag drop, can't be switch to off actually\n  helper?: string | HTMLElement | ((event: Event) => HTMLElement);\n  basePosition?: 'fixed' | 'absolute';\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  drag?: (event: Event, ui: DDUIData) => void;\n}\n\ninterface DragOffset {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n  offsetLeft: number;\n  offsetTop: number;\n}\n\nexport class DDDraggable extends DDBaseImplement implements HTMLElementExtendOpt<DDDraggableOpt> {\n  public el: HTMLElement;\n  public option: DDDraggableOpt;\n  public helper: HTMLElement; // used by GridStackDDNative\n\n  /** @internal */\n  private dragOffset: DragOffset;\n  /** @internal */\n  private dragElementOriginStyle: Array<string>;\n  /** @internal */\n  private dragFollowTimer: number;\n  /** @internal */\n  private dragEl: HTMLElement;\n  /** @internal */\n  private dragging = false;\n  /** @internal */\n  private paintTimer: number;\n  /** @internal */\n  private parentOriginStylePosition: string;\n  /** @internal */\n  private helperContainment: HTMLElement;\n  /** @internal */\n  private static basePosition: 'fixed' | 'absolute' = 'absolute';\n  /** @internal #1541 can't have {passive: true} on Safari as otherwise it reverts animate back to old location on drop */\n  private static dragEventListenerOption = true; // DDUtils.isEventSupportPassiveOption ? { capture: true, passive: true } : true;\n  /** @internal */\n  private static originStyleProp = ['transition', 'pointerEvents', 'position',\n    'left', 'top', 'opacity', 'zIndex', 'width', 'height', 'willChange'];\n\n  constructor(el: HTMLElement, option: DDDraggableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = option;\n    // get the element that is actually supposed to be dragged by\n    let className = option.handle.substring(1);\n    this.dragEl = el.classList.contains(className) ? el : el.querySelector(option.handle) || el;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._dragStart = this._dragStart.bind(this);\n    this._drag = this._drag.bind(this);\n    this._dragEnd = this._dragEnd.bind(this);\n    this.enable();\n  }\n\n  public on(event: 'drag' | 'dragstart' | 'dragstop', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'drag' | 'dragstart' | 'dragstop'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    super.enable();\n    this.dragEl.draggable = true;\n    this.dragEl.addEventListener('dragstart', this._dragStart);\n    this.el.classList.remove('ui-draggable-disabled');\n    this.el.classList.add('ui-draggable');\n  }\n\n  public disable(forDestroy = false): void {\n    super.disable();\n    this.dragEl.removeAttribute('draggable');\n    this.dragEl.removeEventListener('dragstart', this._dragStart);\n    this.el.classList.remove('ui-draggable');\n    if (!forDestroy) this.el.classList.add('ui-draggable-disabled');\n  }\n\n  public destroy(): void {\n    if (this.dragging) {\n      // Destroy while dragging should remove dragend listener and manually trigger\n      // dragend, otherwise dragEnd can't perform dragstop because eventRegistry is\n      // destroyed.\n      this._dragEnd({} as DragEvent);\n    }\n    this.disable(true);\n    delete this.el;\n    delete this.helper;\n    delete this.option;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDraggableOpt): DDDraggable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    return this;\n  }\n\n  /** @internal */\n  private _dragStart(event: DragEvent): void {\n    DDManager.dragElement = this;\n    this.helper = this._createHelper(event);\n    this._setupHelperContainmentStyle();\n    this.dragOffset = this._getDragOffset(event, this.el, this.helperContainment);\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'dragstart' });\n    if (this.helper !== this.el) {\n      this._setupDragFollowNodeNotifyStart(ev);\n      // immediately set external helper initial position to avoid flickering behavior and unnecessary looping in `_packNodes()`\n      this._dragFollow(event);\n    } else {\n      this.dragFollowTimer = window.setTimeout(() => {\n        delete this.dragFollowTimer;\n        this._setupDragFollowNodeNotifyStart(ev);\n      }, 0);\n    }\n    this._cancelDragGhost(event);\n  }\n\n  /** @internal */\n  private _setupDragFollowNodeNotifyStart(ev: Event): DDDraggable {\n    this._setupHelperStyle();\n    document.addEventListener('dragover', this._drag, DDDraggable.dragEventListenerOption);\n    this.dragEl.addEventListener('dragend', this._dragEnd);\n    if (this.option.start) {\n      this.option.start(ev, this.ui());\n    }\n    this.dragging = true;\n    this.helper.classList.add('ui-draggable-dragging');\n    this.triggerEvent('dragstart', ev);\n    return this;\n  }\n\n  /** @internal */\n  private _drag(event: DragEvent): void {\n    // Safari: prevent default to allow drop to happen instead of reverting back (with animation) and delaying dragend #1541\n    // https://stackoverflow.com/questions/61760755/how-to-fire-dragend-event-immediately\n    event.preventDefault();\n    this._dragFollow(event);\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'drag' });\n    if (this.option.drag) {\n      this.option.drag(ev, this.ui());\n    }\n    this.triggerEvent('drag', ev);\n  }\n\n  /** @internal */\n  private _dragEnd(event: DragEvent): void {\n    if (this.dragFollowTimer) {\n      clearTimeout(this.dragFollowTimer);\n      delete this.dragFollowTimer;\n      return;\n    } else {\n      if (this.paintTimer) {\n        cancelAnimationFrame(this.paintTimer);\n      }\n      document.removeEventListener('dragover', this._drag, DDDraggable.dragEventListenerOption);\n      this.dragEl.removeEventListener('dragend', this._dragEnd);\n    }\n    this.dragging = false;\n    this.helper.classList.remove('ui-draggable-dragging');\n    this.helperContainment.style.position = this.parentOriginStylePosition || null;\n    if (this.helper === this.el) {\n      this._removeHelperStyle();\n    } else {\n      this.helper.remove();\n    }\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'dragstop' });\n    if (this.option.stop) {\n      this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\n    }\n    this.triggerEvent('dragstop', ev);\n    delete DDManager.dragElement;\n    delete this.helper;\n  }\n\n  /** @internal create a clone copy (or user defined method) of the original drag item if set */\n  private _createHelper(event: DragEvent): HTMLElement {\n    let helper = this.el;\n    if (typeof this.option.helper === 'function') {\n      helper = this.option.helper(event);\n    } else if (this.option.helper === 'clone') {\n      helper = DDUtils.clone(this.el);\n    }\n    if (!document.body.contains(helper)) {\n      DDUtils.appendTo(helper, this.option.appendTo === 'parent' ? this.el.parentNode : this.option.appendTo);\n    }\n    if (helper === this.el) {\n      this.dragElementOriginStyle = DDDraggable.originStyleProp.map(prop => this.el.style[prop]);\n    }\n    return helper;\n  }\n\n  /** @internal */\n  private _setupHelperStyle(): DDDraggable {\n    this.helper.style.pointerEvents = 'none';\n    this.helper.style.width = this.dragOffset.width + 'px';\n    this.helper.style.height = this.dragOffset.height + 'px';\n    this.helper.style.willChange = 'left, top';\n    this.helper.style.transition = 'none'; // show up instantly\n    this.helper.style.position = this.option.basePosition || DDDraggable.basePosition;\n    this.helper.style.zIndex = '1000';\n    setTimeout(() => {\n      if (this.helper) {\n        this.helper.style.transition = null; // recover animation\n      }\n    }, 0);\n    return this;\n  }\n\n  /** @internal */\n  private _removeHelperStyle(): DDDraggable {\n    // don't bother restoring styles if we're gonna remove anyway...\n    let node = this.helper ? (this.helper as GridItemHTMLElement).gridstackNode : undefined;\n    if (!node || !node._isAboutToRemove) {\n      DDDraggable.originStyleProp.forEach(prop => {\n        this.helper.style[prop] = this.dragElementOriginStyle[prop] || null;\n      });\n    }\n    delete this.dragElementOriginStyle;\n    return this;\n  }\n\n  /** @internal */\n  private _dragFollow(event: DragEvent): void {\n    if (this.paintTimer) {\n      cancelAnimationFrame(this.paintTimer);\n    }\n    this.paintTimer = requestAnimationFrame(() => {\n      delete this.paintTimer;\n      const offset = this.dragOffset;\n      let containmentRect = { left: 0, top: 0 };\n      if (this.helper.style.position === 'absolute') {\n        const { left, top } = this.helperContainment.getBoundingClientRect();\n        containmentRect = { left, top };\n      }\n      this.helper.style.left = event.clientX + offset.offsetLeft - containmentRect.left + 'px';\n      this.helper.style.top = event.clientY + offset.offsetTop - containmentRect.top + 'px';\n    });\n  }\n\n  /** @internal */\n  private _setupHelperContainmentStyle(): DDDraggable {\n    this.helperContainment = this.helper.parentElement;\n    if (this.option.basePosition !== 'fixed') {\n      this.parentOriginStylePosition = this.helperContainment.style.position;\n      if (window.getComputedStyle(this.helperContainment).position.match(/static/)) {\n        this.helperContainment.style.position = 'relative';\n      }\n    }\n    return this;\n  }\n\n  /** @internal prevent the default gost image to be created (which has wrongas we move the helper/element instead\n   * (legacy jquery UI code updates the top/left of the item).\n   * TODO: maybe use mouse event instead of HTML5 drag as we have to work around it anyway, or change code to not update\n   * the actual grid-item but move the gost image around (and special case jq version) ?\n   **/\n  private _cancelDragGhost(e: DragEvent): DDDraggable {\n    /* doesn't seem to do anything...\n    let t = e.dataTransfer;\n    t.effectAllowed = 'none';\n    t.dropEffect = 'none';\n    t.setData('text', '');\n    */\n\n    // NOTE: according to spec (and required by Safari see #1540) the image has to be visible in the browser (in dom and not hidden) so make it a 1px div\n    let img = document.createElement('div');\n    img.style.width = '1px';\n    img.style.height = '1px';\n    img.style.position = 'fixed'; // prevent unwanted scrollbar\n    document.body.appendChild(img);\n    e.dataTransfer.setDragImage(img, 0, 0);\n    setTimeout(() => document.body.removeChild(img)); // nuke once drag had a chance to grab this 'image'\n\n    e.stopPropagation();\n    return this;\n  }\n\n  /** @internal */\n  private _getDragOffset(event: DragEvent, el: HTMLElement, parent: HTMLElement): DragOffset {\n\n    // in case ancestor has transform/perspective css properties that change the viewpoint\n    let xformOffsetX = 0;\n    let xformOffsetY = 0;\n    if (parent) {\n      const testEl = document.createElement('div');\n      DDUtils.addElStyles(testEl, {\n        opacity: '0',\n        position: 'fixed',\n        top: 0 + 'px',\n        left: 0 + 'px',\n        width: '1px',\n        height: '1px',\n        zIndex: '-999999',\n      });\n      parent.appendChild(testEl);\n      const testElPosition = testEl.getBoundingClientRect();\n      parent.removeChild(testEl);\n      xformOffsetX = testElPosition.left;\n      xformOffsetY = testElPosition.top;\n      // TODO: scale ?\n    }\n\n    const targetOffset = el.getBoundingClientRect();\n    return {\n      left: targetOffset.left,\n      top: targetOffset.top,\n      offsetLeft: - event.clientX + targetOffset.left - xformOffsetX,\n      offsetTop: - event.clientY + targetOffset.top - xformOffsetY,\n      width: targetOffset.width,\n      height: targetOffset.height\n    };\n  }\n\n  /** @internal TODO: set to public as called by DDDroppable! */\n  public ui = (): DDUIData => {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const offset = this.helper.getBoundingClientRect();\n    return {\n      position: { //Current CSS position of the helper as { top, left } object\n        top: offset.top - containmentRect.top,\n        left: offset.left - containmentRect.left\n      }\n      /* not used by GridStack for now...\n      helper: [this.helper], //The object arr representing the helper that's being dragged.\n      offset: { top: offset.top, left: offset.left } // Current offset position of the helper as { top, left } object.\n      */\n    };\n  }\n}\n\n\n","/**\n * dd-droppable.ts 4.4.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\nimport { DDManager } from './dd-manager';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { DDUtils } from './dd-utils';\n\nexport interface DDDroppableOpt {\n  accept?: string | ((el: HTMLElement) => boolean);\n  drop?: (event: DragEvent, ui) => void;\n  over?: (event: DragEvent, ui) => void;\n  out?: (event: DragEvent, ui) => void;\n}\n\nexport class DDDroppable extends DDBaseImplement implements HTMLElementExtendOpt<DDDroppableOpt> {\n\n  public accept: (el: HTMLElement) => boolean;\n  public el: HTMLElement;\n  public option: DDDroppableOpt;\n\n  /** @internal */\n  private moving: boolean;\n\n  constructor(el: HTMLElement, opts: DDDroppableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._dragEnter = this._dragEnter.bind(this);\n    this._dragOver = this._dragOver.bind(this);\n    this._dragLeave = this._dragLeave.bind(this);\n    this._drop = this._drop.bind(this);\n\n    this.el.classList.add('ui-droppable');\n    this.el.addEventListener('dragenter', this._dragEnter);\n    this._setupAccept();\n  }\n\n  public on(event: 'drop' | 'dropover' | 'dropout', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'drop' | 'dropover' | 'dropout'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (!this.disabled) return;\n    super.enable();\n    this.el.classList.remove('ui-droppable-disabled');\n    this.el.addEventListener('dragenter', this._dragEnter);\n  }\n\n  public disable(forDestroy=false): void {\n    if (this.disabled) return;\n    super.disable();\n    if (!forDestroy) this.el.classList.add('ui-droppable-disabled');\n    this.el.removeEventListener('dragenter', this._dragEnter);\n  }\n\n  public destroy(): void {\n    if (this.moving) {\n      this._removeLeaveCallbacks();\n    } \n    this.disable(true);\n    this.el.classList.remove('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    delete this.moving;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDroppableOpt): DDDroppable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    this._setupAccept();\n    return this;\n  }\n\n  /** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */\n  private _dragEnter(event: DragEvent): void {\n    if (!this._canDrop()) return;\n    event.preventDefault();\n\n    if (this.moving) return; // ignore multiple 'dragenter' as we go over existing items\n    this.moving = true;\n\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'dropover' });\n    if (this.option.over) {\n      this.option.over(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropover', ev);\n    this.el.addEventListener('dragover', this._dragOver);\n    this.el.addEventListener('drop', this._drop);\n    this.el.addEventListener('dragleave', this._dragLeave);\n    this.el.classList.add('ui-droppable-over');\n  }\n\n  /** @internal called when an moving to drop item is being dragged over - do nothing but eat the event */\n  private _dragOver(event: DragEvent): void {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** @internal called when the item is leaving our area, stop tracking if we had moving item */\n  private _dragLeave(event: DragEvent): void {\n\n    // ignore leave events on our children (get when starting to drag our items)\n    // Note: Safari Mac has null relatedTarget which causes #1684 so check if DragEvent is inside the grid instead\n    if (!event.relatedTarget) {\n      const { bottom, left, right, top } = this.el.getBoundingClientRect();\n      if (event.x < right && event.x > left && event.y < bottom && event.y > top) return;\n    } else if (this.el.contains(event.relatedTarget as HTMLElement)) return;\n\n    this._removeLeaveCallbacks();\n    if (this.moving) {\n      event.preventDefault();\n      const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'dropout' });\n      if (this.option.out) {\n        this.option.out(ev, this._ui(DDManager.dragElement))\n      }\n      this.triggerEvent('dropout', ev);\n    }\n    delete this.moving;\n  }\n\n  /** @internal item is being dropped on us - call the client drop event */\n  private _drop(event: DragEvent): void {\n    if (!this.moving) return; // should not have received event...\n    event.preventDefault();\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'drop' });\n    if (this.option.drop) {\n      this.option.drop(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('drop', ev);\n    this._removeLeaveCallbacks();\n    delete this.moving;\n  }\n\n  /** @internal called to remove callbacks when leaving or dropping */\n  private _removeLeaveCallbacks() {\n    this.el.removeEventListener('dragleave', this._dragLeave);\n    this.el.classList.remove('ui-droppable-over');\n    if (this.moving) {\n      this.el.removeEventListener('dragover', this._dragOver);\n      this.el.removeEventListener('drop', this._drop);\n    }\n    // Note: this.moving is reset by callee of this routine to control the flow\n  }\n\n  /** @internal */\n  private _canDrop(): boolean {\n    return DDManager.dragElement && (!this.accept || this.accept(DDManager.dragElement.el));\n  }\n\n  /** @internal */\n  private _setupAccept(): DDDroppable {\n    if (this.option.accept && typeof this.option.accept === 'string') {\n      this.accept = (el: HTMLElement) => {\n        return el.matches(this.option.accept as string)\n      }\n    } else {\n      this.accept = this.option.accept as ((el: HTMLElement) => boolean);\n    }\n    return this;\n  }\n\n  /** @internal */\n  private _ui(drag: DDDraggable) {\n    return {\n      draggable: drag.el,\n      ...drag.ui()\n    };\n  }\n}\n\n","/**\n * dd-elements.ts 4.4.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizable, DDResizableOpt } from './dd-resizable';\nimport { GridItemHTMLElement } from './../types';\nimport { DDDraggable, DDDraggableOpt } from './dd-draggable';\nimport { DDDroppable, DDDroppableOpt } from './dd-droppable';\n\nexport interface DDElementHost extends GridItemHTMLElement {\n  ddElement?: DDElement;\n}\n\nexport class DDElement {\n\n  static init(el: DDElementHost): DDElement {\n    if (!el.ddElement) { el.ddElement = new DDElement(el); }\n    return el.ddElement;\n  }\n\n  public el: DDElementHost;\n  public ddDraggable?: DDDraggable;\n  public ddDroppable?: DDDroppable;\n  public ddResizable?: DDResizable;\n\n  constructor(el: DDElementHost) {\n    this.el = el;\n  }\n\n  public on(eventName: string, callback: (event: MouseEvent) => void): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.on(eventName as 'drag' | 'dragstart' | 'dragstop', callback);\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.on(eventName as 'drop' | 'dropover' | 'dropout', callback);\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.on(eventName as 'resizestart' | 'resize' | 'resizestop', callback);\n    }\n    return this;\n  }\n\n  public off(eventName: string): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.off(eventName as 'drag' | 'dragstart' | 'dragstop');\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.off(eventName as 'drop' | 'dropover' | 'dropout');\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.off(eventName as 'resizestart' | 'resize' | 'resizestop');\n    }\n    return this;\n  }\n\n  public setupDraggable(opts: DDDraggableOpt): DDElement {\n    if (!this.ddDraggable) {\n      this.ddDraggable = new DDDraggable(this.el, opts);\n    } else {\n      this.ddDraggable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDraggable(): DDElement {\n    if (this.ddDraggable) {\n      this.ddDraggable.destroy();\n      delete this.ddDraggable;\n    }\n    return this;\n  }\n\n  public setupResizable(opts: DDResizableOpt): DDElement {\n    if (!this.ddResizable) {\n      this.ddResizable = new DDResizable(this.el, opts);\n    } else {\n      this.ddResizable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanResizable(): DDElement {\n    if (this.ddResizable) {\n      this.ddResizable.destroy();\n      delete this.ddResizable;\n    }\n    return this;\n  }\n\n  public setupDroppable(opts: DDDroppableOpt): DDElement {\n    if (!this.ddDroppable) {\n      this.ddDroppable = new DDDroppable(this.el, opts);\n    } else {\n      this.ddDroppable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDroppable(): DDElement {\n    if (this.ddDroppable) {\n      this.ddDroppable.destroy();\n      delete this.ddDroppable;\n    }\n    return this;\n  }\n}\n","/**\n * dd-manager.ts 4.4.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\n\nexport class DDManager {\n  static dragElement: DDDraggable;\n}\n","/**\n * dd-resizable-handle.ts 4.4.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nexport interface DDResizableHandleOpt {\n  start?: (event) => void;\n  move?: (event) => void;\n  stop?: (event) => void;\n}\n\nexport class DDResizableHandle {\n  /** @internal */\n  private el: HTMLElement;\n  /** @internal */\n  private host: HTMLElement;\n  /** @internal */\n  private option: DDResizableHandleOpt;\n  /** @internal */\n  private dir: string;\n  /** @internal true after we've moved enough pixels to start a resize */\n  private moving = false;\n  /** @internal */\n  private mouseDownEvent: MouseEvent;\n  /** @internal */\n  private static prefix = 'ui-resizable-';\n\n  constructor(host: HTMLElement, direction: string, option: DDResizableHandleOpt) {\n    this.host = host;\n    this.dir = direction;\n    this.option = option;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n\n    this._init();\n  }\n\n  /** @internal */\n  private _init(): DDResizableHandle {\n    const el = document.createElement('div');\n    el.classList.add('ui-resizable-handle');\n    el.classList.add(`${DDResizableHandle.prefix}${this.dir}`);\n    el.style.zIndex = '100';\n    el.style.userSelect = 'none';\n    this.el = el;\n    this.host.appendChild(this.el);\n    this.el.addEventListener('mousedown', this._mouseDown);\n    return this;\n  }\n\n  /** call this when resize handle needs to be removed and cleaned up */\n  public destroy(): DDResizableHandle {\n    if (this.moving) this._mouseUp(this.mouseDownEvent);\n    this.el.removeEventListener('mousedown', this._mouseDown);\n    this.host.removeChild(this.el);\n    delete this.el;\n    delete this.host;\n    return this;\n  }\n\n  /** @internal called on mouse down on us: capture move on the entire document (mouse might not stay on us) until we release the mouse */\n  private _mouseDown(e: MouseEvent): void {\n    e.preventDefault();\n    this.mouseDownEvent = e;\n    document.addEventListener('mousemove', this._mouseMove, true); // capture, not bubble\n    document.addEventListener('mouseup', this._mouseUp);\n  }\n\n  /** @internal */\n  private _mouseMove(e: MouseEvent): void {\n    let s = this.mouseDownEvent;\n    // don't start unless we've moved at least 3 pixels\n    if (!this.moving && Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 2) {\n      this.moving = true;\n      this._triggerEvent('start', this.mouseDownEvent);\n    } else if (this.moving) {\n      this._triggerEvent('move', e);\n    }\n  }\n\n  /** @internal */\n  private _mouseUp(e: MouseEvent): void {\n    if (this.moving) {\n      this._triggerEvent('stop', e);\n    }\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp);\n    delete this.moving;\n    delete this.mouseDownEvent;\n  }\n\n  /** @internal */\n  private _triggerEvent(name: string, event: MouseEvent): DDResizableHandle {\n    if (this.option[name]) this.option[name](event);\n    return this;\n  }\n}\n","/**\n * dd-resizable.ts 4.4.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizableHandle } from './dd-resizable-handle';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { DDUtils } from './dd-utils';\nimport { Utils } from '../utils';\nimport { DDUIData, Rect, Size } from '../types';\n\n// TODO: merge with DDDragOpt\nexport interface DDResizableOpt {\n  autoHide?: boolean;\n  handles?: string;\n  maxHeight?: number;\n  maxWidth?: number;\n  minHeight?: number;\n  minWidth?: number;\n  basePosition?: 'fixed' | 'absolute';\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  resize?: (event: Event, ui: DDUIData) => void;\n}\n\nexport class DDResizable extends DDBaseImplement implements HTMLElementExtendOpt<DDResizableOpt> {\n\n  // have to be public else complains for HTMLElementExtendOpt ?\n  public el: HTMLElement;\n  public option: DDResizableOpt;\n\n  /** @internal */\n  private handlers: DDResizableHandle[];\n  /** @internal */\n  private originalRect: Rect;\n  /** @internal */\n  private temporalRect: Rect;\n  /** @internal */\n  private scrollY: number;\n  /** @internal */\n  private scrolled: number;\n  /** @internal */\n  private scrollEl: HTMLElement;\n  /** @internal */\n  private startEvent: MouseEvent;\n  /** @internal value saved in the same order as _originStyleProp[] */\n  private elOriginStyleVal: string[];\n  /** @internal */\n  private parentOriginStylePosition: string;\n  /** @internal */\n  private static _originStyleProp = ['width', 'height', 'position', 'left', 'top', 'opacity', 'zIndex'];\n\n  constructor(el: HTMLElement, opts: DDResizableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    this.enable();\n    this._setupAutoHide();\n    this._setupHandlers();\n  }\n\n  public on(event: 'resizestart' | 'resize' | 'resizestop', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'resizestart' | 'resize' | 'resizestop'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    super.enable();\n    this.el.classList.add('ui-resizable');\n    this.el.classList.remove('ui-resizable-disabled');\n  }\n\n  public disable(): void {\n    super.disable();\n    this.el.classList.add('ui-resizable-disabled');\n    this.el.classList.remove('ui-resizable');\n  }\n\n  public destroy(): void {\n    this._removeHandlers();\n    if (this.option.autoHide) {\n      this.el.removeEventListener('mouseover', this._showHandlers);\n      this.el.removeEventListener('mouseout', this._hideHandlers);\n    }\n    this.el.classList.remove('ui-resizable');\n    delete this.el;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDResizableOpt): DDResizable {\n    let updateHandles = (opts.handles && opts.handles !== this.option.handles);\n    let updateAutoHide = (opts.autoHide && opts.autoHide !== this.option.autoHide);\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    if (updateHandles) {\n      this._removeHandlers();\n      this._setupHandlers();\n    }\n    if (updateAutoHide) {\n      this._setupAutoHide();\n    }\n    return this;\n  }\n\n  /** @internal */\n  private _setupAutoHide(): DDResizable {\n    if (this.option.autoHide) {\n      this.el.classList.add('ui-resizable-autohide');\n      // use mouseover/mouseout instead of mouseenter/mouseleave to get better performance;\n      this.el.addEventListener('mouseover', this._showHandlers);\n      this.el.addEventListener('mouseout', this._hideHandlers);\n    } else {\n      this.el.classList.remove('ui-resizable-autohide');\n      this.el.removeEventListener('mouseover', this._showHandlers);\n      this.el.removeEventListener('mouseout', this._hideHandlers);\n    }\n    return this;\n  }\n\n  /** @internal */\n  private _showHandlers = () => {\n    this.el.classList.remove('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  private _hideHandlers = () => {\n    this.el.classList.add('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  private _setupHandlers(): DDResizable {\n    let handlerDirection = this.option.handles || 'e,s,se';\n    if (handlerDirection === 'all') {\n      handlerDirection = 'n,e,s,w,se,sw,ne,nw';\n    }\n    this.handlers = handlerDirection.split(',')\n      .map(dir => dir.trim())\n      .map(dir => new DDResizableHandle(this.el, dir, {\n        start: (event: MouseEvent) => {\n          this._resizeStart(event);\n        },\n        stop: (event: MouseEvent) => {\n          this._resizeStop(event);\n        },\n        move: (event: MouseEvent) => {\n          this._resizing(event, dir);\n        }\n      }));\n    return this;\n  }\n\n  /** @internal */\n  private _resizeStart(event: MouseEvent): DDResizable {\n    this.originalRect = this.el.getBoundingClientRect();\n    this.scrollEl = Utils.getScrollElement(this.el);\n    this.scrollY = this.scrollEl.scrollTop;\n    this.scrolled = 0;\n    this.startEvent = event;\n    this._setupHelper();\n    this._applyChange();\n    const ev = DDUtils.initEvent<MouseEvent>(event, { type: 'resizestart', target: this.el });\n    if (this.option.start) {\n      this.option.start(ev, this._ui());\n    }\n    this.el.classList.add('ui-resizable-resizing');\n    this.triggerEvent('resizestart', ev);\n    return this;\n  }\n\n  /** @internal */\n  private _resizing(event: MouseEvent, dir: string): DDResizable {\n    this.scrolled = this.scrollEl.scrollTop - this.scrollY;\n    this.temporalRect = this._getChange(event, dir);\n    this._applyChange();\n    const ev = DDUtils.initEvent<MouseEvent>(event, { type: 'resize', target: this.el });\n    if (this.option.resize) {\n      this.option.resize(ev, this._ui());\n    }\n    this.triggerEvent('resize', ev);\n    return this;\n  }\n\n  /** @internal */\n  private _resizeStop(event: MouseEvent): DDResizable {\n    const ev = DDUtils.initEvent<MouseEvent>(event, { type: 'resizestop', target: this.el });\n    if (this.option.stop) {\n      this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\n    }\n    this.el.classList.remove('ui-resizable-resizing');\n    this.triggerEvent('resizestop', ev);\n    this._cleanHelper();\n    delete this.startEvent;\n    delete this.originalRect;\n    delete this.temporalRect;\n    delete this.scrollY;\n    delete this.scrolled;\n    return this;\n  }\n\n  /** @internal */\n  private _setupHelper(): DDResizable {\n    this.elOriginStyleVal = DDResizable._originStyleProp.map(prop => this.el.style[prop]);\n    this.parentOriginStylePosition = this.el.parentElement.style.position;\n    if (window.getComputedStyle(this.el.parentElement).position.match(/static/)) {\n      this.el.parentElement.style.position = 'relative';\n    }\n    this.el.style.position = this.option.basePosition || 'absolute'; // or 'fixed'\n    this.el.style.opacity = '0.8';\n    this.el.style.zIndex = '1000';\n    return this;\n  }\n\n  /** @internal */\n  private _cleanHelper(): DDResizable {\n    DDResizable._originStyleProp.forEach((prop, i) => {\n      this.el.style[prop] = this.elOriginStyleVal[i] || null;\n    });\n    this.el.parentElement.style.position = this.parentOriginStylePosition || null;\n    return this;\n  }\n\n  /** @internal */\n  private _getChange(event: MouseEvent, dir: string): Rect {\n    const oEvent = this.startEvent;\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n    \n    const offsetX = event.clientX - oEvent.clientX;\n    const offsetY = event.clientY - oEvent.clientY;\n\n    if (dir.indexOf('e') > -1) {\n      newRect.width += offsetX;\n    } else if (dir.indexOf('w') > -1) {\n      newRect.width -= offsetX;\n      newRect.left += offsetX;\n    }\n    if (dir.indexOf('s') > -1) {\n      newRect.height += offsetY;\n    } else if (dir.indexOf('n') > -1) {\n      newRect.height -= offsetY;\n      newRect.top += offsetY\n    }\n    const constrain = this._constrainSize(newRect.width, newRect.height);\n    if (Math.round(newRect.width) !== Math.round(constrain.width)) { // round to ignore slight round-off errors\n      if (dir.indexOf('w') > -1) {\n        newRect.left += newRect.width - constrain.width;\n      }\n      newRect.width = constrain.width;\n    }\n    if (Math.round(newRect.height) !== Math.round(constrain.height)) {\n      if (dir.indexOf('n') > -1) {\n        newRect.top += newRect.height - constrain.height;\n      }\n      newRect.height = constrain.height;\n    }\n    return newRect;\n  }\n\n  /** @internal constrain the size to the set min/max values */\n  private _constrainSize(oWidth: number, oHeight: number): Size {\n    const maxWidth = this.option.maxWidth || Number.MAX_SAFE_INTEGER;\n    const minWidth = this.option.minWidth || oWidth;\n    const maxHeight = this.option.maxHeight || Number.MAX_SAFE_INTEGER;\n    const minHeight = this.option.minHeight || oHeight;\n    const width = Math.min(maxWidth, Math.max(minWidth, oWidth));\n    const height = Math.min(maxHeight, Math.max(minHeight, oHeight));\n    return { width, height };\n  }\n\n  /** @internal */\n  private _applyChange(): DDResizable {\n    let containmentRect = { left: 0, top: 0, width: 0, height: 0 };\n    if (this.el.style.position === 'absolute') {\n      const containmentEl = this.el.parentElement;\n      const { left, top } = containmentEl.getBoundingClientRect();\n      containmentRect = { left, top, width: 0, height: 0 };\n    }\n    if (!this.temporalRect) return this;\n    Object.keys(this.temporalRect).forEach(key => {\n      const value = this.temporalRect[key];\n      this.el.style[key] = value - containmentRect[key] + 'px';\n    });\n    return this;\n  }\n\n  /** @internal */\n  private _removeHandlers(): DDResizable {\n    this.handlers.forEach(handle => handle.destroy());\n    delete this.handlers;\n    return this;\n  }\n\n  /** @internal */\n  private _ui = (): DDUIData => {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n    const rect = this.temporalRect || newRect;\n    return {\n      position: {\n        left: rect.left - containmentRect.left,\n        top: rect.top - containmentRect.top\n      },\n      size: {\n        width: rect.width,\n        height: rect.height\n      }\n      /* Gridstack ONLY needs position set above... keep around in case.\n      element: [this.el], // The object representing the element to be resized\n      helper: [], // TODO: not support yet - The object representing the helper that's being resized\n      originalElement: [this.el],// we don't wrap here, so simplify as this.el //The object representing the original element before it is wrapped\n      originalPosition: { // The position represented as { left, top } before the resizable is resized\n        left: this.originalRect.left - containmentRect.left,\n        top: this.originalRect.top - containmentRect.top\n      },\n      originalSize: { // The size represented as { width, height } before the resizable is resized\n        width: this.originalRect.width,\n        height: this.originalRect.height\n      }\n      */\n    };\n  }\n}\n","/**\n * dd-utils.ts 4.4.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\nexport class DDUtils {\n\n  public static isEventSupportPassiveOption = ((() => {\n    let supportsPassive = false;\n    let passiveTest = () => {\n      // do nothing\n    };\n    document.addEventListener('test', passiveTest, {\n      get passive() {\n        supportsPassive = true;\n        return true;\n      }\n    });\n    document.removeEventListener('test', passiveTest);\n    return supportsPassive;\n  })());\n\n  public static clone(el: HTMLElement): HTMLElement {\n    const node = el.cloneNode(true) as HTMLElement;\n    node.removeAttribute('id');\n    return node;\n  }\n\n  public static appendTo(el: HTMLElement, parent: string | HTMLElement | Node): void {\n    let parentNode: HTMLElement;\n    if (typeof parent === 'string') {\n      parentNode = document.querySelector(parent as string);\n    } else {\n      parentNode = parent as HTMLElement;\n    }\n    if (parentNode) {\n      parentNode.appendChild(el);\n    }\n  }\n\n  public static setPositionRelative(el: HTMLElement): void {\n    if (!(/^(?:r|a|f)/).test(window.getComputedStyle(el).position)) {\n      el.style.position = \"relative\";\n    }\n  }\n\n  public static addElStyles(el: HTMLElement, styles: { [prop: string]: string | string[] }): void {\n    if (styles instanceof Object) {\n      for (const s in styles) {\n        if (styles.hasOwnProperty(s)) {\n          if (Array.isArray(styles[s])) {\n            // support fallback value\n            (styles[s] as string[]).forEach(val => {\n              el.style[s] = val;\n            });\n          } else {\n            el.style[s] = styles[s];\n          }\n        }\n      }\n    }\n  }\n\n  public static initEvent<T>(e: DragEvent | MouseEvent, info: { type: string; target?: EventTarget }): T {\n    const evt = { type: info.type };\n    const obj = {\n      button: 0,\n      which: 0,\n      buttons: 1,\n      bubbles: true,\n      cancelable: true,\n      target: info.target ? info.target : e.target\n    };\n    // don't check for `instanceof DragEvent` as Safari use MouseEvent #1540\n    if ((e as DragEvent).dataTransfer) {\n      evt['dataTransfer'] = (e as DragEvent).dataTransfer; // workaround 'readonly' field.\n    }\n    ['altKey','ctrlKey','metaKey','shiftKey'].forEach(p => evt[p] = e[p]); // keys\n    ['pageX','pageY','clientX','clientY','screenX','screenY'].forEach(p => evt[p] = e[p]); // point info\n    return {...evt, ...obj} as unknown as T;\n  }\n}","/**\n * gridstack-dd-native.ts 4.4.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\nimport { DDElement, DDElementHost } from './dd-element';\n\nimport { GridStackElement } from '../gridstack';\nimport { GridStackDD, DDOpts, DDKey, DDDropOpt, DDCallback, DDValue } from '../gridstack-dd';\nimport { GridItemHTMLElement, DDDragInOpt } from '../types';\nimport { Utils } from '../utils';\n\n// export our base class (what user should use) and all associated types\nexport * from '../gridstack-dd';\n\n/**\n * HTML 5 Native DragDrop based drag'n'drop plugin.\n */\nexport class GridStackDDNative extends GridStackDD {\n\n  public resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDDNative {\n    this._getDDElements(el).forEach(dEl => {\n      if (opts === 'disable' || opts === 'enable') {\n        dEl.ddResizable && dEl.ddResizable[opts](); // can't create DD as it requires options for setupResizable()\n      } else if (opts === 'destroy') {\n        dEl.ddResizable && dEl.cleanResizable();\n      } else if (opts === 'option') {\n        dEl.setupResizable({ [key]: value });\n      } else {\n        const grid = dEl.el.gridstackNode.grid;\n        let handles = dEl.el.getAttribute('gs-resize-handles') ? dEl.el.getAttribute('gs-resize-handles') : grid.opts.resizable.handles;\n        dEl.setupResizable({\n          ...grid.opts.resizable,\n          ...{ handles: handles },\n          ...{\n            start: opts.start,\n            stop: opts.stop,\n            resize: opts.resize\n          }\n        });\n      }\n    });\n    return this;\n  }\n\n  public draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDDNative {\n    this._getDDElements(el).forEach(dEl => {\n      if (opts === 'disable' || opts === 'enable') {\n        dEl.ddDraggable && dEl.ddDraggable[opts](); // can't create DD as it requires options for setupDraggable()\n      } else if (opts === 'destroy') {\n        dEl.ddDraggable && dEl.cleanDraggable();\n      } else if (opts === 'option') {\n        dEl.setupDraggable({ [key]: value });\n      } else {\n        const grid = dEl.el.gridstackNode.grid;\n        dEl.setupDraggable({\n          ...grid.opts.draggable,\n          ...{\n            containment: (grid.opts._isNested && !grid.opts.dragOut)\n              ? grid.el.parentElement\n              : (grid.opts.draggable.containment || null),\n            start: opts.start,\n            stop: opts.stop,\n            drag: opts.drag\n          }\n        });\n      }\n    });\n    return this;\n  }\n\n  public dragIn(el: GridStackElement, opts: DDDragInOpt): GridStackDDNative {\n    this._getDDElements(el).forEach(dEl => dEl.setupDraggable(opts));\n    return this;\n  }\n\n  public droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): GridStackDDNative {\n    if (typeof opts.accept === 'function' && !opts._accept) {\n      opts._accept = opts.accept;\n      opts.accept = (el) => opts._accept(el);\n    }\n    this._getDDElements(el).forEach(dEl => {\n      if (opts === 'disable' || opts === 'enable') {\n        dEl.ddDroppable && dEl.ddDroppable[opts]();\n      } else if (opts === 'destroy') {\n        if (dEl.ddDroppable) { // error to call destroy if not there\n          dEl.cleanDroppable();\n        }\n      } else if (opts === 'option') {\n        dEl.setupDroppable({ [key]: value });\n      } else {\n        dEl.setupDroppable(opts);\n      }\n    });\n    return this;\n  }\n\n  /** true if element is droppable */\n  public isDroppable(el: DDElementHost): boolean {\n    return !!(el && el.ddElement && el.ddElement.ddDroppable && !el.ddElement.ddDroppable.disabled);\n  }\n\n  /** true if element is draggable */\n  public isDraggable(el: DDElementHost): boolean {\n    return !!(el && el.ddElement && el.ddElement.ddDraggable && !el.ddElement.ddDraggable.disabled);\n  }\n\n  /** true if element is draggable */\n  public isResizable(el: DDElementHost): boolean {\n    return !!(el && el.ddElement && el.ddElement.ddResizable && !el.ddElement.ddResizable.disabled);\n  }\n\n  public on(el: GridItemHTMLElement, name: string, callback: DDCallback): GridStackDDNative {\n    this._getDDElements(el).forEach(dEl =>\n      dEl.on(name, (event: Event) => {\n        callback(\n          event,\n          DDManager.dragElement ? DDManager.dragElement.el : event.target as GridItemHTMLElement,\n          DDManager.dragElement ? DDManager.dragElement.helper : null)\n      })\n    );\n    return this;\n  }\n\n  public off(el: GridItemHTMLElement, name: string): GridStackDD {\n    this._getDDElements(el).forEach(dEl => dEl.off(name));\n    return this;\n  }\n\n  /** @internal returns a list of DD elements, creating them on the fly by default */\n  private _getDDElements(els: GridStackElement, create = true): DDElement[] {\n    let hosts = Utils.getElements(els) as DDElementHost[];\n    if (!hosts.length) return [];\n    let list = hosts.map(e => e.ddElement || (create ? DDElement.init(e) : null));\n    if (!create) { list.filter(d => d); } // remove nulls\n    return list;\n  }\n}\n\n// finally register ourself\nGridStackDD.registerPlugin(GridStackDDNative);\n","/**\r\n * utils.ts 4.4.1\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridStackElement, GridStackNode, GridStackOptions, numberOrString, GridStackPosition, GridStackWidget } from './types';\r\n\r\nexport interface HeightData {\r\n  h: number;\r\n  unit: string;\r\n}\r\n\r\n/** checks for obsolete method names */\r\n// eslint-disable-next-line\r\nexport function obsolete(self, f, oldName: string, newName: string, rev: string): (...args: any[]) => any {\r\n  let wrapper = (...args) => {\r\n    console.warn('gridstack.js: Function `' + oldName + '` is deprecated in ' + rev + ' and has been replaced ' +\r\n    'with `' + newName + '`. It will be **completely** removed in v1.0');\r\n    return f.apply(self, args);\r\n  }\r\n  wrapper.prototype = f.prototype;\r\n  return wrapper;\r\n}\r\n\r\n/** checks for obsolete grid options (can be used for any fields, but msg is about options) */\r\nexport function obsoleteOpts(opts: GridStackOptions, oldName: string, newName: string, rev: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    opts[newName] = opts[oldName];\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **completely** removed in v1.0');\r\n  }\r\n}\r\n\r\n/** checks for obsolete grid options which are gone */\r\nexport function obsoleteOptsDel(opts: GridStackOptions, oldName: string, rev: string, info: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + info);\r\n  }\r\n}\r\n\r\n/** checks for obsolete Jquery element attributes */\r\nexport function obsoleteAttr(el: HTMLElement, oldName: string, newName: string, rev: string): void {\r\n  let oldAttr = el.getAttribute(oldName);\r\n  if (oldAttr !== null) {\r\n    el.setAttribute(newName, oldAttr);\r\n    console.warn('gridstack.js: attribute `' + oldName + '`=' + oldAttr + ' is deprecated on this object in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **completely** removed in v1.0');\r\n  }\r\n}\r\n\r\n/**\r\n * Utility methods\r\n */\r\nexport class Utils {\r\n\r\n  /** convert a potential selector into actual list of html elements */\r\n  static getElements(els: GridStackElement): HTMLElement[] {\r\n    if (typeof els === 'string') {\r\n      let list = document.querySelectorAll(els);\r\n      if (!list.length && els[0] !== '.' && els[0] !== '#') {\r\n        list = document.querySelectorAll('.' + els);\r\n        if (!list.length) { list = document.querySelectorAll('#' + els) }\r\n      }\r\n      return Array.from(list) as HTMLElement[];\r\n    }\r\n    return [els];\r\n  }\r\n\r\n  /** convert a potential selector into actual single element */\r\n  static getElement(els: GridStackElement): HTMLElement {\r\n    if (typeof els === 'string') {\r\n      if (!els.length) return null;\r\n      if (els[0] === '#') {\r\n        return document.getElementById(els.substring(1));\r\n      }\r\n      if (els[0] === '.' || els[0] === '[') {\r\n        return document.querySelector(els);\r\n      }\r\n\r\n      // if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS\r\n      if(!isNaN(+els[0])) { // start with digit\r\n        return document.getElementById(els);\r\n      }\r\n\r\n      // finally try string, then id then class\r\n      let el = document.querySelector(els);\r\n      if (!el) { el = document.getElementById(els) }\r\n      if (!el) { el = document.querySelector('.' + els) }\r\n      return el as HTMLElement;\r\n    }\r\n    return els;\r\n  }\r\n\r\n  /** returns true if a and b overlap */\r\n  static isIntercepted(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return !(a.y >= b.y + b.h || a.y + a.h <= b.y || a.x + a.w <= b.x || a.x >= b.x + b.w);\r\n  }\r\n\r\n  /** returns true if a and b touch edges or corners */\r\n  static isTouching(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return Utils.isIntercepted(a, {x: b.x-0.5, y: b.y-0.5, w: b.w+1, h: b.h+1})\r\n  }\r\n  /**\r\n   * Sorts array of nodes\r\n   * @param nodes array to sort\r\n   * @param dir 1 for asc, -1 for desc (optional)\r\n   * @param width width of the grid. If undefined the width will be calculated automatically (optional).\r\n   **/\r\n  static sort(nodes: GridStackNode[], dir?: -1 | 1, column?: number): GridStackNode[] {\r\n    column = column || nodes.reduce((col, n) => Math.max(n.x + n.w, col), 0) || 12;\r\n    if (dir === -1)\r\n      return nodes.sort((a, b) => (b.x + b.y * column)-(a.x + a.y * column));\r\n    else\r\n      return nodes.sort((b, a) => (b.x + b.y * column)-(a.x + a.y * column));\r\n  }\r\n\r\n  /**\r\n   * creates a style sheet with style id under given parent\r\n   * @param id will set the 'gs-style-id' attribute to that id\r\n   * @param parent to insert the stylesheet as first child,\r\n   * if none supplied it will be appended to the document head instead.\r\n   */\r\n  static createStylesheet(id: string, parent?: HTMLElement): CSSStyleSheet {\r\n    let style: HTMLStyleElement = document.createElement('style');\r\n    style.setAttribute('type', 'text/css');\r\n    style.setAttribute('gs-style-id', id);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if ((style as any).styleSheet) { // TODO: only CSSImportRule have that and different beast ??\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (style as any).styleSheet.cssText = '';\r\n    } else {\r\n      style.appendChild(document.createTextNode('')); // WebKit hack\r\n    }\r\n    if (!parent) {\r\n      // default to head\r\n      parent = document.getElementsByTagName('head')[0];\r\n      parent.appendChild(style);\r\n    } else {\r\n      parent.insertBefore(style, parent.firstChild);\r\n    }\r\n    return style.sheet as CSSStyleSheet;\r\n  }\r\n\r\n  /** removed the given stylesheet id */\r\n  static removeStylesheet(id: string): void {\r\n    let el = document.querySelector('STYLE[gs-style-id=' + id + ']');\r\n    if (el && el.parentNode) el.remove();\r\n  }\r\n\r\n  /** inserts a CSS rule */\r\n  static addCSSRule(sheet: CSSStyleSheet, selector: string, rules: string): void {\r\n    if (typeof sheet.addRule === 'function') {\r\n      sheet.addRule(selector, rules);\r\n    } else if (typeof sheet.insertRule === 'function') {\r\n      sheet.insertRule(`${selector}{${rules}}`);\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  static toBool(v: unknown): boolean {\r\n    if (typeof v === 'boolean') {\r\n      return v;\r\n    }\r\n    if (typeof v === 'string') {\r\n      v = v.toLowerCase();\r\n      return !(v === '' || v === 'no' || v === 'false' || v === '0');\r\n    }\r\n    return Boolean(v);\r\n  }\r\n\r\n  static toNumber(value: null | string): number {\r\n    return (value === null || value.length === 0) ? undefined : Number(value);\r\n  }\r\n\r\n  static parseHeight(val: numberOrString): HeightData {\r\n    let h: number;\r\n    let unit = 'px';\r\n    if (typeof val === 'string') {\r\n      let match = val.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);\r\n      if (!match) {\r\n        throw new Error('Invalid height');\r\n      }\r\n      unit = match[2] || 'px';\r\n      h = parseFloat(match[1]);\r\n    } else {\r\n      h = val;\r\n    }\r\n    return { h, unit };\r\n  }\r\n\r\n  /** copies unset fields in target to use the given default sources values */\r\n  // eslint-disable-next-line\r\n  static defaults(target, ...sources): {} {\r\n\r\n    sources.forEach(source => {\r\n      for (const key in source) {\r\n        if (!source.hasOwnProperty(key)) return;\r\n        if (target[key] === null || target[key] === undefined) {\r\n          target[key] = source[key];\r\n        } else if (typeof source[key] === 'object' && typeof target[key] === 'object') {\r\n          // property is an object, recursively add it's field over... #1373\r\n          this.defaults(target[key], source[key]);\r\n        }\r\n      }\r\n    });\r\n\r\n    return target;\r\n  }\r\n\r\n  /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */\r\n  static same(a: unknown, b: unknown): boolean {\r\n    if (typeof a !== 'object')  return a == b;\r\n    if (typeof a !== typeof b) return false;\r\n    // else we have object, check just 1 level deep for being same things...\r\n    if (Object.keys(a).length !== Object.keys(b).length) return false;\r\n    for (const key in a) {\r\n      if (a[key] !== b[key]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** copies over b size & position (GridStackPosition), and possibly min/max as well */\r\n  static copyPos(a: GridStackWidget, b: GridStackWidget, minMax = false): GridStackWidget {\r\n    a.x = b.x;\r\n    a.y = b.y;\r\n    a.w = b.w;\r\n    a.h = b.h;\r\n    if (!minMax) return a;\r\n    if (b.minW) a.minW = b.minW;\r\n    if (b.minH) a.minH = b.minH;\r\n    if (b.maxW) a.maxW = b.maxW;\r\n    if (b.maxH) a.maxH = b.maxH;\r\n    return a;\r\n  }\r\n\r\n  /** true if a and b has same size & position */\r\n  static samePos(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return a && b && a.x === b.x && a.y === b.y && a.w === b.w && a.h === b.h;\r\n  }\r\n\r\n  /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */\r\n  static removeInternalAndSame(a: unknown, b: unknown):void {\r\n    if (typeof a !== 'object' || typeof b !== 'object') return;\r\n    for (let key in a) {\r\n      let val = a[key];\r\n      if (key[0] === '_' || val === b[key]) {\r\n        delete a[key]\r\n      } else if (val && typeof val === 'object' && b[key] !== undefined) {\r\n        for (let i in val) {\r\n          if (val[i] === b[key][i] || i[0] === '_') { delete val[i] }\r\n        }\r\n        if (!Object.keys(val).length) { delete a[key] }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** return the closest parent matching the given class */\r\n  static closestByClass(el: HTMLElement, name: string): HTMLElement {\r\n\r\n    while(el = el.parentElement) {\r\n      if (el.classList.contains(name)) return el;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** delay calling the given function for given delay, preventing new calls from happening while waiting */\r\n  static throttle(func: () => void, delay: number): () => void {\r\n    let isWaiting = false;\r\n    return (...args) => {\r\n      if (!isWaiting) {\r\n        isWaiting = true;\r\n        setTimeout(() => { func(...args); isWaiting = false; }, delay);\r\n      }\r\n    }\r\n  }\r\n\r\n  static removePositioningStyles(el: HTMLElement): void {\r\n    let style = el.style;\r\n    if (style.position) {\r\n      style.removeProperty('position');\r\n    }\r\n    if (style.left) {\r\n      style.removeProperty('left');\r\n    }\r\n    if (style.top) {\r\n      style.removeProperty('top');\r\n    }\r\n    if (style.width) {\r\n      style.removeProperty('width');\r\n    }\r\n    if (style.height) {\r\n      style.removeProperty('height');\r\n    }\r\n  }\r\n\r\n  /** @internal returns the passed element if scrollable, else the closest parent that will, up to the entire document scrolling element */\r\n  static getScrollElement(el?: HTMLElement): HTMLElement {\r\n    if (!el) return document.scrollingElement as HTMLElement || document.documentElement; // IE support\r\n    const style = getComputedStyle(el);\r\n    const overflowRegex = /(auto|scroll)/;\r\n\r\n    if (overflowRegex.test(style.overflow + style.overflowY)) {\r\n      return el;\r\n    } else {\r\n      return this.getScrollElement(el.parentElement);\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  static updateScrollPosition(el: HTMLElement, position: {top: number}, distance: number): void {\r\n    // is widget in view?\r\n    let rect = el.getBoundingClientRect();\r\n    let innerHeightOrClientHeight = (window.innerHeight || document.documentElement.clientHeight);\r\n    if (rect.top < 0 ||\r\n      rect.bottom > innerHeightOrClientHeight\r\n    ) {\r\n      // set scrollTop of first parent that scrolls\r\n      // if parent is larger than el, set as low as possible\r\n      // to get entire widget on screen\r\n      let offsetDiffDown = rect.bottom - innerHeightOrClientHeight;\r\n      let offsetDiffUp = rect.top;\r\n      let scrollEl = this.getScrollElement(el);\r\n      if (scrollEl !== null) {\r\n        let prevScroll = scrollEl.scrollTop;\r\n        if (rect.top < 0 && distance < 0) {\r\n          // moving up\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;\r\n          }\r\n        } else if (distance > 0) {\r\n          // moving down\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;\r\n          }\r\n        }\r\n        // move widget y by amount scrolled\r\n        position.top += scrollEl.scrollTop - prevScroll;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal Function used to scroll the page.\r\n   *\r\n   * @param event `MouseEvent` that triggers the resize\r\n   * @param el `HTMLElement` that's being resized\r\n   * @param distance Distance from the V edges to start scrolling\r\n   */\r\n  static updateScrollResize(event: MouseEvent, el: HTMLElement, distance: number): void {\r\n    const scrollEl = this.getScrollElement(el);\r\n    const height = scrollEl.clientHeight;\r\n    // #1727 event.clientY is relative to viewport, so must compare this against position of scrollEl getBoundingClientRect().top\r\n    // #1745 Special situation if scrollEl is document 'html': here browser spec states that\r\n    // clientHeight is height of viewport, but getBoundingClientRect() is rectangle of html element;\r\n    // this discrepancy arises because in reality scrollbar is attached to viewport, not html element itself.\r\n    const offsetTop = (scrollEl === this.getScrollElement()) ? 0 : scrollEl.getBoundingClientRect().top;\r\n    const pointerPosY = event.clientY - offsetTop;\r\n    const top = pointerPosY < distance;\r\n    const bottom = pointerPosY > height - distance;\r\n\r\n    if (top) {\r\n      // This also can be done with a timeout to keep scrolling while the mouse is\r\n      // in the scrolling zone. (will have smoother behavior)\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: pointerPosY - distance});\r\n    } else if (bottom) {\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: distance - (height - pointerPosY)});\r\n    }\r\n  }\r\n\r\n  /** single level clone, returning a new object with same top fields. This will share sub objects and arrays */\r\n  static clone<T>(obj: T): T {\r\n    if (obj === null || obj === undefined || typeof(obj) !== 'object') {\r\n      return obj;\r\n    }\r\n    // return Object.assign({}, obj);\r\n    if (obj instanceof Array) {\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      return [...obj] as any;\r\n    }\r\n    return {...obj};\r\n  }\r\n\r\n  /**\r\n   * Recursive clone version that returns a full copy, checking for nested objects and arrays ONLY.\r\n   * Note: this will use as-is any key starting with double __ (and not copy inside) some lib have circular dependencies.\r\n   */\r\n  static cloneDeep<T>(obj: T): T {\r\n    // return JSON.parse(JSON.stringify(obj)); // doesn't work with date format ?\r\n    const ret = Utils.clone(obj);\r\n    for (const key in ret) {\r\n      // NOTE: we don't support function/circular dependencies so skip those properties for now...\r\n      if (ret.hasOwnProperty(key) && typeof(ret[key]) === 'object' && key.substring(0, 2) !== '__' && !skipFields.find(k => k === key)) {\r\n        ret[key] = Utils.cloneDeep(obj[key]);\r\n      }\r\n    }\r\n    return ret;\r\n  }\r\n}\r\n\r\n// list of fields we will skip during cloneDeep (nested objects, other internal)\r\nconst skipFields = ['_isNested', 'el', 'grid', 'subGrid', 'engine'];\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(930);\n"],"sourceRoot":""}