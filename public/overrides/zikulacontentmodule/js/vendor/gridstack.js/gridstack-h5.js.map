{"version":3,"sources":["webpack://GridStack/webpack/universalModuleDefinition","webpack://GridStack/./src/gridstack-dd.ts","webpack://GridStack/./src/gridstack-ddi.ts","webpack://GridStack/./src/gridstack-engine.ts","webpack://GridStack/./src/gridstack.ts","webpack://GridStack/./src/h5/dd-base-impl.ts","webpack://GridStack/./src/h5/dd-draggable.ts","webpack://GridStack/./src/h5/dd-droppable.ts","webpack://GridStack/./src/h5/dd-element.ts","webpack://GridStack/./src/h5/dd-manager.ts","webpack://GridStack/./src/h5/dd-resizable-handle.ts","webpack://GridStack/./src/h5/dd-resizable.ts","webpack://GridStack/./src/h5/dd-utils.ts","webpack://GridStack/./src/h5/gridstack-dd-native.ts","webpack://GridStack/./src/index-h5.ts","webpack://GridStack/./src/utils.ts","webpack://GridStack/webpack/bootstrap","webpack://GridStack/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","GridStackDD","GridStackDDI","get","el","this","draggable","resizable","gridstackNode","_initDD","dragIn","dragInOptions","GridStack","prototype","_setupAcceptWidget","opts","staticGrid","acceptWidgets","droppable","accept","grid","gridPos","cellHeight","cellWidth","onDrag","event","helper","node","rec","getBoundingClientRect","left","top","ui","position","_temporaryRemoved","x","Math","max","round","y","autoPosition","engine","nodeBoundFix","willItFit","off","_onStartMoving","_dragOrResize","canAccept","selector","matches","maxRow","n","w","h","minW","minH","on","_leave","box","document","documentElement","scrollTop","getCellHeight","_readAttr","_isExternal","offsetWidth","offsetHeight","_gridstackNodeOrig","cleanupNode","_isCursorOutside","wasAdded","placeholder","parentElement","remove","origNode","oGrid","removedNodes","push","_triggerRemoveEvent","cloneNode","Utils","copyPos","removePositioningStyles","_writeAttr","appendChild","_updateContainerHeight","addedNodes","_triggerAddEvent","_triggerChangeEvent","endUpdate","_gsEventHandler","type","undefined","window","setTimeout","_prepareDragDropByNode","removeNode","_setupRemoveDrop","removable","trashEl","querySelector","isDroppable","removableOptions","_isAboutToRemove","classList","add","setupDragIn","_dragIn","_dragInOptions","dragInDefaultOptions","dd","getElements","forEach","isDraggable","revert","handle","scroll","appendTo","locked","noMove","disableDrag","noResize","disableResize","onStartMoving","target","dragOrResize","onEndMoving","_moving","_lastTried","gridToNotify","_orig","_writePosAttr","addNode","start","stop","drag","resize","cleanNodes","beginUpdate","_lastUiPosition","_prevYPix","cacheRects","marginTop","marginRight","marginBottom","marginLeft","maxW","maxH","dropoutEvent","restoreInitial","resizing","distance","updateScrollPosition","isOutside","updateScrollResize","size","width","height","rect","moveNodeCheck","_skipDown","subGrid","onParentResize","movable","els","val","disable","enableMove","enableResize","_triggerEvent","enable","doEnable","includeNewWidgets","getGridItems","pluginClass","ddi","registerPlugin","GridStackEngine","column","onChange","_float","float","nodes","batchMode","_prevFloat","_packNodes","_notify","nn","_hasLocked","collide","opt","_sortNodes","nested","swap","area","_useEntireRowArea","skip","didMove","newOpt","pack","moved","moveNode","skip2","find","isIntercepted","filter","o","collides","_rect","r0","r","r2","yOver","Number","MAX_VALUE","xOver","overMax","over","min","right","bottom","a","b","_doSwap","_dirty","touching","isTouching","t","length","batchUpdate","copyNodes","commit","dir","sort","_updating","newY","i","_id","_idSeq","defaults","isNaN","verify","samePos","removeDOM","dirtyNodes","Array","isArray","concat","getDirtyNodes","some","triggerAddEvent","dup","prepareNode","_removeDOM","floor","_fixCollisions","triggerEvent","_layouts","changedPosConstrain","clonedNode","clone","map","canMove","getRow","c","row","p","prevPos","collideAll","needToMove","collideCoverage","reduce","saveInitial","saveElement","widgets","key","_ignoreLayoutsNodeChange","layout","l","ratio","oldColumn","cacheLayout","cacheNodes","lastIndex","cacheNode","j","findIndex","newNodes","splice","move","scale","clear","copy","prop","GridDefaults","minRow","itemClass","placeholderClass","placeholderText","handleClass","styleInHead","cellHeightThrottle","margin","auto","minWidth","animate","alwaysShowResizeHandle","autoHide","handles","rtl","marginUnit","cellHeightUnit","disableOneColumnMode","oneColumnModeDomSort","rowAttr","toNumber","getAttribute","toBool","_styleSheetClass","random","toFixed","initMargin","_widthOrContainer","_prevColumn","style","direction","parentGridItemEl","closestByClass","_isNested","_isAutoCellHeight","_setStaticClass","cbNodes","_updateStyles","elements","parseInt","e","_prepareElement","setAnimation","_updateWindowResizeEvent","options","elOrString","getGridElement","gridstack","console","error","grids","getGridElements","parent","doc","implementation","createHTMLDocument","body","innerHTML","class","children","init","load","_placeholder","placeholderChild","createElement","className","arguments","warn","id","addWidget","content","domAttr","_insertNotAppend","prepend","saveContent","saveGridOpt","list","save","sub","removeInternalAndSame","addAndRemove","items","removed","removeWidget","item","update","addGrid","forcePixel","marginDiff","data","parseHeight","unit","clientWidth","innerWidth","compact","domNodes","updateNodeWidths","from","setStatic","parentNode","removeChild","removeAll","_removeStylesheet","useDocRelative","containerPos","offsetTop","offsetLeft","relativeLeft","relativeTop","columnWidth","rowHeight","isAreaEmpty","getElement","name","callback","indexOf","split","noData","detail","addEventListener","log","removeEventListener","doAnimate","m","keys","k","changed","ddChanged","value","layoutsNodesChange","CustomEvent","bubbles","Event","dispatchEvent","_styles","removeStylesheet","forceUpdate","prefix","styleLocation","createStylesheet","_max","addCSSRule","getHeight","rows","cssMinHeight","getComputedStyle","setAttribute","String","removeProperty","same","attrs","resizeHandles","removeAttribute","hasOwnProperty","classes","oneColumn","changedOneColumn","_oneColumnMode","_cellHeightThrottle","throttle","forceRemove","workTodo","_windowResizeBind","bind","margins","Engine","_disabled","_eventRegister","eventName","disabled","DDDraggable","DDBaseImplement","option","super","dragging","containmentRect","offset","substring","dragEl","contains","_dragStart","_drag","_dragEnd","forDestroy","destroy","Object","DDManager","dragElement","_createHelper","_setupHelperContainmentStyle","dragOffset","_getDragOffset","helperContainment","ev","DDUtils","initEvent","_setupDragFollowNodeNotifyStart","dragFollowTimer","_cancelDragGhost","_setupHelperStyle","dragEventListenerOption","preventDefault","_dragFollow","clearTimeout","paintTimer","cancelAnimationFrame","parentOriginStylePosition","_removeHelperStyle","apply","dragElementOriginStyle","originStyleProp","pointerEvents","willChange","transition","basePosition","zIndex","requestAnimationFrame","clientX","clientY","match","img","dataTransfer","setDragImage","stopPropagation","xformOffsetX","xformOffsetY","testEl","addElStyles","opacity","testElPosition","targetOffset","DDDroppable","_dragEnter","_dragOver","_dragLeave","_drop","_setupAccept","moving","_removeLeaveCallbacks","_canDrop","_ui","relatedTarget","out","drop","DDElement","ddElement","ddDraggable","ddDroppable","ddResizable","updateOption","DDResizable","DDResizableHandle","host","_mouseDown","_mouseMove","_mouseUp","_init","userSelect","mouseDownEvent","s","abs","_showHandlers","_hideHandlers","newRect","originalRect","scrolled","temporalRect","_setupAutoHide","_setupHandlers","_removeHandlers","updateHandles","updateAutoHide","handlerDirection","handlers","trim","_resizeStart","_resizeStop","_resizing","scrollEl","getScrollParent","scrollY","startEvent","_setupHelper","_applyChange","_getChange","_cleanHelper","elOriginStyleVal","_originStyleProp","oEvent","offsetX","offsetY","reshape","_getReShapeSize","oWidth","oHeight","maxWidth","MAX_SAFE_INTEGER","maxHeight","minHeight","containmentEl","test","styles","info","evt","obj","button","which","buttons","cancelable","isEventSupportPassiveOption","supportsPassive","passiveTest","GridStackDDNative","_getDDElements","dEl","cleanResizable","setupResizable","cleanDraggable","setupDraggable","containment","dragOut","_accept","cleanDroppable","setupDroppable","create","hosts","d","f","oldName","newName","rev","wrapper","args","oldAttr","querySelectorAll","getElementById","col","styleSheet","cssText","createTextNode","insertBefore","firstChild","getElementsByTagName","sheet","rules","addRule","insertRule","v","toLowerCase","Boolean","Error","parseFloat","sources","source","func","delay","isWaiting","overflow","overflowY","innerHeightOrClientHeight","innerHeight","clientHeight","offsetDiffDown","offsetDiffUp","prevScroll","scrollBy","behavior","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__"],"mappings":";CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAmB,UAAID,IAEvBD,EAAgB,UAAIC,IARtB,CASGK,MAAM,WACT,M,wFCPA,eAEA,SACA,SAoBA,MAAsBC,UAAoB,EAAAC,aAGxC,aACE,OAAO,EAAAA,aAAaC,MAIf,OAAOC,GAKZ,OAJAC,KAAKC,UAAUF,EAAI,WAAWG,UAAUH,EAAI,WACxCA,EAAGI,sBACEJ,EAAGI,cAAcC,QAEnBJ,MA2SX,IAAIK,EACAC,EAzTJ,gBA8CA,EAAAC,UAAUC,UAAUC,mBAAqB,WACvC,GAAIT,KAAKU,KAAKC,WAAY,OAAOX,KAIjC,IAAKA,KAAKU,KAAKE,cAIb,OAHAhB,EAAYE,MAAMe,UAAUb,KAAKD,GAAI,CACnCe,OAASf,GAA4BA,EAAGI,eAAiBJ,EAAGI,cAAcY,OAASf,OAE9EA,KAIT,IAAIgB,EACAC,EAAoBC,EAEpBC,EAAS,CAACC,EAAkBrB,EAAyBsB,KACvD,IAAIC,EAAOvB,EAAGI,cACd,IAAKmB,EAAM,OAKX,IAAIC,GAHJF,EAASA,GAAUtB,GAGFyB,wBACbC,EAAOF,EAAIE,KAAOT,EAAQS,KAC1BC,EAAMH,EAAIG,IAAMV,EAAQU,IACxBC,EAAe,CAACC,SAAU,CAACF,MAAKD,SAEpC,GAAIH,EAAKO,kBAAmB,CAO1B,GANAP,EAAKQ,EAAIC,KAAKC,IAAI,EAAGD,KAAKE,MAAMR,EAAOP,IACvCI,EAAKY,EAAIH,KAAKC,IAAI,EAAGD,KAAKE,MAAMP,EAAMT,WAC/BK,EAAKa,aACZnC,KAAKoC,OAAOC,aAAaf,IAGpBtB,KAAKoC,OAAOE,UAAUhB,KACzBA,EAAKa,cAAe,GACfnC,KAAKoC,OAAOE,UAAUhB,IAEzB,YADA1B,EAAYE,MAAMyC,IAAIxC,EAAI,QAM9BC,KAAKwC,eAAepB,EAAOO,EAAIL,EAAMJ,EAAWD,QAGhDjB,KAAKyC,cAAcrB,EAAOO,EAAIL,EAAMJ,EAAWD,IA4KnD,OAxKArB,EAAYE,MACTe,UAAUb,KAAKD,GAAI,CAClBe,OAASf,IACP,IAAIuB,EAAsBvB,EAAGI,cAE7B,GAAImB,GAAQA,EAAKP,OAASf,KAAM,OAAO,EAEvC,IAAI0C,GAAY,EAChB,GAAuC,mBAA5B1C,KAAKU,KAAKE,cACnB8B,EAAY1C,KAAKU,KAAKE,cAAcb,OAC/B,CACL,IAAI4C,GAAwC,IAA5B3C,KAAKU,KAAKE,cAAyB,mBAAqBZ,KAAKU,KAAKE,cAClF8B,EAAY3C,EAAG6C,QAAQD,GAGzB,GAAID,GAAapB,GAAQtB,KAAKU,KAAKmC,OAAQ,CACzC,IAAIC,EAAI,CAACC,EAAGzB,EAAKyB,EAAGC,EAAG1B,EAAK0B,EAAGC,KAAM3B,EAAK2B,KAAMC,KAAM5B,EAAK4B,MAC3DR,EAAY1C,KAAKoC,OAAOE,UAAUQ,GAEpC,OAAOJ,KAMVS,GAAGnD,KAAKD,GAAI,YAAY,CAACqB,EAAcrB,EAAyBsB,KAC/D,IAAIC,EAAOvB,EAAGI,cAEd,GAAImB,GAAQA,EAAKP,OAASf,OAASsB,EAAKO,kBAEtC,OAAO,EAILP,GAAQA,EAAKP,MAAQO,EAAKP,OAASf,OAASsB,EAAKO,mBAEnCP,EAAKP,KACXqC,OAAOrD,EAAGI,cAAeJ,EAAIsB,GAAQ,GAIjD,IAAIgC,EAAMrD,KAAKD,GAAGyB,wBAClBR,EAAU,CAACU,IAAK2B,EAAI3B,IAAM4B,SAASC,gBAAgBC,UAAW/B,KAAM4B,EAAI5B,MACxEP,EAAYlB,KAAKkB,YACjBD,EAAajB,KAAKyD,eAAc,GAG3BnC,IACHA,EAAOtB,KAAK0D,UAAU3D,IAEnBuB,EAAKP,OACRO,EAAKqC,aAAc,EACnB5D,EAAGI,cAAgBmB,GAIrBD,EAASA,GAAUtB,EACnB,IAAIgD,EAAIzB,EAAKyB,GAAKhB,KAAKE,MAAMZ,EAAOuC,YAAc1C,IAAc,EAC5D8B,EAAI1B,EAAK0B,GAAKjB,KAAKE,MAAMZ,EAAOwC,aAAe5C,IAAe,EAyBlE,OAtBIK,EAAKP,MAAQO,EAAKP,OAASf,MAGxBD,EAAG+D,qBAAoB/D,EAAG+D,mBAAqBxC,GACpDvB,EAAGI,cAAgBmB,EAAO,OAAH,wBAAOA,GAAI,CAAEyB,IAAGC,IAAGjC,KAAMf,OAChDA,KAAKoC,OAAO2B,YAAYzC,GACrBe,aAAaf,GAEhBA,EAAKlB,QACLkB,EAAKqC,YACLrC,EAAKO,mBAAoB,IAEzBP,EAAKyB,EAAIA,EAAGzB,EAAK0B,EAAIA,EACrB1B,EAAKO,mBAAoB,UAIpBP,EAAK0C,iBAEZpE,EAAYE,MAAMqD,GAAGpD,EAAI,OAAQoB,GAEjCA,EAAOC,EAAoBrB,EAAIsB,IACxB,KAKR8B,GAAGnD,KAAKD,GAAI,WAAW,CAACqB,EAAOrB,EAAyBsB,KACvD,IAAIC,EAAOvB,EAAGI,cAMd,OAHKmB,EAAKP,MAAQO,EAAKP,OAASf,MAC9BA,KAAKoD,OAAO9B,EAAMvB,EAAIsB,GAAQ,IAEzB,KAKR8B,GAAGnD,KAAKD,GAAI,QAAQ,CAACqB,EAAOrB,EAAyBsB,KACpD,IAAIC,EAAOvB,EAAGI,cAEd,GAAImB,GAAQA,EAAKP,OAASf,OAASsB,EAAKqC,YAAa,OAAO,EAE5D,IAAIM,IAAajE,KAAKkE,YAAYC,cAClCnE,KAAKkE,YAAYE,SAIjB,IAAIC,EAAWtE,EAAG+D,mBAElB,UADO/D,EAAG+D,mBACNG,GAAYI,GAAYA,EAAStD,MAAQsD,EAAStD,OAASf,KAAM,CACnE,IAAIsE,EAAQD,EAAStD,KACrBuD,EAAMlC,OAAOmC,aAAaC,KAAKH,GAC/BC,EAAMG,sBAGR,QAAKnD,IAGD2C,IACFjE,KAAKoC,OAAO2B,YAAYzC,GACxBA,EAAKP,KAAOf,MAEdJ,EAAYE,MAAMyC,IAAIxC,EAAI,QAGtBsB,IAAWtB,GACbsB,EAAO+C,SACPrE,EAAGI,cAAgBkE,EACfJ,IACFlE,EAAKA,EAAG2E,WAAU,MAGpB3E,EAAGqE,SACHxE,EAAYE,MAAMsE,OAAOrE,MAEtBkE,IACLlE,EAAGI,cAAgBmB,EACnBA,EAAKvB,GAAKA,EAEV,EAAA4E,MAAMC,QAAQtD,EAAMtB,KAAK0D,UAAU1D,KAAKkE,cACxC,EAAAS,MAAME,wBAAwB9E,GAC9BC,KAAK8E,WAAW/E,EAAIuB,GACpBtB,KAAKD,GAAGgF,YAAYhF,GACpBC,KAAKgF,yBACLhF,KAAKoC,OAAO6C,WAAWT,KAAKlD,GAC5BtB,KAAKkF,mBACLlF,KAAKmF,sBAELnF,KAAKoC,OAAOgD,YACRpF,KAAKqF,gBAAyB,SAChCrF,KAAKqF,gBAAyB,QAAE,CAACC,KAAM,WAAYjB,GAAYA,EAAStD,KAAOsD,OAAWkB,EAAWjE,GAIvGkE,OAAOC,YAAW,KAEZnE,EAAKvB,IAAMuB,EAAKvB,GAAGoE,cACrBnE,KAAK0F,uBAAuBpE,GAE5BtB,KAAKoC,OAAOuD,WAAWrE,OAIpB,OAEJtB,MAIT,EAAAO,UAAUC,UAAUoF,iBAAmB,WACrC,IAAK5F,KAAKU,KAAKC,YAA6C,iBAAxBX,KAAKU,KAAKmF,UAAwB,CACpE,IAAIC,EAAUxC,SAASyC,cAAc/F,KAAKU,KAAKmF,WAC/C,IAAKC,EAAS,OAAO9F,KAIhBJ,EAAYE,MAAMkG,YAAYF,IACjClG,EAAYE,MAAMe,UAAUiF,EAAS9F,KAAKU,KAAKuF,kBAC5C9C,GAAG2C,EAAS,YAAY,SAAS1E,EAAOrB,GACvC,IAAIuB,EAAOvB,EAAGI,cACTmB,GAASA,EAAKP,OACnBO,EAAK4E,kBAAmB,EACxBnG,EAAGoG,UAAUC,IAAI,gCAElBjD,GAAG2C,EAAS,WAAW,SAAS1E,EAAOrB,GACtC,IAAIuB,EAAOvB,EAAGI,cACTmB,GAASA,EAAKP,cACZO,EAAK4E,iBACZnG,EAAGoG,UAAU/B,OAAO,gCAI5B,OAAOpE,MAQT,EAAAO,UAAU8F,YAAc,SAASC,EAAkBC,GAMjD,GAJID,IACFjG,EAASiG,EACThG,EAAgB,OAAH,wBAAOkG,GAA0BD,GAAkB,KAE5C,iBAAXlG,EAAqB,OAChC,IAAIoG,EAAK7G,EAAYE,MACrB,EAAA6E,MAAM+B,YAAYrG,GAAQsG,SAAQ5G,IAC3B0G,EAAGG,YAAY7G,IAAK0G,EAAGpG,OAAON,EAAIO,OAK3C,MAAMkG,EAAoC,CACxCK,OAAQ,UACRC,OAAQ,2BACRC,QAAQ,EACRC,SAAU,QAIZ,EAAAzG,UAAUC,UAAUkF,uBAAyB,SAASpE,GACpD,IA4BIJ,EACAD,EA7BAlB,EAAKuB,EAAKvB,GAGd,GAAIC,KAAKU,KAAKC,YAAcW,EAAK2F,SAC7B3F,EAAK4F,QAAUlH,KAAKU,KAAKyG,eAAiB7F,EAAK8F,UAAYpH,KAAKU,KAAK2G,eAMvE,OALI/F,EAAKlB,UACPR,EAAYE,MAAMsE,OAAO9C,EAAKvB,WACvBuB,EAAKlB,SAEdkB,EAAKvB,GAAGoG,UAAUC,IAAI,wBAAyB,yBACxCpG,KAGT,GAAIsB,EAAKlB,QAQP,OANIkB,EAAK4F,QAAUlH,KAAKU,KAAKyG,cAC3BvH,EAAYE,MAAMG,UAAUF,EAAI,YAE9BuB,EAAK8F,UAAYpH,KAAKU,KAAK2G,gBAC7BzH,EAAYE,MAAMI,UAAUH,EAAI,WAE3BC,KAITsB,EAAKvB,GAAGoG,UAAU/B,OAAO,wBAAyB,yBAOlD,IAAIkD,EAAgB,CAAClG,EAAcO,KAE7B3B,KAAKqF,gBAAgBjE,EAAMkE,OAC7BtF,KAAKqF,gBAAgBjE,EAAMkE,MAAMlE,EAAOA,EAAMmG,QAEhDrG,EAAYlB,KAAKkB,YACjBD,EAAajB,KAAKyD,eAAc,GAEhCzD,KAAKwC,eAAepB,EAAOO,EAAIL,EAAMJ,EAAWD,IAI9CuG,EAAe,CAACpG,EAAcO,KAChC3B,KAAKyC,cAAcrB,EAAOO,EAAIL,EAAMJ,EAAWD,IAI7CwG,EAAerG,IACjBpB,KAAKkE,YAAYE,gBACV9C,EAAKoG,eACLpG,EAAKqG,WAGZ,IAAIJ,EAA8BnG,EAAMmG,OACxC,GAAKA,EAAOpH,eAAiBoH,EAAOpH,cAAcY,OAASf,KAA3D,CAIA,GAFAsB,EAAKvB,GAAKwH,EAENjG,EAAK4E,iBAAkB,CACzB,IAAI0B,EAAe7H,EAAGI,cAAcY,KAChC6G,EAAavC,gBAAgBjE,EAAMkE,OACrCsC,EAAavC,gBAAgBjE,EAAMkE,MAAMlE,EAAOmG,GAElD3H,EAAYE,MAAMsE,OAAOrE,GACzB6H,EAAaxF,OAAOmC,aAAaC,KAAKlD,GACtCsG,EAAanD,6BAEN1E,EAAGI,qBACHmB,EAAKvB,GACZA,EAAGqE,cAEE9C,EAAKO,mBAMR,EAAA8C,MAAME,wBAAwB0C,GAC9B,EAAA5C,MAAMC,QAAQtD,EAAMA,EAAKuG,OACzB7H,KAAK8H,cAAcP,EAAQjG,GAC3BtB,KAAKoC,OAAO2F,QAAQzG,KAPpB,EAAAqD,MAAME,wBAAwB0C,GAC9BvH,KAAK8H,cAAcP,EAAQjG,IAQzBtB,KAAKqF,gBAAgBjE,EAAMkE,OAC7BtF,KAAKqF,gBAAgBjE,EAAMkE,MAAMlE,EAAOmG,GAI5CvH,KAAKgF,yBACLhF,KAAKmF,sBAELnF,KAAKoC,OAAOgD,cAuBd,OApBAxF,EAAYE,MACTG,UAAUF,EAAI,CACbiI,MAAOV,EACPW,KAAMR,EACNS,KAAMV,IAEPtH,UAAUH,EAAI,CACbiI,MAAOV,EACPW,KAAMR,EACNU,OAAQX,IAEZlG,EAAKlB,SAAU,GAGXkB,EAAK4F,QAAUlH,KAAKU,KAAKyG,cAC3BvH,EAAYE,MAAMG,UAAUF,EAAI,YAE9BuB,EAAK8F,UAAYpH,KAAKU,KAAK2G,gBAC7BzH,EAAYE,MAAMI,UAAUH,EAAI,WAE3BC,MAIT,EAAAO,UAAUC,UAAUgC,eAAiB,SAASpB,EAAcO,EAAcL,EAAqBJ,EAAmBD,GAuBhH,GAtBAjB,KAAKoC,OAAOgG,aACTC,YAAY/G,GAEftB,KAAK8H,cAAc9H,KAAKkE,YAAa5C,GACrCtB,KAAKD,GAAGgF,YAAY/E,KAAKkE,aAGzB5C,EAAKvB,GAAKC,KAAKkE,YACf5C,EAAKgH,gBAAkB3G,EAAGC,SAC1BN,EAAKiH,UAAY5G,EAAGC,SAASF,IAC7BJ,EAAKoG,QAA0B,cAAftG,EAAMkE,YACfhE,EAAKqG,kBACLrG,EAAK0C,iBAEO,aAAf5C,EAAMkE,MAAuBhE,EAAKO,oBAEpC7B,KAAKoC,OAAO2F,QAAQzG,GACpBA,EAAKoG,SAAU,GAIjB1H,KAAKoC,OAAOoG,WAAWtH,EAAWD,EAAYjB,KAAKU,KAAK+H,UAAWzI,KAAKU,KAAKgI,YAAa1I,KAAKU,KAAKiI,aAAc3I,KAAKU,KAAKkI,YACzG,gBAAfxH,EAAMkE,KAAwB,CAChC,IAAIvF,EAAKuB,EAAKvB,GACV0G,EAAK7G,EAAYE,MAClBI,UAAUH,EAAI,SAAU,WAAYmB,GAAaI,EAAK2B,MAAQ,IAC9D/C,UAAUH,EAAI,SAAU,YAAakB,GAAcK,EAAK4B,MAAQ,IAC/D5B,EAAKuH,MAAQpC,EAAGvG,UAAUH,EAAI,SAAU,WAAYmB,EAAYI,EAAKuH,MACrEvH,EAAKwH,MAAQrC,EAAGvG,UAAUH,EAAI,SAAU,YAAakB,EAAaK,EAAKwH,QAQ/E,EAAAvI,UAAUC,UAAU4C,OAAS,SAAS9B,EAAqBvB,EAAyBsB,EAA8B0H,GAAe,GAC1HzH,IAEDyH,IACFzH,EAAK0C,kBAAmB,EACxBpE,EAAYE,MAAMyC,IAAIxC,EAAI,SAIxBuB,EAAKO,oBACTP,EAAKO,mBAAoB,EAEzB7B,KAAKoC,OAAOuD,WAAWrE,GACvBA,EAAKvB,GAAKuB,EAAKqC,aAAetC,EAASA,EAAStB,EAG5CA,EAAG+D,oBAEL/D,EAAGI,cAAgBJ,EAAG+D,0BACf/D,EAAG+D,oBACDxC,EAAKqC,qBAEPrC,EAAKvB,UACLA,EAAGI,cAEVH,KAAKoC,OAAO4G,qBAKhB,EAAAzI,UAAUC,UAAUiC,cAAgB,SAASrB,EAAcO,EAAcL,EAAqBJ,EAAmBD,GAC/G,IAQIgI,EARAlJ,EAAKuB,EAAKvB,IAAMqB,EAAMmG,OAEtB9F,EAAOE,EAAGC,SAASH,MAAQE,EAAGC,SAASH,KAAOH,EAAKgH,gBAAgB7G,MAASzB,KAAKU,KAAKgI,YAAc1I,KAAKU,KAAKkI,YAC9GlH,EAAMC,EAAGC,SAASF,KAAOC,EAAGC,SAASF,IAAMJ,EAAKgH,gBAAgB5G,KAAQ1B,KAAKU,KAAKiI,aAAe3I,KAAKU,KAAK+H,WAC3G3G,EAAIC,KAAKE,MAAMR,EAAOP,GACtBgB,EAAIH,KAAKE,MAAMP,EAAMT,GACrB8B,EAAIzB,EAAKyB,EACTC,EAAI1B,EAAK0B,EAGb,GAAmB,SAAf5B,EAAMkE,KAAiB,CACzB,GAAIhE,EAAK0C,iBAAkB,OAC3B,IAAIkF,EAAWvH,EAAGC,SAASF,IAAMJ,EAAKiH,UAetC,GAdAjH,EAAKiH,UAAY5G,EAAGC,SAASF,IAC7B,EAAAiD,MAAMwE,qBAAqBpJ,EAAI4B,EAAGC,SAAUsH,GAExC5H,EAAK4E,mBAAsB5E,EAAKqC,aAAe3D,KAAKoC,OAAOgH,UAAUtH,EAAGI,EAAGZ,GAC7EtB,KAAKoD,OAAO9B,EAAMF,EAAMmG,QAEpBjG,EAAKO,oBACPP,EAAKvB,GAAKC,KAAKkE,YACflE,KAAKoC,OAAO2F,QAAQzG,GACpBtB,KAAKD,GAAGgF,YAAY/E,KAAKkE,oBAElB5C,EAAKO,mBAGZP,EAAKQ,IAAMA,GAAKR,EAAKY,IAAMA,EAAG,YAG7B,GAAmB,WAAfd,EAAMkE,KAAoB,CACnC,GAAIxD,EAAI,EAAG,OAKX,GAHA,EAAA6C,MAAM0E,mBAAmBjI,EAAqBrB,EAAIkB,GAClD8B,EAAIhB,KAAKE,MAAMN,EAAG2H,KAAKC,MAAQrI,GAC/B8B,EAAIjB,KAAKE,MAAMN,EAAG2H,KAAKE,OAASvI,GAC5BK,EAAKyB,IAAMA,GAAKzB,EAAK0B,IAAMA,EAAG,OAClC,GAAI1B,EAAKqG,YAAcrG,EAAKqG,WAAW5E,IAAMA,GAAKzB,EAAKqG,WAAW3E,IAAMA,EAAG,OAC3EiG,GAAW,EAGb3H,EAAKqG,WAAa,CAAC7F,IAAGI,IAAGa,IAAGC,KAC5B,IAAIyG,EAA0B,CAC5B3H,EAAGH,EAAGC,SAASH,KAAOzB,KAAKU,KAAKkI,WAChC1G,EAAGP,EAAGC,SAASF,IAAM1B,KAAKU,KAAK+H,UAC/B1F,GAAIpB,EAAG2H,KAAO3H,EAAG2H,KAAKC,MAAQjI,EAAKyB,EAAI7B,GAAalB,KAAKU,KAAKkI,WAAa5I,KAAKU,KAAKgI,YACrF1F,GAAIrB,EAAG2H,KAAO3H,EAAG2H,KAAKE,OAASlI,EAAK0B,EAAI/B,GAAcjB,KAAKU,KAAK+H,UAAYzI,KAAKU,KAAKiI,cAExF,GAAI3I,KAAKoC,OAAOsH,cAAcpI,EAAM,CAACQ,IAAGI,IAAGa,IAAGC,IAAG9B,YAAWD,aAAYwI,SAAQ,CAC9EnI,EAAKgH,gBAAkB3G,EAAGC,SAC1B5B,KAAKoC,OAAOoG,WAAWtH,EAAWD,EAAYjB,KAAKU,KAAK+H,UAAWzI,KAAKU,KAAKgI,YAAa1I,KAAKU,KAAKiI,aAAc3I,KAAKU,KAAKkI,mBACrHtH,EAAKqI,UACRV,GAAY3H,EAAKsI,SAAYtI,EAAKsI,QAAsBC,iBAC5D7J,KAAKgF,yBAEL,IAAIuC,EAASnG,EAAMmG,OACnBvH,KAAK8H,cAAcP,EAAQjG,GACvBtB,KAAKqF,gBAAgBjE,EAAMkE,OAC7BtF,KAAKqF,gBAAgBjE,EAAMkE,MAAMlE,EAAOmG,KAU9C,EAAAhH,UAAUC,UAAUsJ,QAAU,SAASC,EAAuBC,GAC5D,OAAIhK,KAAKU,KAAKC,YACd,EAAAJ,UAAUmG,YAAYqD,GAAKpD,SAAQ5G,IACjC,IAAIuB,EAAOvB,EAAGI,cACTmB,IAAQA,EAAK2F,SAClB3F,EAAK4F,QAAW8C,EACZ1I,EAAK4F,QACPtH,EAAYE,MAAMG,UAAUF,EAAI,WAChCA,EAAGoG,UAAU/B,OAAO,yBAEpBpE,KAAK0F,uBAAuBpE,GAC5B1B,EAAYE,MAAMG,UAAUF,EAAI,UAChCA,EAAGoG,UAAU/B,OAAO,4BAXSpE,MAsBnC,EAAAO,UAAUC,UAAUN,UAAY,SAAS6J,EAAuBC,GAC9D,OAAIhK,KAAKU,KAAKC,YACd,EAAAJ,UAAUmG,YAAYqD,GAAKpD,SAAQ5G,IACjC,IAAIuB,EAAOvB,EAAGI,cACTmB,IAAQA,EAAK2F,SAClB3F,EAAK8F,UAAa4C,EACd1I,EAAK8F,SACPxH,EAAYE,MAAMI,UAAUH,EAAI,YAEhCC,KAAK0F,uBAAuBpE,GAC5B1B,EAAYE,MAAMI,UAAUH,EAAI,eATHC,MAyBnC,EAAAO,UAAUC,UAAUyJ,QAAU,WAC5B,IAAIjK,KAAKU,KAAKC,WAId,OAHAX,KAAKkK,YAAW,GAChBlK,KAAKmK,cAAa,GAClBnK,KAAKoK,cAAc,WACZpK,MAWT,EAAAO,UAAUC,UAAU6J,OAAS,WAC3B,IAAIrK,KAAKU,KAAKC,WAId,OAHAX,KAAKkK,YAAW,GAChBlK,KAAKmK,cAAa,GAClBnK,KAAKoK,cAAc,UACZpK,MAUT,EAAAO,UAAUC,UAAU0J,WAAa,SAASI,EAAmBC,GAAoB,GAC/E,OAAIvK,KAAKU,KAAKC,aACdX,KAAKwK,eAAe7D,SAAQ5G,GAAMC,KAAK8J,QAAQ/J,EAAIuK,KAC/CC,IACFvK,KAAKU,KAAKyG,aAAemD,IAHMtK,MAcnC,EAAAO,UAAUC,UAAU2J,aAAe,SAASG,EAAmBC,GAAoB,GACjF,OAAIvK,KAAKU,KAAKC,aACdX,KAAKwK,eAAe7D,SAAQ5G,GAAMC,KAAKE,UAAUH,EAAIuK,KACjDC,IACFvK,KAAKU,KAAK2G,eAAiBiD,IAHItK,O,6DCrrBnC,MAAaH,EAKX,sBAAsB4K,GAEpB,OADA5K,EAAa6K,IAAM,IAAID,EAChB5K,EAAa6K,IAItB,aACE,OAAO7K,EAAa6K,KAAO7K,EAAa8K,eAAe9K,GAIlD,OAAOE,GACZ,OAAOC,MAjBX,kB,8DCLA,eAoBA,MAAa4K,EAqBX,YAAmBlK,EAA+B,IAhB3C,KAAAuE,WAA8B,GAC9B,KAAAV,aAAgC,GAgBrCvE,KAAK6K,OAASnK,EAAKmK,QAAU,GAC7B7K,KAAK8K,SAAWpK,EAAKoK,SACrB9K,KAAK+K,OAASrK,EAAKsK,MACnBhL,KAAK6C,OAASnC,EAAKmC,OACnB7C,KAAKiL,MAAQvK,EAAKuK,OAAS,GAGtB,cACL,OAAIjL,KAAKkL,YACTlL,KAAKkL,WAAY,EACjBlL,KAAKmL,WAAanL,KAAK+K,OACvB/K,KAAK+K,QAAS,GAHa/K,KAOtB,SACL,OAAKA,KAAKkL,WACVlL,KAAKkL,WAAY,EACjBlL,KAAK+K,OAAS/K,KAAKmL,kBACZnL,KAAKmL,WACLnL,KAAKoL,aACTC,WALyBrL,KAStB,kBAAkBsB,EAAqBgK,GAC7C,OAAQtL,KAAKgL,QAAUhL,KAAKuL,cAAgBjK,EAAKoG,SAAWpG,EAAKqI,WAAa2B,EAAGpJ,GAAKZ,EAAKY,GAKrF,eAAeZ,EAAqBgK,EAAKhK,EAAMkK,EAAyBC,EAAyB,IAIvG,GAHAzL,KAAK0L,YAAY,KAEjBF,EAAUA,GAAWxL,KAAKwL,QAAQlK,EAAMgK,IAC1B,OAAO,EAGrB,GAAIhK,EAAKoG,UAAY+D,EAAIE,SAAW3L,KAAKgL,OACnChL,KAAK4L,KAAKtK,EAAMkK,GAAU,OAAO,EAIvC,IAAIK,EAAOP,EACPtL,KAAK8L,kBAAkBxK,EAAMgK,KAC/BO,EAAO,CAAC/J,EAAG,EAAGiB,EAAG/C,KAAK6K,OAAQ3I,EAAGoJ,EAAGpJ,EAAGc,EAAGsI,EAAGtI,GAC7CwI,EAAUxL,KAAKwL,QAAQlK,EAAMuK,EAAMJ,EAAIM,OAGzC,IAAIC,GAAU,EACVC,EAA4B,CAACN,QAAQ,EAAMO,MAAM,GACrD,KAAOV,EAAUA,GAAWxL,KAAKwL,QAAQlK,EAAMuK,EAAMJ,EAAIM,OAAO,CAC9D,IAAII,EAqBJ,GAlBIX,EAAQvE,QAAU3F,EAAKoG,UAAYpG,EAAKqI,WAAa2B,EAAGpJ,EAAIZ,EAAKY,IAAMlC,KAAKgL,SAE5EhL,KAAKwL,QAAQA,EAAS,OAAF,wBAAMA,GAAO,CAAEtJ,EAAGZ,EAAKY,IAAIZ,KAAUtB,KAAKwL,QAAQA,EAAS,OAAF,wBAAMA,GAAO,CAAEtJ,EAAGoJ,EAAGpJ,EAAIsJ,EAAQxI,IAAI1B,KACpHA,EAAKqI,UAAarI,EAAKqI,WAAa2B,EAAGpJ,EAAIZ,EAAKY,EAChDiK,EAAQnM,KAAKoM,SAAS9K,EAAM,OAAF,sCAAMgK,GAAE,CAAEpJ,EAAGsJ,EAAQtJ,EAAIsJ,EAAQxI,IAAMiJ,IAC7DT,EAAQvE,QAAUkF,EACpB,EAAAxH,MAAMC,QAAQ0G,EAAIhK,IACRkK,EAAQvE,QAAUkF,GAASV,EAAIS,OAEzClM,KAAKoL,aACLE,EAAGpJ,EAAIsJ,EAAQtJ,EAAIsJ,EAAQxI,EAC3B,EAAA2B,MAAMC,QAAQtD,EAAMgK,IAEtBU,EAAUA,GAAWG,GAGrBA,EAAQnM,KAAKoM,SAASZ,EAAS,OAAF,sCAAMA,GAAO,CAAEtJ,EAAGoJ,EAAGpJ,EAAIoJ,EAAGtI,EAAG+I,KAAMzK,IAAS2K,KAExEE,EAAS,OAAOH,EACrBR,OAAUjG,EAEZ,OAAOyG,EAIF,QAAQD,EAAqBF,EAAOE,EAAMM,GAC/C,OAAOrM,KAAKiL,MAAMqB,MAAKxJ,GAAKA,IAAMiJ,GAAQjJ,IAAMuJ,GAAS,EAAA1H,MAAM4H,cAAczJ,EAAG+I,KAE3E,WAAWE,EAAqBF,EAAOE,EAAMM,GAClD,OAAOrM,KAAKiL,MAAMuB,QAAO1J,GAAKA,IAAMiJ,GAAQjJ,IAAMuJ,GAAS,EAAA1H,MAAM4H,cAAczJ,EAAG+I,KAI7E,gBAAgBvK,EAAqBmL,EAAsBC,GAChE,IAAKD,EAAEhD,OAASnI,EAAKqL,MAAO,OAC5B,IAiBInB,EAjBAoB,EAAKtL,EAAKqL,MACVE,EAAI,OAAH,UAAOJ,EAAEhD,MAuCd,OApCIoD,EAAE3K,EAAI0K,EAAG1K,GACX2K,EAAE7J,GAAK6J,EAAE3K,EAAI0K,EAAG1K,EAChB2K,EAAE3K,EAAI0K,EAAG1K,GAET2K,EAAE7J,GAAK4J,EAAG1K,EAAI2K,EAAE3K,EAEd2K,EAAE/K,EAAI8K,EAAG9K,GACX+K,EAAE9J,GAAK8J,EAAE/K,EAAI8K,EAAG9K,EAChB+K,EAAE/K,EAAI8K,EAAG9K,GAET+K,EAAE9J,GAAK6J,EAAG9K,EAAI+K,EAAE/K,EAIlB4K,EAAS/F,SAAQ7D,IACf,GAAIA,EAAEmE,SAAWnE,EAAE6J,MAAO,OAC1B,IAAIG,EAAKhK,EAAE6J,MACPI,EAAQC,OAAOC,UAAWC,EAAQF,OAAOC,UAAWE,EAAU,GAG9DP,EAAG1K,EAAI4K,EAAG5K,EACZ6K,GAAUF,EAAE3K,EAAI2K,EAAE7J,EAAK8J,EAAG5K,GAAK4K,EAAG9J,EACzB4J,EAAG1K,EAAE0K,EAAG5J,EAAI8J,EAAG5K,EAAE4K,EAAG9J,IAC7B+J,GAAUD,EAAG5K,EAAI4K,EAAG9J,EAAK6J,EAAE3K,GAAK4K,EAAG9J,GAEjC4J,EAAG9K,EAAIgL,EAAGhL,EACZoL,GAAUL,EAAE/K,EAAI+K,EAAE9J,EAAK+J,EAAGhL,GAAKgL,EAAG/J,EACzB6J,EAAG9K,EAAE8K,EAAG7J,EAAI+J,EAAGhL,EAAEgL,EAAG/J,IAC7BmK,GAAUJ,EAAGhL,EAAIgL,EAAG/J,EAAK8J,EAAE/K,GAAKgL,EAAG/J,GAErC,IAAIqK,EAAOrL,KAAKsL,IAAIH,EAAOH,GACvBK,EAAOD,IACTA,EAAUC,EACV5B,EAAU1I,MAGP0I,EAIF,WAAWzI,EAAWC,EAAWtB,EAAa4L,EAAeC,EAAgB9L,GAUlF,OARAzB,KAAKiL,MAAMtE,SAAQ7D,GACjBA,EAAE6J,MAAQ,CACRzK,EAAGY,EAAEZ,EAAIc,EAAItB,EACbI,EAAGgB,EAAEhB,EAAIiB,EAAItB,EACbsB,EAAGD,EAAEC,EAAIA,EAAItB,EAAO6L,EACpBtK,EAAGF,EAAEE,EAAIA,EAAItB,EAAM6L,KAGhBvN,KAIF,KAAKwN,EAAkBC,GAC5B,IAAKA,GAAKA,EAAExG,SAAWuG,GAAKA,EAAEvG,OAAQ,OAAO,EAE7C,SAASyG,IACP,IAAI5L,EAAI2L,EAAE3L,EAAGI,EAAIuL,EAAEvL,EAQnB,OAPAuL,EAAE3L,EAAI0L,EAAE1L,EAAG2L,EAAEvL,EAAIsL,EAAEtL,EACfsL,EAAExK,GAAKyK,EAAEzK,GACXwK,EAAE1L,EAAIA,EAAG0L,EAAEtL,EAAIuL,EAAEvL,EAAIuL,EAAEzK,IAEvBwK,EAAE1L,EAAIA,EAAG0L,EAAEtL,EAAIA,GAEjBsL,EAAEG,OAASF,EAAEE,QAAS,GACf,EAET,IAAIC,EAGJ,GAAIJ,EAAEzK,IAAM0K,EAAE1K,GAAKyK,EAAExK,IAAMyK,EAAEzK,IAAMwK,EAAE1L,IAAM2L,EAAE3L,GAAK0L,EAAEtL,IAAMuL,EAAEvL,KAAO0L,EAAW,EAAAjJ,MAAMkJ,WAAWL,EAAGC,IAChG,OAAOC,IACT,IAAiB,IAAbE,EAAJ,CAGA,GAAIJ,EAAEzK,IAAM0K,EAAE1K,GAAKyK,EAAE1L,IAAM2L,EAAE3L,IAAM8L,GAAY,EAAAjJ,MAAMkJ,WAAWL,EAAGC,IAAK,CACtE,GAAIA,EAAEvL,EAAIsL,EAAEtL,EAAG,CAAE,IAAI4L,EAAIN,EAAGA,EAAIC,EAAGA,EAAIK,EACvC,OAAOJ,IAQT,OAAO,GAGF,YAAY5L,EAAWI,EAAWa,EAAWC,GAClD,IAAIsI,EAAoB,CAACxJ,EAAGA,GAAK,EAAGI,EAAGA,GAAK,EAAGa,EAAGA,GAAK,EAAGC,EAAGA,GAAK,GAClE,OAAQhD,KAAKwL,QAAQF,GAIhB,UACL,GAA0B,IAAtBtL,KAAKiL,MAAM8C,OAAc,OAAO/N,KACpCA,KAAKgO,cACFtC,aACH,IAAIuC,EAAYjO,KAAKiL,MASrB,OARAjL,KAAKiL,MAAQ,GACbgD,EAAUtH,SAAQrF,IACXA,EAAK2F,SACR3F,EAAKa,cAAe,GAEtBnC,KAAK+H,QAAQzG,GAAM,GACnBA,EAAKqM,QAAS,KAET3N,KAAKkO,SAId,UAAiBlE,GACXhK,KAAK+K,SAAWf,IACpBhK,KAAK+K,OAASf,IAAO,EAChBA,GACHhK,KAAKoL,aAAaC,WAKtB,YAA8B,OAAOrL,KAAK+K,SAAU,EAG5C,WAAWoD,GAEjB,OADAnO,KAAKiL,MAAQ,EAAAtG,MAAMyJ,KAAKpO,KAAKiL,MAAOkD,EAAKnO,KAAK6K,QACvC7K,KAID,aAiCN,OAhCAA,KAAK0L,aAED1L,KAAKgL,MAEPhL,KAAKiL,MAAMtE,SAAQ7D,IACjB,GAAIA,EAAEuL,gBAAyB9I,IAAZzC,EAAE+E,OAAuB/E,EAAEZ,IAAMY,EAAE+E,MAAM3F,EAAG,OAC/D,IAAIoM,EAAOxL,EAAEZ,EACb,KAAOoM,EAAOxL,EAAE+E,MAAM3F,KAClBoM,EACYtO,KAAKwL,QAAQ1I,EAAG,CAAChB,EAAGgB,EAAEhB,EAAGI,EAAGoM,EAAMvL,EAAGD,EAAEC,EAAGC,EAAGF,EAAEE,MAE3DF,EAAE6K,QAAS,EACX7K,EAAEZ,EAAIoM,MAMZtO,KAAKiL,MAAMtE,SAAQ,CAAC7D,EAAGyL,KACrB,IAAIzL,EAAEmE,OACN,KAAOnE,EAAEZ,EAAI,GAAG,CACd,IAAIoM,EAAa,IAANC,EAAU,EAAIzL,EAAEZ,EAAI,EAE/B,GADuB,IAANqM,GAAYvO,KAAKwL,QAAQ1I,EAAG,CAAChB,EAAGgB,EAAEhB,EAAGI,EAAGoM,EAAMvL,EAAGD,EAAEC,EAAGC,EAAGF,EAAEE,IAC3D,MAIjBF,EAAE6K,OAAU7K,EAAEZ,IAAMoM,EACpBxL,EAAEZ,EAAIoM,MAILtO,KAQF,YAAYsB,EAAqB2H,IACtC3H,EAAOA,GAAQ,IACVkN,IAAMlN,EAAKkN,KAAO5D,EAAgB6D,cAGxBlJ,IAAXjE,EAAKQ,QAA8ByD,IAAXjE,EAAKY,GAA8B,OAAXZ,EAAKQ,GAAyB,OAAXR,EAAKY,IAC1EZ,EAAKa,cAAe,GAItB,IAAIuM,EAA0B,CAAE5M,EAAG,EAAGI,EAAG,EAAGa,EAAG,EAAGC,EAAG,GAiBrD,OAhBA,EAAA2B,MAAM+J,SAASpN,EAAMoN,GAEhBpN,EAAKa,qBAAuBb,EAAKa,aACjCb,EAAK8F,iBAAmB9F,EAAK8F,SAC7B9F,EAAK4F,eAAiB5F,EAAK4F,OAGX,iBAAV5F,EAAKQ,IAAsBR,EAAKQ,EAAIkL,OAAO1L,EAAKQ,IACtC,iBAAVR,EAAKY,IAAsBZ,EAAKY,EAAI8K,OAAO1L,EAAKY,IACtC,iBAAVZ,EAAKyB,IAAkBzB,EAAKyB,EAAIiK,OAAO1L,EAAKyB,IAClC,iBAAVzB,EAAK0B,IAAiB1B,EAAK0B,EAAIgK,OAAO1L,EAAK0B,IAClD2L,MAAMrN,EAAKQ,KAAWR,EAAKQ,EAAI4M,EAAS5M,EAAGR,EAAKa,cAAe,GAC/DwM,MAAMrN,EAAKY,KAAWZ,EAAKY,EAAIwM,EAASxM,EAAGZ,EAAKa,cAAe,GAC/DwM,MAAMrN,EAAKyB,KAAOzB,EAAKyB,EAAI2L,EAAS3L,GACpC4L,MAAMrN,EAAK0B,KAAM1B,EAAK0B,EAAI0L,EAAS1L,GAEhChD,KAAKqC,aAAaf,EAAM2H,GAI1B,aAAa3H,EAAqB2H,GAyCvC,OAvCI3H,EAAKuH,OAAQvH,EAAKyB,EAAIhB,KAAKsL,IAAI/L,EAAKyB,EAAGzB,EAAKuH,OAC5CvH,EAAKwH,OAAQxH,EAAK0B,EAAIjB,KAAKsL,IAAI/L,EAAK0B,EAAG1B,EAAKwH,OAC5CxH,EAAK2B,OAAQ3B,EAAKyB,EAAIhB,KAAKC,IAAIV,EAAKyB,EAAGzB,EAAK2B,OAC5C3B,EAAK4B,OAAQ5B,EAAK0B,EAAIjB,KAAKC,IAAIV,EAAK0B,EAAG1B,EAAK4B,OAE5C5B,EAAKyB,EAAI/C,KAAK6K,OAChBvJ,EAAKyB,EAAI/C,KAAK6K,OACLvJ,EAAKyB,EAAI,IAClBzB,EAAKyB,EAAI,GAGP/C,KAAK6C,QAAUvB,EAAK0B,EAAIhD,KAAK6C,OAC/BvB,EAAK0B,EAAIhD,KAAK6C,OACLvB,EAAK0B,EAAI,IAClB1B,EAAK0B,EAAI,GAGP1B,EAAKQ,EAAI,IACXR,EAAKQ,EAAI,GAEPR,EAAKY,EAAI,IACXZ,EAAKY,EAAI,GAGPZ,EAAKQ,EAAIR,EAAKyB,EAAI/C,KAAK6K,SACrB5B,EACF3H,EAAKyB,EAAI/C,KAAK6K,OAASvJ,EAAKQ,EAE5BR,EAAKQ,EAAI9B,KAAK6K,OAASvJ,EAAKyB,GAG5B/C,KAAK6C,QAAUvB,EAAKY,EAAIZ,EAAK0B,EAAIhD,KAAK6C,SACpCoG,EACF3H,EAAK0B,EAAIhD,KAAK6C,OAASvB,EAAKY,EAE5BZ,EAAKY,EAAIlC,KAAK6C,OAASvB,EAAK0B,GAIzB1B,EAGF,cAAcsN,GAEnB,OAAIA,EACK5O,KAAKiL,MAAMuB,QAAO1J,GAAKA,EAAE6K,SAAW,EAAAhJ,MAAMkK,QAAQ/L,EAAGA,EAAE+E,SAEzD7H,KAAKiL,MAAMuB,QAAO1J,GAAKA,EAAE6K,SAI1B,QAAQ1C,EAAyC6D,GAAY,GACnE,GAAI9O,KAAKkL,UAAW,OAAOlL,KAE3B,IAAI+O,GADJ9D,OAAmB1F,IAAV0F,EAAsB,GAAM+D,MAAMC,QAAQhE,GAASA,EAAQ,CAACA,IAC9CiE,OAAOlP,KAAKmP,iBAEnC,OADAnP,KAAK8K,UAAY9K,KAAK8K,SAASiE,EAAYD,GACpC9O,KAIF,aACL,OAAIA,KAAKkL,WACTlL,KAAKiL,MAAMtE,SAAQ7D,WACVA,EAAE6K,cACF7K,EAAE6E,cAHgB3H,KAWtB,cAML,OALAA,KAAKiL,MAAMtE,SAAQ7D,IACjBA,EAAE+E,MAAQ,EAAAlD,MAAMC,QAAQ,GAAI9B,UACrBA,EAAE6K,UAEX3N,KAAKuL,WAAavL,KAAKiL,MAAMmE,MAAKtM,GAAKA,EAAEmE,SAClCjH,KAIF,iBAOL,OANAA,KAAKiL,MAAMtE,SAAQ7D,IACb,EAAA6B,MAAMkK,QAAQ/L,EAAGA,EAAE+E,SACvB,EAAAlD,MAAMC,QAAQ9B,EAAGA,EAAE+E,OACnB/E,EAAE6K,QAAS,MAEb3N,KAAKqL,UACErL,KAIF,QAAQsB,EAAqB+N,GAAkB,GACpD,IAAIC,EACJ,GAAIA,EAAMtP,KAAKiL,MAAMqB,MAAKxJ,GAAKA,EAAE0L,MAAQlN,EAAKkN,MAAM,OAAOc,EAM3D,UAJAhO,EAAOtB,KAAKuP,YAAYjO,IACZO,yBACLP,EAAKkO,WAERlO,EAAKa,aAAc,CACrBnC,KAAK0L,aAEL,IAAK,IAAI6C,EAAI,KAAMA,EAAG,CACpB,IAAIzM,EAAIyM,EAAIvO,KAAK6K,OACb3I,EAAIH,KAAK0N,MAAMlB,EAAIvO,KAAK6K,QAC5B,GAAI/I,EAAIR,EAAKyB,EAAI/C,KAAK6K,OACpB,SAEF,IAAIxH,EAAM,CAACvB,IAAGI,IAAGa,EAAGzB,EAAKyB,EAAGC,EAAG1B,EAAK0B,GACpC,IAAKhD,KAAKiL,MAAMqB,MAAKxJ,GAAK,EAAA6B,MAAM4H,cAAclJ,EAAKP,KAAK,CACtDxB,EAAKQ,EAAIA,EACTR,EAAKY,EAAIA,SACFZ,EAAKa,aACZ,QAWN,OANAnC,KAAKiL,MAAMzG,KAAKlD,GAChB+N,GAAmBrP,KAAKiF,WAAWT,KAAKlD,GAExCtB,KAAK0P,eAAepO,GACpBtB,KAAKoL,aACFC,UACI/J,EAGF,WAAWA,EAAqBwN,GAAY,EAAMa,GAAe,GACtE,GAAK3P,KAAKiL,MAAMqB,MAAKxJ,GAAKA,IAAMxB,IAOhC,OANIqO,GACF3P,KAAKuE,aAAaC,KAAKlD,GAErBwN,IAAWxN,EAAKkO,YAAa,GAEjCxP,KAAKiL,MAAQjL,KAAKiL,MAAMuB,QAAO1J,GAAKA,IAAMxB,IACnCtB,KAAKoL,aACTC,QAAQ/J,EAAMwN,GAGZ,UAAUA,GAAY,GAE3B,cADO9O,KAAK4P,SACc,IAAtB5P,KAAKiL,MAAM8C,OAAqB/N,MACpC8O,GAAa9O,KAAKiL,MAAMtE,SAAQ7D,GAAKA,EAAE0M,YAAa,IACpDxP,KAAKuE,aAAevE,KAAKiL,MACzBjL,KAAKiL,MAAQ,GACNjL,KAAKqL,QAAQrL,KAAKuE,aAAcuK,IAMlC,cAAcxN,EAAqBmL,GACxC,GAAInL,EAAK2F,OAAQ,OAAO,EACxB,IAAKjH,KAAK6P,oBAAoBvO,EAAMmL,GAAI,OAAO,EAI/C,GAHAA,EAAEP,MAAO,GAGJlM,KAAK6C,OACR,OAAO7C,KAAKoM,SAAS9K,EAAMmL,GAI7B,IAAIqD,EACAC,EAAQ,IAAInF,EAAgB,CAC9BC,OAAQ7K,KAAK6K,OACbG,MAAOhL,KAAKgL,MACZC,MAAOjL,KAAKiL,MAAM+E,KAAIlN,GAChBA,IAAMxB,GACRwO,EAAa,OAAH,UAAOhN,GACVgN,GAEF,OAAP,UAAWhN,OAGf,IAAKgN,EAAY,OAAO,EAExB,IAAIG,EAAUF,EAAM3D,SAAS0D,EAAYrD,GAEzC,GAAIzM,KAAK6C,QAAUoN,IACjBA,EAAWF,EAAMG,UAAYlQ,KAAK6C,QAE7BoN,GAAS,CACZ,IAAIzE,EAAUxL,KAAKwL,QAAQlK,EAAMmL,GACjC,GAAIjB,GAAWxL,KAAK4L,KAAKtK,EAAMkK,GAE7B,OADAxL,KAAKqL,WACE,EAIb,QAAK4E,IAILF,EAAM9E,MAAMuB,QAAO1J,GAAKA,EAAE6K,SAAQhH,SAAQwJ,IACxC,IAAIrN,EAAI9C,KAAKiL,MAAMqB,MAAKkB,GAAKA,EAAEgB,MAAQ2B,EAAE3B,MACpC1L,IACL,EAAA6B,MAAMC,QAAQ9B,EAAGqN,GACjBrN,EAAE6K,QAAS,MAEb3N,KAAKqL,WACE,GAIF,UAAU/J,GACf,IAAKtB,KAAK6C,OAAQ,OAAO,EAEzB,IAAIkN,EAAQ,IAAInF,EAAgB,CAC9BC,OAAQ7K,KAAK6K,OACbG,MAAOhL,KAAKgL,MACZC,MAAOjL,KAAKiL,MAAM+E,KAAIlN,GAAa,OAAP,UAAWA,OAGzC,OADAiN,EAAMhI,QAAQzG,GACPyO,EAAMG,UAAYlQ,KAAK6C,OAIzB,UAAUf,EAAWI,EAAWZ,GACrC,GAAIA,EAAK0C,iBAAkB,OAAO,EAElC,GAAIlC,EAAI,GAAKA,GAAK9B,KAAK6K,QAAU3I,EAAI,EAAG,OAAO,EAC/C,GAAIlC,KAAK6C,OAAQ,OAAQX,GAAKlC,KAAK6C,OAC9B,GAAI7C,KAAKgL,MAAO,OAAO,EAG5B,IAAIoF,EAAMpQ,KAAKkQ,SACf,GAAIhO,EAAIkO,GAAa,IAANlO,EAAS,OAAO,EAC/B,GAAIA,EAAIkO,EAAK,OAAO,EAEpB,IAAK9O,EAAKO,kBAAmB,CAC3B,IAAIkO,EAAQ,IAAInF,EAAgB,CAC9BC,OAAQ7K,KAAK6K,OACbG,MAAOhL,KAAKgL,MACZC,MAAOjL,KAAKiL,MAAMuB,QAAO1J,GAAKA,IAAMxB,IAAM0O,KAAIlN,GAAa,OAAP,UAAWA,OAE7DwI,EAAK,OAAH,wBAAOhK,GAAI,CAAEQ,IAAGI,MAEtB,OADA6N,EAAMhI,QAAQuD,GACPA,EAAGpJ,IAAMZ,EAAKY,GAAKoJ,EAAGxJ,IAAMR,EAAKQ,EAE1C,OAAOR,EAAKO,kBAIP,oBAAoBP,EAAqB+O,GAI9C,OAFAA,EAAEtN,EAAIsN,EAAEtN,GAAKzB,EAAKyB,EAClBsN,EAAErN,EAAIqN,EAAErN,GAAK1B,EAAK0B,EACd1B,EAAKQ,IAAMuO,EAAEvO,GAAKR,EAAKY,IAAMmO,EAAEnO,IAE/BZ,EAAKuH,OAAQwH,EAAEtN,EAAIhB,KAAKsL,IAAIgD,EAAEtN,EAAGzB,EAAKuH,OACtCvH,EAAKwH,OAAQuH,EAAErN,EAAIjB,KAAKsL,IAAIgD,EAAErN,EAAG1B,EAAKwH,OACtCxH,EAAK2B,OAAQoN,EAAEtN,EAAIhB,KAAKC,IAAIqO,EAAEtN,EAAGzB,EAAK2B,OACtC3B,EAAK4B,OAAQmN,EAAErN,EAAIjB,KAAKC,IAAIqO,EAAErN,EAAG1B,EAAK4B,OAClC5B,EAAKyB,IAAMsN,EAAEtN,GAAKzB,EAAK0B,IAAMqN,EAAErN,GAIlC,SAAS1B,EAAqBmL,GACnC,IAAKnL,GAAQA,EAAK2F,SAAWwF,EAAG,OAAO,OACxBlH,IAAXkH,EAAEP,OAAoBO,EAAEP,MAAO,GAGhB,iBAARO,EAAE3K,IAAkB2K,EAAE3K,EAAIR,EAAKQ,GACvB,iBAAR2K,EAAEvK,IAAkBuK,EAAEvK,EAAIZ,EAAKY,GACvB,iBAARuK,EAAE1J,IAAkB0J,EAAE1J,EAAIzB,EAAKyB,GACvB,iBAAR0J,EAAEzJ,IAAkByJ,EAAEzJ,EAAI1B,EAAK0B,GAC1C,IAAIiG,EAAY3H,EAAKyB,IAAM0J,EAAE1J,GAAKzB,EAAK0B,IAAMyJ,EAAEzJ,EAC3CsI,EAAoB,CAACzC,KAAMvH,EAAKuH,KAAMC,KAAMxH,EAAKwH,KAAM7F,KAAM3B,EAAK2B,KAAMC,KAAM5B,EAAK4B,MAKvF,GAJA,EAAAyB,MAAMC,QAAQ0G,EAAImB,GAClBnB,EAAKtL,KAAKqC,aAAaiJ,EAAIrC,GAC3B,EAAAtE,MAAMC,QAAQ6H,EAAGnB,GAEb,EAAA3G,MAAMkK,QAAQvN,EAAMmL,GAAI,OAAO,EACnC,IAAI6D,EAA6B,EAAA3L,MAAMC,QAAQ,GAAItD,GAG/CuK,EAAOP,EAMPoB,EAAW1M,KAAKuQ,WAAWjP,EAAMuK,EAAMY,EAAEV,MACzCyE,GAAa,EACjB,GAAI9D,EAASqB,OAAQ,CAEnB,IAAIvC,EAAUlK,EAAKoG,UAAY+E,EAAEd,OAAS3L,KAAKyQ,gBAAgBnP,EAAMmL,EAAGC,GAAYA,EAAS,GAE3F8D,IADEhF,IACYxL,KAAK0P,eAAepO,EAAMgK,EAAIE,EAASiB,GAezD,OARI+D,IACFlP,EAAKqM,QAAS,EACd,EAAAhJ,MAAMC,QAAQtD,EAAMgK,IAElBmB,EAAEP,MACJlM,KAAKoL,aACFC,WAEG,EAAA1G,MAAMkK,QAAQvN,EAAMgP,GAGvB,SACL,OAAOtQ,KAAKiL,MAAMyF,QAAO,CAACN,EAAKtN,IAAMf,KAAKC,IAAIoO,EAAKtN,EAAEZ,EAAIY,EAAEE,IAAI,GAG1D,YAAY1B,GAMjB,OALKA,EAAK+M,YACR/M,EAAK+M,WAAY,SACV/M,EAAKqI,UACZ3J,KAAK2Q,eAEA3Q,KAGF,YACL,IAAI8C,EAAI9C,KAAKiL,MAAMqB,MAAKxJ,GAAKA,EAAEuL,YAK/B,OAJIvL,WACKA,EAAEuL,iBACFvL,EAAE6G,WAEJ3J,KAIF,KAAK4Q,GAAc,GACxB,IAAIC,EAA2B,GAe/B,OAdA7Q,KAAK0L,aACL1L,KAAKiL,MAAMtE,SAAQ7D,IACjB,IAAIC,EAAmB,GACvB,IAAK,IAAI+N,KAAOhO,EAAoB,MAAXgO,EAAI,IAAyB,OAAXhO,EAAEgO,SAA4BvL,IAAXzC,EAAEgO,KAAqB/N,EAAE+N,GAAOhO,EAAEgO,IAE3FF,UAAoB7N,EAAEhD,UACpBgD,EAAEhC,KAEJgC,EAAEZ,qBAAqBY,EAAEZ,aACzBY,EAAEqE,iBAAiBrE,EAAEqE,SACrBrE,EAAEmE,eAAenE,EAAEmE,OACnBnE,EAAEkE,eAAelE,EAAEkE,OACxB4J,EAAQrM,KAAKzB,MAER8N,EAIF,mBAAmB5F,GACxB,OAAKjL,KAAK4P,UAAY5P,KAAK+Q,0BAE3B/Q,KAAK4P,SAASjJ,SAAQ,CAACqK,EAAQnG,KAC7B,IAAKmG,GAAUnG,IAAW7K,KAAK6K,OAAQ,OAAO7K,KAC1C6K,EAAS7K,KAAK6K,OAChB7K,KAAK4P,SAAS/E,QAAUtF,EAKxB0F,EAAMtE,SAAQrF,IACZ,IAAIwB,EAAIkO,EAAO1E,MAAK2E,GAAKA,EAAEzC,MAAQlN,EAAKkN,MACxC,IAAK1L,EAAG,OAAO9C,KACf,IAAIkR,EAAQrG,EAAS7K,KAAK6K,OAGtBvJ,EAAKY,IAAMZ,EAAKuG,MAAM3F,IACxBY,EAAEZ,GAAMZ,EAAKY,EAAIZ,EAAKuG,MAAM3F,GAG1BZ,EAAKQ,IAAMR,EAAKuG,MAAM/F,IACxBgB,EAAEhB,EAAIC,KAAKE,MAAMX,EAAKQ,EAAIoP,IAGxB5P,EAAKyB,IAAMzB,EAAKuG,MAAM9E,IACxBD,EAAEC,EAAIhB,KAAKE,MAAMX,EAAKyB,EAAImO,UAzB0BlR,KA6CvD,iBAAiBmR,EAAmBtG,EAAgBI,EAAwB+F,EAAwB,aACzG,IAAKhR,KAAKiL,MAAM8C,QAAUoD,IAActG,EAAQ,OAAO7K,KAMvD,GAHAA,KAAKoR,YAAYpR,KAAKiL,MAAOkG,GAGd,IAAXtG,GAAgBI,GAASA,EAAM8C,OAAQ,CACzC,IAAIrM,EAAM,EACVuJ,EAAMtE,SAAQ7D,IACZA,EAAEhB,EAAI,EACNgB,EAAEC,EAAI,EACND,EAAEZ,EAAIH,KAAKC,IAAIc,EAAEZ,EAAGR,GACpBA,EAAMoB,EAAEZ,EAAIY,EAAEE,UAGhBiI,EAAQ,EAAAtG,MAAMyJ,KAAKpO,KAAKiL,OAAQ,EAAGkG,GAIrC,IAAIE,EAAarR,KAAK4P,SAAS/E,IAAW,GAEtCyG,EAAYtR,KAAK4P,SAAS7B,OAAS,EACb,IAAtBsD,EAAWtD,QAAgBlD,EAASsG,GAAatG,EAASyG,IAC5DD,EAAarR,KAAK4P,SAAS0B,IAAc,GACrCD,EAAWtD,SAEboD,EAAYG,EACZD,EAAW1K,SAAQ4K,IACjB,IAAIC,EAAIvG,EAAMwG,WAAU3O,GAAKA,EAAE0L,MAAQ+C,EAAU/C,OACtC,IAAPgD,IAEFvG,EAAMuG,GAAG1P,EAAIyP,EAAUzP,EACvBmJ,EAAMuG,GAAGtP,EAAIqP,EAAUrP,EACvB+I,EAAMuG,GAAGzO,EAAIwO,EAAUxO,MAG3BsO,EAAa,KAKjB,IAAIK,EAA4B,GAahC,GAZAL,EAAW1K,SAAQ4K,IACjB,IAAIC,EAAIvG,EAAMwG,WAAU3O,GAAKA,EAAE0L,MAAQ+C,EAAU/C,OACtC,IAAPgD,IAEFvG,EAAMuG,GAAG1P,EAAIyP,EAAUzP,EACvBmJ,EAAMuG,GAAGtP,EAAIqP,EAAUrP,EACvB+I,EAAMuG,GAAGzO,EAAIwO,EAAUxO,EACvB2O,EAASlN,KAAKyG,EAAMuG,IACpBvG,EAAM0G,OAAOH,EAAG,OAIhBvG,EAAM8C,OACR,GAAsB,mBAAXiD,EACTA,EAAOnG,EAAQsG,EAAWO,EAAUzG,OAC/B,CACL,IAAIiG,EAAQrG,EAASsG,EACjBS,EAAmB,SAAXZ,GAAgC,cAAXA,EAC7Ba,EAAoB,UAAXb,GAAiC,cAAXA,EACnC/F,EAAMtE,SAAQrF,IACZA,EAAKQ,EAAgB,IAAX+I,EAAe,EAAK+G,EAAO7P,KAAKE,MAAMX,EAAKQ,EAAIoP,GAASnP,KAAKsL,IAAI/L,EAAKQ,EAAG+I,EAAS,GAC5FvJ,EAAKyB,EAAiB,IAAX8H,GAA8B,IAAdsG,EAAmB,EAC5CU,EAAS9P,KAAKE,MAAMX,EAAKyB,EAAImO,IAAU,EAAMnP,KAAKsL,IAAI/L,EAAKyB,EAAG8H,GAChE6G,EAASlN,KAAKlD,MAEhB2J,EAAQ,GAeZ,OAVAyG,EAAW,EAAA/M,MAAMyJ,KAAKsD,GAAW,EAAG7G,GACpC7K,KAAK+Q,0BAA2B,EAChC/Q,KAAKgO,cACLhO,KAAKiL,MAAQ,GACbyG,EAAS/K,SAAQrF,IACftB,KAAK+H,QAAQzG,GAAM,GACnBA,EAAKqM,QAAS,IACb3N,MACHA,KAAKkO,gBACElO,KAAK+Q,yBACL/Q,KASF,YAAYiL,EAAwBJ,EAAgBiH,GAAQ,GACjE,IAAIC,EAAiB,GAOrB,OANA9G,EAAMtE,SAAQ,CAAC7D,EAAGyL,KAChBzL,EAAE0L,IAAM1L,EAAE0L,KAAO5D,EAAgB6D,SACjCsD,EAAKxD,GAAK,CAACzM,EAAGgB,EAAEhB,EAAGI,EAAGY,EAAEZ,EAAGa,EAAGD,EAAEC,EAAGyL,IAAK1L,EAAE0L,QAE5CxO,KAAK4P,SAAWkC,EAAQ,GAAK9R,KAAK4P,UAAY,GAC9C5P,KAAK4P,SAAS/E,GAAUkH,EACjB/R,KAKF,YAAYsB,GACjB,IAAK,IAAI0Q,KAAQ1Q,EACC,MAAZ0Q,EAAK,IAAuB,QAATA,UAAuB1Q,EAAK0Q,GAErD,OAAOhS,MA1zBX,oBAmBiB,EAAAyO,OAAS,G,6HCrC1B,cACA,SAGA,SAIA,UACA,SACA,UA0BA,MAAMwD,EAAiC,CACrCpH,OAAQ,GACRqH,OAAQ,EACRrP,OAAQ,EACRsP,UAAW,kBACXC,iBAAkB,yBAClBC,gBAAiB,GACjBvL,OAAQ,2BACRwL,YAAa,KACbC,aAAa,EACbtR,WAAY,OACZuR,mBAAoB,IACpBC,OAAQ,GACRC,MAAM,EACNC,SAAU,IACV3H,OAAO,EACPrK,YAAY,EACZiS,SAAS,EACTC,wBAAwB,EACxB3S,UAAW,CACT4S,UAAU,EACVC,QAAS,MAEX9S,UAAW,CACT6G,OAAQ,2BACRC,QAAQ,EACRC,SAAU,QAEZG,aAAa,EACbE,eAAe,EACf2L,IAAK,OACLnN,WAAW,EACXI,iBAAkB,CAChBnF,OAAQ,oBAEVmS,WAAY,KACZC,eAAgB,KAChBC,sBAAsB,EACtBC,sBAAsB,GAaxB,MAAa7S,EAwIX,YAAmBR,EAAqBW,EAAyB,IAjB1D,KAAA2E,gBAAkB,GAkBvBrF,KAAKD,GAAKA,GACVW,EAAOA,GAAQ,IAGN0P,MACP1P,EAAKwR,OAASxR,EAAKmC,OAASnC,EAAK0P,WAC1B1P,EAAK0P,KAEd,IAAIiD,EAAU,EAAA1O,MAAM2O,SAASvT,EAAGwT,aAAa,WAGzC7E,EAAQ,+BAAyBuD,GAAY,CAC/CpH,OAAQ,EAAAlG,MAAM2O,SAASvT,EAAGwT,aAAa,eAAiB,GACxDrB,OAAQmB,GAAoB,EAAA1O,MAAM2O,SAASvT,EAAGwT,aAAa,gBAAkB,EAC7E1Q,OAAQwQ,GAAoB,EAAA1O,MAAM2O,SAASvT,EAAGwT,aAAa,gBAAkB,EAC7E5S,WAAY,EAAAgE,MAAM6O,OAAOzT,EAAGwT,aAAa,gBAAiB,EAC1DE,iBAAkB,wBAA0C,IAAhB1R,KAAK2R,UAAkBC,QAAQ,GAC3Ed,uBAAwBnS,EAAKmS,yBAA0B,EACvD3S,UAAW,CACT4S,UAAYpS,EAAKmS,uBACjBE,QAAS,MAEX9S,UAAW,CACT6G,QAASpG,EAAK4R,YAAc,IAAM5R,EAAK4R,YAAe5R,EAAKoG,OAASpG,EAAKoG,OAAS,KAAQ,2BAC1FC,QAAQ,EACRC,SAAU,QAEZf,iBAAkB,CAChBnF,OAAQ,KAAOJ,EAAKyR,WAAa,sBAGjCpS,EAAGwT,aAAa,gBAClB7E,EAASkE,QAAU,EAAAjO,MAAM6O,OAAOzT,EAAGwT,aAAa,gBAGlDvT,KAAKU,KAAO,EAAAiE,MAAM+J,SAAShO,EAAMgO,GACjChO,EAAO,KACPV,KAAK4T,aAGoB,IAArB5T,KAAKU,KAAKmK,SAAiB7K,KAAKU,KAAKyS,sBAAwBnT,KAAK6T,qBAAuB7T,KAAKU,KAAKiS,WACrG3S,KAAK8T,YAAc9T,KAAKU,KAAKmK,OAC7B7K,KAAKU,KAAKmK,OAAS,GAGC,SAAlB7K,KAAKU,KAAKsS,MACZhT,KAAKU,KAAKsS,IAA8B,QAAvBjT,EAAGgU,MAAMC,WAGxBhU,KAAKU,KAAKsS,KACZhT,KAAKD,GAAGoG,UAAUC,IAAI,kBAIxB,IAAI6N,EAAmB,EAAAtP,MAAMuP,eAAelU,KAAKD,GAAIkS,EAAaE,WAuClE,GAtCI8B,GAAoBA,EAAiB9T,gBACvCH,KAAKU,KAAKyT,UAAYF,EAAiB9T,cACvCH,KAAKU,KAAKyT,UAAUvK,QAAU5J,KAC9BA,KAAKD,GAAGoG,UAAUC,IAAI,sBAGxBpG,KAAKoU,kBAA8C,SAAzBpU,KAAKU,KAAKO,WAChCjB,KAAKoU,mBAA8C,YAAzBpU,KAAKU,KAAKO,WAEtCjB,KAAKiB,gBAAWsE,GAAW,GAE3BvF,KAAKiB,WAAWjB,KAAKU,KAAKO,YAAY,GAGxCjB,KAAKD,GAAGoG,UAAUC,IAAIpG,KAAKU,KAAK+S,kBAEhCzT,KAAKqU,kBAELrU,KAAKoC,OAAS,IAAI,EAAAwI,gBAAgB,CAChCC,OAAQ7K,KAAKU,KAAKmK,OAClBG,MAAOhL,KAAKU,KAAKsK,MACjBnI,OAAQ7C,KAAKU,KAAKmC,OAClBiI,SAAU,CAACwJ,EAASxF,GAAY,KAC9B,IAAIhG,EAAO,EACX9I,KAAKoC,OAAO6I,MAAMtE,SAAQ7D,IAAOgG,EAAO/G,KAAKC,IAAI8G,EAAMhG,EAAEZ,EAAIY,EAAEE,MAC/DsR,EAAQ3N,SAAQ7D,IACd,IAAI/C,EAAK+C,EAAE/C,GACP+O,GAAahM,EAAE0M,YACbzP,GAAIA,EAAGqE,gBACJtB,EAAE0M,YAETxP,KAAK8H,cAAc/H,EAAI+C,MAG3B9C,KAAKuU,eAAc,EAAOzL,MAI1B9I,KAAKU,KAAKgS,KAAM,CAClB1S,KAAKgO,cACL,IAAIwG,EAA2C,GAC/CxU,KAAKwK,eAAe7D,SAAQ5G,IAC1B,IAAI+B,EAAI2S,SAAS1U,EAAGwT,aAAa,SAC7BrR,EAAIuS,SAAS1U,EAAGwT,aAAa,SACjCiB,EAAShQ,KAAK,CACZzE,KAEAwO,GAAIvB,OAAO2B,MAAM7M,GAAK,IAAOA,IAAMkL,OAAO2B,MAAMzM,GAAK,IAAOA,GAAKlC,KAAKU,KAAKmK,YAG/E2J,EAASpG,MAAK,CAACZ,EAAGC,IAAMD,EAAEe,EAAId,EAAEc,IAAG5H,SAAQ+N,GAAK1U,KAAK2U,gBAAgBD,EAAE3U,MACvEC,KAAKkO,SAGPlO,KAAK4U,aAAa5U,KAAKU,KAAKkS,SAE5B5S,KAAKuU,gBACmB,IAApBvU,KAAKU,KAAKmK,QACZ7K,KAAKD,GAAGoG,UAAUC,IAAI,cAAgBpG,KAAKU,KAAKmK,QAI9C7K,KAAKU,KAAKL,QAAQE,EAAU8F,YAAYrG,KAAKU,KAAKL,OAAQL,KAAKU,KAAKJ,sBACjEN,KAAKU,KAAKL,cACVL,KAAKU,KAAKJ,cAEjBN,KAAK4F,mBACL5F,KAAKS,qBACLT,KAAK6U,2BArPA,YAAYC,EAA4B,GAAIC,EAA+B,eAChF,IAAIhV,EAAKQ,EAAUyU,eAAeD,GAClC,OAAKhV,GASAA,EAAGkV,YACNlV,EAAGkV,UAAY,IAAI1U,EAAUR,EAAI,OAAF,UAAM+U,KAEhC/U,EAAGkV,YAXkB,iBAAfF,EACTG,QAAQC,MAAM,wDAA0DJ,EAA1D,+IAGdG,QAAQC,MAAM,gDAET,MAiBJ,eAAeL,EAA4B,GAAInS,EAAW,eAC/D,IAAIyS,EAAqB,GAYzB,OAXA7U,EAAU8U,gBAAgB1S,GAAUgE,SAAQ5G,IACrCA,EAAGkV,YACNlV,EAAGkV,UAAY,IAAI1U,EAAUR,EAAI,OAAF,UAAM+U,WAC9BA,EAAQzU,cAAeyU,EAAQxU,eAExC8U,EAAM5Q,KAAKzE,EAAGkV,cAEK,IAAjBG,EAAMrH,QACRmH,QAAQC,MAAM,wDAA0DxS,EAA1D,+IAGTyS,EAUF,eAAeE,EAAqB7J,EAAwB,IACjE,IAAK6J,EAAQ,OAAO,KAGpB,IAAIC,EAAMjS,SAASkS,eAAeC,qBAClCF,EAAIG,KAAKC,UAAY,0BAA0BlK,EAAImK,OAAS,aAC5D,IAAI7V,EAAKwV,EAAIG,KAAKG,SAAS,GAC3BP,EAAOvQ,YAAYhF,GAGnB,IAAIgB,EAAOR,EAAUuV,KAAKrK,EAAK1L,GAI/B,OAHI0L,EAAIoK,UACN9U,EAAKgV,KAAKtK,EAAIoK,UAET9U,EAmBT,kBACE,IAAKf,KAAKgW,aAAc,CACtB,IAAIC,EAAmB3S,SAAS4S,cAAc,OAC9CD,EAAiBE,UAAY,sBACzBnW,KAAKU,KAAK2R,kBACZ4D,EAAiBN,UAAY3V,KAAKU,KAAK2R,iBAEzCrS,KAAKgW,aAAe1S,SAAS4S,cAAc,OAC3ClW,KAAKgW,aAAa7P,UAAUC,IAAIpG,KAAKU,KAAK0R,iBAAkBH,EAAaE,UAAWnS,KAAKU,KAAKyR,WAC9FnS,KAAKkE,YAAYa,YAAYkR,GAE/B,OAAOjW,KAAKgW,aA0KP,UAAUjM,EAA0C+K,GAGzD,GAAIsB,UAAUrI,OAAS,EAAG,CACxBmH,QAAQmB,KAAK,kIAEb,IAAI7I,EAAI4I,UAAW7H,EAAI,EACrB9C,EAAuB,CAAE3J,EAAE0L,EAAEe,KAAMrM,EAAEsL,EAAEe,KAAMxL,EAAEyK,EAAEe,KAAMvL,EAAEwK,EAAEe,KAAMpM,aAAaqL,EAAEe,KAC9EtL,KAAKuK,EAAEe,KAAM1F,KAAK2E,EAAEe,KAAMrL,KAAKsK,EAAEe,KAAMzF,KAAK0E,EAAEe,KAAM+H,GAAG9I,EAAEe,MAC7D,OAAOvO,KAAKuW,UAAUxM,EAAK0B,GAO7B,IAAI1L,EACJ,GAAmB,iBAARgK,EAAkB,CAC3B,IAAIwL,EAAMjS,SAASkS,eAAeC,qBAClCF,EAAIG,KAAKC,UAAY5L,EACrBhK,EAAKwV,EAAIG,KAAKG,SAAS,QAClB,GAAyB,IAArBO,UAAUrI,QAAqC,IAArBqI,UAAUrI,cAR9BxI,KADUxC,EASsDgH,GARtEjI,QAA2ByD,IAARxC,EAAEb,QAA2BqD,IAARxC,EAAEA,QAA2BwC,IAARxC,EAAEC,QAAiCuC,IAAdxC,EAAEyT,SAQR,CACrF,IAAIA,EAAUzM,GAAOA,EAAwByM,SAAgB,GAC7D1B,EAAU/K,EACV,IAAIwL,EAAMjS,SAASkS,eAAeC,qBAClCF,EAAIG,KAAKC,UAAY,+BAA+B3V,KAAKU,KAAKyR,WAAa,4CAA4CqE,gBACvHzW,EAAKwV,EAAIG,KAAKG,SAAS,QAEvB9V,EAAKgK,EAhBP,IAA2BhH,EAsB3B,IAAI0T,EAAUzW,KAAK0D,UAAU3D,GAkB7B,OAjBA+U,EAAU,OAAH,UAAQA,GAAW,IAC1B,EAAAnQ,MAAM+J,SAASoG,EAAS2B,GACxBzW,KAAKoC,OAAOmN,YAAYuF,GACxB9U,KAAK8E,WAAW/E,EAAI+U,GAEhB9U,KAAK0W,iBACP1W,KAAKD,GAAG4W,QAAQ5W,GAEhBC,KAAKD,GAAGgF,YAAYhF,GAItBC,KAAK2U,gBAAgB5U,GAAI,EAAM+U,GAC/B9U,KAAKgF,yBACLhF,KAAKkF,mBACLlF,KAAKmF,sBAEEpF,EAQF,KAAK6W,GAAc,EAAMC,GAAc,GAE5C,IAAIC,EAAO9W,KAAKoC,OAAO2U,KAAKH,GAe5B,GAZIA,GACFE,EAAKnQ,SAAQ7D,IACX,GAAIA,EAAE/C,KAAO+C,EAAE8G,QAAS,CACtB,IAAIoN,EAAMlU,EAAE/C,GAAGgG,cAAc,4BAC7BjD,EAAE0T,QAAUQ,EAAMA,EAAIrB,eAAYpQ,EAC7BzC,EAAE0T,gBAAgB1T,EAAE0T,eAClB1T,EAAE/C,OAMX8W,EAAa,CAGfC,EAAKnQ,SAAQ7D,IACPA,EAAE8G,UACJ9G,EAAE8G,QAAW9G,EAAE8G,QAAsBmN,KAAKH,EAAaC,OAI3D,IAAIpK,EAAC,iBAAyBzM,KAAKU,MAUnC,OARI+L,EAAE9D,eAAiB8D,EAAEhE,WAAagE,EAAE/D,cAAgB+D,EAAE7D,YAAc6D,EAAEhE,YAAcgE,EAAE/D,cACxF+D,EAAEgG,OAAShG,EAAEhE,iBACNgE,EAAEhE,iBAAkBgE,EAAE/D,mBAAoB+D,EAAE9D,oBAAqB8D,EAAE7D,YAExE6D,EAAEuG,OAAqC,QAA5BhT,KAAKD,GAAGgU,MAAMC,aAAwBvH,EAAEuG,IAAM,QACzDhT,KAAKoU,oBAAqB3H,EAAExL,WAAa,QAC7C,EAAA0D,MAAMsS,sBAAsBxK,EAAGwF,GAC/BxF,EAAEoJ,SAAWiB,EACNrK,EAGT,OAAOqK,EAaF,KAAK9F,EAA2BkG,GAAqG,GAC1I,IAAIC,EAAQ5W,EAAUoE,MAAMyJ,KAAK4C,GAAS,EAAGhR,KAAK8T,aAAe9T,KAAKU,KAAKmK,QAC3E7K,KAAK0W,kBAAmB,EAIpB1W,KAAK8T,aAAe9T,KAAK8T,cAAgB9T,KAAKU,KAAKmK,QAAUsM,EAAM/H,MAAKtM,GAAMA,EAAEhB,EAAIgB,EAAEC,EAAK/C,KAAKU,KAAKmK,WACvG7K,KAAK+Q,0BAA2B,EAChC/Q,KAAKoC,OAAOgP,YAAY+F,EAAOnX,KAAK8T,aAAa,IAGnD,IAAIsD,EAA2B,GAkD/B,OAjDApX,KAAKgO,cAGDkJ,GACc,IAAIlX,KAAKoC,OAAO6I,OACtBtE,SAAQ7D,IACLqU,EAAM7K,MAAKvJ,GAAKD,EAAEwT,KAAOvT,EAAEuT,OAEP,mBAAnB,EACRY,EAAalX,KAAM8C,GAAG,IAEtBsU,EAAQ5S,KAAK1B,GACb9C,KAAKqX,aAAavU,EAAE/C,IAAI,GAAM,QAOtCoX,EAAMxQ,SAAQ5D,IACZ,IAAIuU,EAAQvU,EAAEuT,IAAe,IAATvT,EAAEuT,GAAYtW,KAAKoC,OAAO6I,MAAMqB,MAAKxJ,GAAKA,EAAEwT,KAAOvT,EAAEuT,UAAM/Q,EAC/E,GAAI+R,GAEF,GADAtX,KAAKuX,OAAOD,EAAKvX,GAAIgD,GACjBA,EAAE6G,SAAY7G,EAAE6G,QAA6BiM,SAAU,CACzD,IAAImB,EAAMM,EAAKvX,GAAGgG,cAAc,eAC5BiR,GAAOA,EAAI/B,YACb+B,EAAI/B,UAAUc,KAAMhT,EAAE6G,QAA6BiM,UACnD7V,KAAK0W,kBAAmB,SAGvB,GAAIQ,IAEPnU,EAD2B,mBAAnB,EACJmU,EAAalX,KAAM+C,GAAG,GAAM5C,cAE5BH,KAAKuW,UAAUxT,GAAG5C,eAElByJ,QAAS,CACb,IAAI4M,EAAUzT,EAAEhD,GAAGgG,cAAc,4BACjChD,EAAE6G,QAAUrJ,EAAUiX,QAAQhB,EAASzT,EAAE6G,aAK/C5J,KAAKoC,OAAOmC,aAAe6S,EAC3BpX,KAAKkO,gBAGElO,KAAK+Q,gCACL/Q,KAAK0W,iBACL1W,KAMF,cAEL,OADAA,KAAKoC,OAAO4L,cACLhO,KAMF,cAAcyX,GAAa,GAChC,OAAIzX,KAAKU,KAAKO,YAAuC,SAAzBjB,KAAKU,KAAKO,YACjCwW,GAAezX,KAAKU,KAAKwS,gBAA+C,OAA7BlT,KAAKU,KAAKwS,eAQnDnR,KAAKE,MAAMjC,KAAKD,GAAGyB,wBAAwBgI,QAAUiL,SAASzU,KAAKD,GAAGwT,aAAa,mBAPjFvT,KAAKU,KAAKO,WAwBd,WAAW+I,EAAsBuN,GAAS,GAY/C,GATIA,QAAkBhS,IAARyE,GACRhK,KAAKoU,qBAA+B,SAARpK,KAC9BhK,KAAKoU,kBAA6B,SAARpK,EAC1BhK,KAAK6U,4BAGG,YAAR7K,GAA6B,SAARA,IAAkBA,OAAMzE,QAGrCA,IAARyE,EAAmB,CACrB,IAAI0N,GAAgB1X,KAAKU,KAAKgI,YAA0B1I,KAAKU,KAAKkI,WAC7D5I,KAAKU,KAAK+H,UAAwBzI,KAAKU,KAAKiI,aACjDqB,EAAMhK,KAAKkB,YAAcwW,EAG3B,IAAIC,EAAO,EAAAhT,MAAMiT,YAAY5N,GAC7B,OAAIhK,KAAKU,KAAKwS,iBAAmByE,EAAKE,MAAQ7X,KAAKU,KAAKO,aAAe0W,EAAK3U,IAG5EhD,KAAKU,KAAKwS,eAAiByE,EAAKE,KAChC7X,KAAKU,KAAKO,WAAa0W,EAAK3U,EAExBuU,GACFvX,KAAKuU,eAAc,EAAMvU,KAAKkQ,WANvBlQ,KAYJ,YACL,OAAOA,KAAK6T,oBAAsB7T,KAAKU,KAAKmK,OAGtC,oBAGN,OAAQ7K,KAAKD,GAAG+X,aAAe9X,KAAKD,GAAGoE,cAAc2T,aAAetS,OAAOuS,WAMtE,SAKL,OAJA/X,KAAKoC,OAAO8L,SACZlO,KAAKyE,sBACLzE,KAAKkF,mBACLlF,KAAKmF,sBACEnF,KAIF,UAGL,OAFAA,KAAKoC,OAAO4V,UACZhY,KAAKmF,sBACEnF,KAYF,OAAO6K,EAAgBmG,EAAwB,aACpD,GAAIhR,KAAKU,KAAKmK,SAAWA,EAAQ,OAAO7K,KACxC,IAeIiY,EAfA9G,EAAYnR,KAAKU,KAAKmK,OA+B1B,OA3Be,IAAXA,EACF7K,KAAK8T,YAAc3C,SAEZnR,KAAK8T,YAGd9T,KAAKD,GAAGoG,UAAU/B,OAAO,cAAgB+M,GACzCnR,KAAKD,GAAGoG,UAAUC,IAAI,cAAgByE,GACtC7K,KAAKU,KAAKmK,OAAS7K,KAAKoC,OAAOyI,OAASA,EAIzB,IAAXA,GAAgB7K,KAAKU,KAAK0S,uBAC5B6E,EAAW,GACXjY,KAAKwK,eAAe7D,SAAQ5G,IACtBA,EAAGI,eAAiB8X,EAASzT,KAAKzE,EAAGI,kBAEtC8X,EAASlK,SAAUkK,OAAW1S,IAErCvF,KAAKoC,OAAO8V,iBAAiB/G,EAAWtG,EAAQoN,EAAUjH,GACtDhR,KAAKoU,mBAAmBpU,KAAKiB,aAGjCjB,KAAK+Q,0BAA2B,EAChC/Q,KAAKmF,6BACEnF,KAAK+Q,yBAEL/Q,KAMF,YACL,OAAOA,KAAKU,KAAKmK,OAIZ,eACL,OAAOmE,MAAMmJ,KAAKnY,KAAKD,GAAG8V,UACvBrJ,QAAQzM,GAAoBA,EAAG6C,QAAQ,IAAM5C,KAAKU,KAAKyR,aAAepS,EAAG6C,QAAQ,IAAM5C,KAAKU,KAAK0R,oBAO/F,QAAQtD,GAAY,GACzB,GAAK9O,KAAKD,GAgBV,OAfAC,KAAK6U,0BAAyB,GAC9B7U,KAAKoY,WAAU,GACVtJ,EAIH9O,KAAKD,GAAGsY,WAAWC,YAAYtY,KAAKD,KAHpCC,KAAKuY,UAAUzJ,GACf9O,KAAKD,GAAGoG,UAAU/B,OAAOpE,KAAKU,KAAK+S,mBAIrCzT,KAAKwY,2BACExY,KAAKU,KAAKyT,iBACVnU,KAAKU,YACLV,KAAKgW,oBACLhW,KAAKoC,cACLpC,KAAKD,GAAGkV,iBACRjV,KAAKD,GACLC,KAMF,MAAMgK,GAGX,OAFAhK,KAAKoC,OAAO4I,MAAQhB,EACpBhK,KAAKmF,sBACEnF,KAMF,WACL,OAAOA,KAAKoC,OAAO4I,MAYd,iBAAiBpJ,EAAyB6W,GAAiB,GAChE,IAEIC,EAFArV,EAAMrD,KAAKD,GAAGyB,wBAIhBkX,EADED,EACa,CAAC/W,IAAK2B,EAAI3B,IAAM4B,SAASC,gBAAgBC,UAAW/B,KAAM4B,EAAI5B,MAG9D,CAACC,IAAK1B,KAAKD,GAAG4Y,UAAWlX,KAAMzB,KAAKD,GAAG6Y,YAGxD,IAAIC,EAAejX,EAASH,KAAOiX,EAAajX,KAC5CqX,EAAclX,EAASF,IAAMgX,EAAahX,IAE1CqX,EAAe1V,EAAIkG,MAAQvJ,KAAKU,KAAKmK,OACrCmO,EAAa3V,EAAImG,OAASiL,SAASzU,KAAKD,GAAGwT,aAAa,mBAE5D,MAAO,CAACzR,EAAGC,KAAK0N,MAAMoJ,EAAeE,GAAc7W,EAAGH,KAAK0N,MAAMqJ,EAAcE,IAI1E,SACL,OAAOjX,KAAKC,IAAIhC,KAAKoC,OAAO8N,SAAUlQ,KAAKU,KAAKwR,QAU3C,YAAYpQ,EAAWI,EAAWa,EAAWC,GAClD,OAAOhD,KAAKoC,OAAO6W,YAAYnX,EAAGI,EAAGa,EAAGC,GAcnC,WAAW+G,GAChB,IAAIhK,EAAKQ,EAAU2Y,WAAWnP,GAK9B,OAJA/J,KAAK2U,gBAAgB5U,GAAI,GACzBC,KAAKgF,yBACLhF,KAAKkF,mBACLlF,KAAKmF,sBACEpF,EAmBF,GAAGoZ,EAAsBC,GAE9B,IAA2B,IAAvBD,EAAKE,QAAQ,KAGf,OAFYF,EAAKG,MAAM,KACjB3S,SAAQwS,GAAQnZ,KAAKmD,GAAGgW,EAAMC,KAC7BpZ,KAGT,GAAa,WAATmZ,GAA8B,UAATA,GAA6B,YAATA,GAA+B,WAATA,GAA8B,YAATA,EAAoB,CAE1G,IAAII,EAAmB,WAATJ,GAA8B,YAATA,EAEjCnZ,KAAKqF,gBAAgB8T,GADnBI,EAC4BnY,GAAiBgY,EAAShY,GAE1BA,GAAuBgY,EAAShY,EAAOA,EAAMoY,QAE7ExZ,KAAKD,GAAG0Z,iBAAiBN,EAAMnZ,KAAKqF,gBAAgB8T,QAClC,SAATA,GAA4B,cAATA,GAAiC,aAATA,GAAgC,gBAATA,GAAmC,WAATA,GAA8B,eAATA,GAAkC,YAATA,EAGnJnZ,KAAKqF,gBAAgB8T,GAAQC,EAE7BlE,QAAQwE,IAAI,gBAAkBP,EAAO,mHAEvC,OAAOnZ,KAOF,IAAImZ,GAET,OAA2B,IAAvBA,EAAKE,QAAQ,MACHF,EAAKG,MAAM,KACjB3S,SAAQwS,GAAQnZ,KAAKuC,IAAI4W,KACxBnZ,OAGI,WAATmZ,GAA8B,UAATA,GAA6B,YAATA,GAA+B,WAATA,GAA8B,YAATA,GAElFnZ,KAAKqF,gBAAgB8T,IACvBnZ,KAAKD,GAAG4Z,oBAAoBR,EAAMnZ,KAAKqF,gBAAgB8T,WAGpDnZ,KAAKqF,gBAAgB8T,GAErBnZ,MASF,aAAa+J,EAAuB+E,GAAY,EAAMa,GAAe,GAwB1E,OAvBApP,EAAUmG,YAAYqD,GAAKpD,SAAQ5G,IACjC,GAAIA,EAAGoE,gBAAkBnE,KAAKD,GAAI,OAClC,IAAIuB,EAAOvB,EAAGI,cAETmB,IACHA,EAAOtB,KAAKoC,OAAO6I,MAAMqB,MAAKxJ,GAAK/C,IAAO+C,EAAE/C,MAEzCuB,WAGEvB,EAAGI,cACV,EAAAN,aAAaC,MAAMsE,OAAOrE,GAE1BC,KAAKoC,OAAOuD,WAAWrE,EAAMwN,EAAWa,GAEpCb,GAAa/O,EAAGoE,eAClBpE,EAAGqE,aAGHuL,IACF3P,KAAKyE,sBACLzE,KAAKmF,uBAEAnF,KAOF,UAAU8O,GAAY,GAQ3B,OANA9O,KAAKoC,OAAO6I,MAAMtE,SAAQ7D,WACjBA,EAAE/C,GAAGI,cACZ,EAAAN,aAAaC,MAAMsE,OAAOtB,EAAE/C,OAE9BC,KAAKoC,OAAOmW,UAAUzJ,GACtB9O,KAAKyE,sBACEzE,KAOF,aAAa4Z,GAMlB,OALIA,EACF5Z,KAAKD,GAAGoG,UAAUC,IAAI,sBAEtBpG,KAAKD,GAAGoG,UAAU/B,OAAO,sBAEpBpE,KAQF,UAAUgK,GACf,OAAIhK,KAAKU,KAAKC,aAAeqJ,IAC7BhK,KAAKU,KAAKC,WAAaqJ,EACvBhK,KAAKoC,OAAO6I,MAAMtE,SAAQ7D,GAAK9C,KAAK0F,uBAAuB5C,KAC3D9C,KAAKqU,mBAHoCrU,KAYpC,OAAO+J,EAAuB0B,GAGnC,GAAI2K,UAAUrI,OAAS,EAAG,CACxBmH,QAAQmB,KAAK,qHAEb,IAAI7I,EAAI4I,UAAW7H,EAAI,EAEvB,OADA9C,EAAM,CAAE3J,EAAE0L,EAAEe,KAAMrM,EAAEsL,EAAEe,KAAMxL,EAAEyK,EAAEe,KAAMvL,EAAEwK,EAAEe,MACnCvO,KAAKuX,OAAOxN,EAAK0B,GA4D1B,OAzDAlL,EAAUmG,YAAYqD,GAAKpD,SAAQ5G,IACjC,IAAKA,IAAOA,EAAGI,cAAe,OAC9B,IAAI2C,EAAI/C,EAAGI,cACP4C,EAAI,OAAH,UAAO0I,UACL1I,EAAEZ,aAGT,IACI0X,EADAC,EAAO,CAAC,IAAK,IAAK,IAAK,KAe3B,GAbIA,EAAK1K,MAAK2K,QAAcxU,IAATxC,EAAEgX,IAAoBhX,EAAEgX,KAAOjX,EAAEiX,OAClDF,EAAI,GACJC,EAAKnT,SAAQoT,IACXF,EAAEE,QAAexU,IAATxC,EAAEgX,GAAoBhX,EAAEgX,GAAKjX,EAAEiX,UAChChX,EAAEgX,QAIRF,IAAM9W,EAAEE,MAAQF,EAAEG,MAAQH,EAAE8F,MAAQ9F,EAAE+F,QACzC+Q,EAAI,IAIF9W,EAAEyT,QAAS,CACb,IAAIQ,EAAMjX,EAAGgG,cAAc,4BACvBiR,GAAOA,EAAIrB,YAAc5S,EAAEyT,UAC7BQ,EAAIrB,UAAY5S,EAAEyT,gBAEbzT,EAAEyT,QAIX,IAAIwD,GAAU,EACVC,GAAY,EAChB,IAAK,MAAMnJ,KAAO/N,EACD,MAAX+N,EAAI,IAAchO,EAAEgO,KAAS/N,EAAE+N,KACjChO,EAAEgO,GAAO/N,EAAE+N,GACXkJ,GAAU,EACVC,EAAYA,IAAeja,KAAKU,KAAKC,aAAuB,aAARmQ,GAA8B,WAARA,GAA4B,WAARA,IAK9F+I,IACF7Z,KAAKoC,OAAOgG,aACTC,YAAYvF,GACZsJ,SAAStJ,EAAG+W,GACf7Z,KAAKgF,yBACLhF,KAAKmF,sBACLnF,KAAKoC,OAAOgD,aAEV4U,GACFha,KAAK8E,WAAW/E,EAAI+C,GAElBmX,GACFja,KAAK0F,uBAAuB5C,MAGzB9C,KAOF,OAAOka,GAGZ,KAFqC,iBAAVA,GAAsBA,EAAMZ,MAAM,KAAKvL,OAAS,GAExD,CACjB,IAAI4J,EAAO,EAAAhT,MAAMiT,YAAYsC,GAC7B,GAAIla,KAAKU,KAAKuS,aAAe0E,EAAKE,MAAQ7X,KAAKU,KAAK+R,SAAWkF,EAAK3U,EAAG,OASzE,OANAhD,KAAKU,KAAK+R,OAASyH,EACnBla,KAAKU,KAAK+H,UAAYzI,KAAKU,KAAKiI,aAAe3I,KAAKU,KAAKkI,WAAa5I,KAAKU,KAAKgI,iBAAcnD,EAC9FvF,KAAK4T,aAEL5T,KAAKuU,eAAc,GAEZvU,KAIF,YAAsB,OAAOA,KAAKU,KAAK+R,OAcvC,UAAUnR,GAEf,GAAI8U,UAAUrI,OAAS,EAAG,CACxBmH,QAAQmB,KAAK,uHAEb,IAAI7I,EAAI4I,UAAW7H,EAAI,EACrBxL,EAAqB,CAAEjB,EAAE0L,EAAEe,KAAMrM,EAAEsL,EAAEe,KAAMxL,EAAEyK,EAAEe,KAAMvL,EAAEwK,EAAEe,KAAMpM,aAAaqL,EAAEe,MAChF,OAAOvO,KAAKsC,UAAUS,GAExB,OAAO/C,KAAKoC,OAAOE,UAAUhB,GAIvB,sBACN,GAAItB,KAAKoC,OAAO8I,UAAW,OAAOlL,KAClC,IAAIwU,EAAWxU,KAAKoC,OAAO+M,eAAc,GAQzC,OAPIqF,GAAYA,EAASzG,SAClB/N,KAAK+Q,0BACR/Q,KAAKoC,OAAO+X,mBAAmB3F,GAEjCxU,KAAKoK,cAAc,SAAUoK,IAE/BxU,KAAKoC,OAAOuO,cACL3Q,KAID,mBACN,OAAIA,KAAKoC,OAAO8I,WACZlL,KAAKoC,OAAO6C,YAAcjF,KAAKoC,OAAO6C,WAAW8I,OAAS,IACvD/N,KAAK+Q,0BACR/Q,KAAKoC,OAAO+X,mBAAmBna,KAAKoC,OAAO6C,YAG7CjF,KAAKoC,OAAO6C,WAAW0B,SAAQ7D,WAAcA,EAAE6K,UAC/C3N,KAAKoK,cAAc,QAASpK,KAAKoC,OAAO6C,YACxCjF,KAAKoC,OAAO6C,WAAa,IAROjF,KAc7B,sBACL,OAAIA,KAAKoC,OAAO8I,WACZlL,KAAKoC,OAAOmC,cAAgBvE,KAAKoC,OAAOmC,aAAawJ,OAAS,IAChE/N,KAAKoK,cAAc,UAAWpK,KAAKoC,OAAOmC,cAC1CvE,KAAKoC,OAAOmC,aAAe,IAHKvE,KAS5B,cAAcmZ,EAAcxB,GAClC,IAAIvW,EAAQuW,EAAO,IAAIyC,YAAYjB,EAAM,CAACkB,SAAS,EAAOb,OAAQ7B,IAAS,IAAI2C,MAAMnB,GAErF,OADAnZ,KAAKD,GAAGwa,cAAcnZ,GACfpB,KAID,oBAMN,OAJIA,KAAKwa,UACP,EAAA7V,MAAM8V,iBAAiBza,KAAKwa,QAAQhM,YAC7BxO,KAAKwa,SAEPxa,KAID,cAAc0a,GAAc,EAAO5R,GASzC,GAPI4R,GACF1a,KAAKwY,oBAGPxY,KAAKgF,yBAGwB,IAAzBhF,KAAKU,KAAKO,WACZ,OAAOjB,KAGT,IAAIiB,EAAajB,KAAKU,KAAKO,WACvBiS,EAAiBlT,KAAKU,KAAKwS,eAC3ByH,EAAS,IAAI3a,KAAKU,KAAK+S,uBAAuBzT,KAAKU,KAAKyR,YAG5D,IAAKnS,KAAKwa,QAAS,CACjB,IAAIlE,EAAK,oBAAsC,IAAhBvU,KAAK2R,UAAmBC,UAEnDiH,EAAgB5a,KAAKU,KAAK6R,iBAAchN,EAAYvF,KAAKD,GAAGsY,WAEhE,GADArY,KAAKwa,QAAU,EAAA7V,MAAMkW,iBAAiBvE,EAAIsE,IACrC5a,KAAKwa,QAAS,OAAOxa,KAC1BA,KAAKwa,QAAQhM,IAAM8H,EACnBtW,KAAKwa,QAAQM,KAAO,EAGpB,EAAAnW,MAAMoW,WAAW/a,KAAKwa,QAASG,EAAQ,eAAe1Z,IAAaiS,KAEnE,IAAIxR,EAAc1B,KAAKU,KAAK+H,UAAYzI,KAAKU,KAAKuS,WAC9C1F,EAAiBvN,KAAKU,KAAKiI,aAAe3I,KAAKU,KAAKuS,WACpD3F,EAAgBtN,KAAKU,KAAKgI,YAAc1I,KAAKU,KAAKuS,WAClDxR,EAAezB,KAAKU,KAAKkI,WAAa5I,KAAKU,KAAKuS,WAChDuD,EAAU,GAAGmE,+BACbzW,EAAc,IAAIlE,KAAKU,KAAK+S,oEAChC,EAAA9O,MAAMoW,WAAW/a,KAAKwa,QAAShE,EAAS,QAAQ9U,aAAe4L,cAAkBC,YAAiB9L,MAClG,EAAAkD,MAAMoW,WAAW/a,KAAKwa,QAAStW,EAAa,QAAQxC,aAAe4L,cAAkBC,YAAiB9L,MAEtG,EAAAkD,MAAMoW,WAAW/a,KAAKwa,QAAS,GAAGG,uBAA6B,UAAUrN,KACzE,EAAA3I,MAAMoW,WAAW/a,KAAKwa,QAAS,GAAGG,sBAA4B,UAAUrN,KACxE,EAAA3I,MAAMoW,WAAW/a,KAAKwa,QAAS,GAAGG,uBAA6B,UAAUrN,cAAkBC,KAC3F,EAAA5I,MAAMoW,WAAW/a,KAAKwa,QAAS,GAAGG,uBAA6B,SAASlZ,KACxE,EAAAkD,MAAMoW,WAAW/a,KAAKwa,QAAS,GAAGG,sBAA4B,SAASlZ,KACvE,EAAAkD,MAAMoW,WAAW/a,KAAKwa,QAAS,GAAGG,uBAA6B,SAASlZ,cAAiB8L,KAK3F,IADAzE,EAAOA,GAAQ9I,KAAKwa,QAAQM,MACjB9a,KAAKwa,QAAQM,KAAM,CAC5B,IAAIE,EAAaC,GAA0Bha,EAAaga,EAAQ/H,EAChE,IAAK,IAAI3E,EAAIvO,KAAKwa,QAAQM,KAAO,EAAGvM,GAAKzF,EAAMyF,IAAK,CAClD,IAAIvL,EAAYgY,EAAUzM,GAC1B,EAAA5J,MAAMoW,WAAW/a,KAAKwa,QAAS,GAAGG,WAAgBpM,EAAE,MAAc,QAAQyM,EAAUzM,EAAE,MACtF,EAAA5J,MAAMoW,WAAW/a,KAAKwa,QAAS,GAAGG,WAAgBpM,MAAW,WAAWvL,KACxE,EAAA2B,MAAMoW,WAAW/a,KAAKwa,QAAS,GAAGG,eAAoBpM,MAAO,eAAevL,KAC5E,EAAA2B,MAAMoW,WAAW/a,KAAKwa,QAAS,GAAGG,eAAoBpM,MAAO,eAAevL,KAE9EhD,KAAKwa,QAAQM,KAAOhS,EAEtB,OAAO9I,KAID,yBACN,IAAKA,KAAKoC,QAAUpC,KAAKoC,OAAO8I,UAAW,OAAOlL,KAClD,IAAIoQ,EAAMpQ,KAAKkQ,SAEXgL,EAAezG,SAAS0G,iBAAiBnb,KAAKD,IAAI,eACtD,GAAImb,EAAe,EAAG,CACpB,IAAIhJ,EAASnQ,KAAKE,MAAMiZ,EAAelb,KAAKyD,eAAc,IACtD2M,EAAM8B,IACR9B,EAAM8B,GAIV,GADAlS,KAAKD,GAAGqb,aAAa,iBAAkBC,OAAOjL,IAClC,IAARA,EAEF,OADApQ,KAAKD,GAAGgU,MAAMuH,eAAe,UACtBtb,KAET,IAAIiB,EAAajB,KAAKU,KAAKO,WACvB4W,EAAO7X,KAAKU,KAAKwS,eACrB,OAAKjS,GACLjB,KAAKD,GAAGgU,MAAMvK,OAAS4G,EAAMnP,EAAa4W,EACnC7X,MAFiBA,KAMlB,gBAAgBD,EAAyBsP,GAAkB,EAAO/N,GACnEA,IACHvB,EAAGoG,UAAUC,IAAIpG,KAAKU,KAAKyR,WAC3B7Q,EAAOtB,KAAK0D,UAAU3D,IAExBA,EAAGI,cAAgBmB,EACnBA,EAAKvB,GAAKA,EACVuB,EAAKP,KAAOf,KACZ,IAAI+R,EAAO,OAAH,UAAOzQ,GAOf,OANAA,EAAOtB,KAAKoC,OAAO2F,QAAQzG,EAAM+N,GAE5B,EAAA1K,MAAM4W,KAAKja,EAAMyQ,IACpB/R,KAAK8E,WAAW/E,EAAIuB,GAEtBtB,KAAK0F,uBAAuBpE,GACrBtB,KAID,cAAcD,EAAiB+C,GAKrC,YAJYyC,IAARzC,EAAEhB,GAA2B,OAARgB,EAAEhB,GAAc/B,EAAGqb,aAAa,OAAQC,OAAOvY,EAAEhB,SAC9DyD,IAARzC,EAAEZ,GAA2B,OAARY,EAAEZ,GAAcnC,EAAGqb,aAAa,OAAQC,OAAOvY,EAAEZ,IACtEY,EAAEC,GAAKhD,EAAGqb,aAAa,OAAQC,OAAOvY,EAAEC,IACxCD,EAAEE,GAAKjD,EAAGqb,aAAa,OAAQC,OAAOvY,EAAEE,IACrChD,KAID,WAAWD,EAAiBuB,GAClC,IAAKA,EAAM,OAAOtB,KAClBA,KAAK8H,cAAc/H,EAAIuB,GAEvB,IAAIka,EAA2C,CAC7CrZ,aAAc,mBACdc,KAAM,WACNC,KAAM,WACN2F,KAAM,WACNC,KAAM,WACN1B,SAAU,eACVF,OAAQ,aACRD,OAAQ,YACRqP,GAAI,QACJmF,cAAe,qBAEjB,IAAK,MAAM3K,KAAO0K,EACZla,EAAKwP,GACP/Q,EAAGqb,aAAaI,EAAM1K,GAAMuK,OAAO/Z,EAAKwP,KAExC/Q,EAAG2b,gBAAgBF,EAAM1K,IAG7B,OAAO9Q,KAID,UAAUD,GAChB,IAAIuB,EAAsB,GAC1BA,EAAKQ,EAAI,EAAA6C,MAAM2O,SAASvT,EAAGwT,aAAa,SACxCjS,EAAKY,EAAI,EAAAyC,MAAM2O,SAASvT,EAAGwT,aAAa,SACxCjS,EAAKyB,EAAI,EAAA4B,MAAM2O,SAASvT,EAAGwT,aAAa,SACxCjS,EAAK0B,EAAI,EAAA2B,MAAM2O,SAASvT,EAAGwT,aAAa,SACxCjS,EAAKuH,KAAO,EAAAlE,MAAM2O,SAASvT,EAAGwT,aAAa,aAC3CjS,EAAK2B,KAAO,EAAA0B,MAAM2O,SAASvT,EAAGwT,aAAa,aAC3CjS,EAAKwH,KAAO,EAAAnE,MAAM2O,SAASvT,EAAGwT,aAAa,aAC3CjS,EAAK4B,KAAO,EAAAyB,MAAM2O,SAASvT,EAAGwT,aAAa,aAC3CjS,EAAKa,aAAe,EAAAwC,MAAM6O,OAAOzT,EAAGwT,aAAa,qBACjDjS,EAAK8F,SAAW,EAAAzC,MAAM6O,OAAOzT,EAAGwT,aAAa,iBAC7CjS,EAAK4F,OAAS,EAAAvC,MAAM6O,OAAOzT,EAAGwT,aAAa,eAC3CjS,EAAK2F,OAAS,EAAAtC,MAAM6O,OAAOzT,EAAGwT,aAAa,cAC3CjS,EAAKma,cAAgB1b,EAAGwT,aAAa,qBACrCjS,EAAKgV,GAAKvW,EAAGwT,aAAa,SAG1B,IAAK,MAAMzC,KAAOxP,EAAM,CACtB,IAAKA,EAAKqa,eAAe7K,GAAM,OAC1BxP,EAAKwP,IAAsB,IAAdxP,EAAKwP,WACdxP,EAAKwP,GAIhB,OAAOxP,EAID,kBACN,IAAIsa,EAAU,CAAC,qBAUf,OARI5b,KAAKU,KAAKC,YACZX,KAAKD,GAAGoG,UAAUC,OAAOwV,GACzB5b,KAAKD,GAAGqb,aAAa,YAAa,UAElCpb,KAAKD,GAAGoG,UAAU/B,UAAUwX,GAC5B5b,KAAKD,GAAG2b,gBAAgB,cAGnB1b,KAOF,iBACL,IAAKA,KAAKD,KAAOC,KAAKD,GAAG+X,YAAa,OACtC,IAAI+D,GAAa7b,KAAKU,KAAKyS,sBAAwBnT,KAAKD,GAAG+X,aAAe9X,KAAKU,KAAKiS,SAChFmJ,GAAmB,EA4BvB,OA1BK9b,KAAK+b,iBAAoBF,IAC5B7b,KAAK+b,eAAiBF,EACtBC,GAAmB,EACf9b,KAAKU,KAAKkS,SAAW5S,KAAK4U,cAAa,GAC3C5U,KAAK6K,OAAOgR,EAAY,EAAI7b,KAAK8T,aAC7B9T,KAAKU,KAAKkS,SAAW5S,KAAK4U,cAAa,IAIzC5U,KAAKoU,qBACF0H,GAAoB9b,KAAKU,KAAK8R,oBAC5BxS,KAAKgc,sBACRhc,KAAKgc,oBAAsB,EAAArX,MAAMsX,UAAS,IAAMjc,KAAKiB,cAAcjB,KAAKU,KAAK8R,qBAE/ExS,KAAKgc,uBAGLhc,KAAKiB,cAKTjB,KAAKoC,OAAO6I,MAAMtE,SAAQ7D,IACpBA,EAAE8G,SAAW9G,EAAE8G,QAAsBC,oBAGpC7J,KAID,yBAAyBkc,GAAc,GAE7C,MAAMC,GAAYnc,KAAKoU,oBAAsBpU,KAAKU,KAAKyS,wBAA0BnT,KAAKU,KAAKyT,UAU3F,OARK+H,IAAeC,GAAanc,KAAKoc,mBAG1BF,GAAgBC,IAAanc,KAAKoc,oBAC5C5W,OAAOmU,oBAAoB,SAAU3Z,KAAKoc,0BACnCpc,KAAKoc,oBAJZpc,KAAKoc,kBAAoBpc,KAAK6J,eAAewS,KAAKrc,MAClDwF,OAAOiU,iBAAiB,SAAUzZ,KAAKoc,oBAMlCpc,KAIF,kBAAkB+J,EAAwB,oBAA2C,OAAO,EAAApF,MAAMuU,WAAWnP,GAE7G,mBAAmBA,EAAwB,oBAA6C,OAAO,EAAApF,MAAM+B,YAAYqD,GAEjH,sBAAsBA,GAA0C,OAAOxJ,EAAU2Y,WAAWnP,GAE5F,uBAAuBA,GAAkC,OAAO,EAAApF,MAAM+B,YAAYqD,GAGjF,aAEN,IAAI4N,EACAlF,EAAS,EAGT6J,EAAoB,GAsDxB,MArDgC,iBAArBtc,KAAKU,KAAK+R,SACnB6J,EAAUtc,KAAKU,KAAK+R,OAAO6G,MAAM,MAEZ,IAAnBgD,EAAQvO,QACV/N,KAAKU,KAAK+H,UAAYzI,KAAKU,KAAKiI,aAAe2T,EAAQ,GACvDtc,KAAKU,KAAKkI,WAAa5I,KAAKU,KAAKgI,YAAc4T,EAAQ,IAC3B,IAAnBA,EAAQvO,QACjB/N,KAAKU,KAAK+H,UAAY6T,EAAQ,GAC9Btc,KAAKU,KAAKgI,YAAc4T,EAAQ,GAChCtc,KAAKU,KAAKiI,aAAe2T,EAAQ,GACjCtc,KAAKU,KAAKkI,WAAa0T,EAAQ,KAE/B3E,EAAO,EAAAhT,MAAMiT,YAAY5X,KAAKU,KAAK+R,QACnCzS,KAAKU,KAAKuS,WAAa0E,EAAKE,KAC5BpF,EAASzS,KAAKU,KAAK+R,OAASkF,EAAK3U,QAIPuC,IAAxBvF,KAAKU,KAAK+H,UACZzI,KAAKU,KAAK+H,UAAYgK,GAEtBkF,EAAO,EAAAhT,MAAMiT,YAAY5X,KAAKU,KAAK+H,WACnCzI,KAAKU,KAAK+H,UAAYkP,EAAK3U,SACpBhD,KAAKU,KAAK+R,aAGYlN,IAA3BvF,KAAKU,KAAKiI,aACZ3I,KAAKU,KAAKiI,aAAe8J,GAEzBkF,EAAO,EAAAhT,MAAMiT,YAAY5X,KAAKU,KAAKiI,cACnC3I,KAAKU,KAAKiI,aAAegP,EAAK3U,SACvBhD,KAAKU,KAAK+R,aAGWlN,IAA1BvF,KAAKU,KAAKgI,YACZ1I,KAAKU,KAAKgI,YAAc+J,GAExBkF,EAAO,EAAAhT,MAAMiT,YAAY5X,KAAKU,KAAKgI,aACnC1I,KAAKU,KAAKgI,YAAciP,EAAK3U,SACtBhD,KAAKU,KAAK+R,aAGUlN,IAAzBvF,KAAKU,KAAKkI,WACZ5I,KAAKU,KAAKkI,WAAa6J,GAEvBkF,EAAO,EAAAhT,MAAMiT,YAAY5X,KAAKU,KAAKkI,YACnC5I,KAAKU,KAAKkI,WAAa+O,EAAK3U,SACrBhD,KAAKU,KAAK+R,QAEnBzS,KAAKU,KAAKuS,WAAa0E,EAAKE,KACxB7X,KAAKU,KAAK+H,YAAczI,KAAKU,KAAKiI,cAAgB3I,KAAKU,KAAKkI,aAAe5I,KAAKU,KAAKgI,aAAe1I,KAAKU,KAAK+H,YAAczI,KAAKU,KAAKgI,cACxI1I,KAAKU,KAAK+R,OAASzS,KAAKU,KAAK+H,WAExBzI,KAmBF,mBAAmBK,EAAiBC,IAOpC,QAAQyJ,EAAuBC,GAA2B,OAAOhK,KAMjE,UAAU+J,EAAuBC,GAA2B,OAAOhK,KAUnE,UAAuB,OAAOA,KAS9B,SAAsB,OAAOA,KAQ7B,WAAWsK,EAAmBC,GAAoB,GAAmB,OAAOvK,KAO5E,aAAasK,EAAmBC,GAAoB,GAAmB,OAAOvK,KAG9E,qBAAkC,OAAOA,KAEzC,mBAAgC,OAAOA,KAEvC,uBAAuBsB,GAAkC,OAAOtB,KAEhE,eAAeoB,EAAcO,EAAcL,EAAqBJ,EAAmBD,IAEnF,cAAcG,EAAcO,EAAcL,EAAqBJ,EAAmBD,IAElF,OAAOK,EAAqBvB,EAAyBsB,EAA8B0H,GAAe,KAj5C3G,cAkFgB,EAAApE,MAAQ,EAAAA,MAGR,EAAA4X,OAAS,EAAA3R,iB,6DC7KzB,sCAKU,KAAA4R,WAAY,EAEZ,KAAAC,eAEJ,GAPJ,eAAmC,OAAOzc,KAAKwc,UASxC,GAAGpb,EAAegY,GACvBpZ,KAAKyc,eAAerb,GAASgY,EAGxB,IAAIhY,UACFpB,KAAKyc,eAAerb,GAGtB,SACLpB,KAAKwc,WAAY,EAGZ,UACLxc,KAAKwc,WAAY,EAGZ,iBACExc,KAAKyc,eAGP,aAAaC,EAAmBtb,GACrC,IAAKpB,KAAK2c,UAAY3c,KAAKyc,gBAAkBzc,KAAKyc,eAAeC,GAC/D,OAAO1c,KAAKyc,eAAeC,GAAWtb,M,+DClC5C,eACA,SACA,SA0BA,MAAawb,UAAoB,EAAAC,gBA6B/B,YAAY9c,EAAiB+c,EAAyB,IACpDC,QAhBM,KAAAC,UAAW,EA8RZ,KAAArb,GAAK,KACV,MACMsb,EADgBjd,KAAKD,GAAGoE,cACQ3C,wBAChC0b,EAASld,KAAKqB,OAAOG,wBAC3B,MAAO,CACLI,SAAU,CACRF,IAAKwb,EAAOxb,IAAMub,EAAgBvb,IAClCD,KAAMyb,EAAOzb,KAAOwb,EAAgBxb,QApRxCzB,KAAKD,GAAKA,EACVC,KAAK8c,OAASA,EAEd,IAAI3G,EAAY2G,EAAOhW,OAAOqW,UAAU,GACxCnd,KAAKod,OAASrd,EAAGoG,UAAUkX,SAASlH,GAAapW,EAAKA,EAAGgG,cAAc+W,EAAOhW,SAAW/G,EAEzFC,KAAKsd,WAAatd,KAAKsd,WAAWjB,KAAKrc,MACvCA,KAAKud,MAAQvd,KAAKud,MAAMlB,KAAKrc,MAC7BA,KAAKwd,SAAWxd,KAAKwd,SAASnB,KAAKrc,MACnCA,KAAKqK,SAGA,GAAGjJ,EAA0CgY,GAClD2D,MAAM5Z,GAAG/B,EAAOgY,GAGX,IAAIhY,GACT2b,MAAMxa,IAAInB,GAGL,SACL2b,MAAM1S,SACNrK,KAAKod,OAAOnd,WAAY,EACxBD,KAAKod,OAAO3D,iBAAiB,YAAazZ,KAAKsd,YAC/Ctd,KAAKD,GAAGoG,UAAU/B,OAAO,yBACzBpE,KAAKD,GAAGoG,UAAUC,IAAI,gBAGjB,QAAQqX,GAAa,GAC1BV,MAAM9S,UACNjK,KAAKod,OAAO1B,gBAAgB,aAC5B1b,KAAKod,OAAOzD,oBAAoB,YAAa3Z,KAAKsd,YAClDtd,KAAKD,GAAGoG,UAAU/B,OAAO,gBACpBqZ,GAAYzd,KAAKD,GAAGoG,UAAUC,IAAI,yBAGlC,UACDpG,KAAKgd,UAIPhd,KAAKwd,SAAS,IAEhBxd,KAAKiK,SAAQ,UACNjK,KAAKD,UACLC,KAAKqB,cACLrB,KAAK8c,OACZC,MAAMW,UAGD,aAAahd,GAElB,OADAid,OAAO7D,KAAKpZ,GAAMiG,SAAQmK,GAAO9Q,KAAK8c,OAAOhM,GAAOpQ,EAAKoQ,KAClD9Q,KAID,WAAWoB,GACjB,EAAAwc,UAAUC,YAAc7d,KACxBA,KAAKqB,OAASrB,KAAK8d,cAAc1c,GACjCpB,KAAK+d,+BACL/d,KAAKge,WAAahe,KAAKie,eAAe7c,EAAOpB,KAAKD,GAAIC,KAAKke,mBAC3D,MAAMC,EAAK,EAAAC,QAAQC,UAAqBjd,EAAO,CAAEmG,OAAQvH,KAAKD,GAAIuF,KAAM,cACpEtF,KAAKqB,SAAWrB,KAAKD,GACvBC,KAAKse,gCAAgCH,GAErCne,KAAKue,gBAAkB/Y,OAAOC,YAAW,YAChCzF,KAAKue,gBACZve,KAAKse,gCAAgCH,KACpC,GAELne,KAAKwe,iBAAiBpd,GAIhB,gCAAgC+c,GAUtC,OATAne,KAAKye,oBACLnb,SAASmW,iBAAiB,WAAYzZ,KAAKud,MAAOX,EAAY8B,yBAC9D1e,KAAKod,OAAO3D,iBAAiB,UAAWzZ,KAAKwd,UACzCxd,KAAK8c,OAAO9U,OACdhI,KAAK8c,OAAO9U,MAAMmW,EAAIne,KAAK2B,MAE7B3B,KAAKgd,UAAW,EAChBhd,KAAKqB,OAAO8E,UAAUC,IAAI,yBAC1BpG,KAAK2P,aAAa,YAAawO,GACxBne,KAID,MAAMoB,GAGZA,EAAMud,iBACN3e,KAAK4e,YAAYxd,GACjB,MAAM+c,EAAK,EAAAC,QAAQC,UAAqBjd,EAAO,CAAEmG,OAAQvH,KAAKD,GAAIuF,KAAM,SACpEtF,KAAK8c,OAAO5U,MACdlI,KAAK8c,OAAO5U,KAAKiW,EAAIne,KAAK2B,MAE5B3B,KAAK2P,aAAa,OAAQwO,GAIpB,SAAS/c,GACf,GAAIpB,KAAKue,gBAGP,OAFAM,aAAa7e,KAAKue,6BACXve,KAAKue,gBAGRve,KAAK8e,YACPC,qBAAqB/e,KAAK8e,YAE5Bxb,SAASqW,oBAAoB,WAAY3Z,KAAKud,MAAOX,EAAY8B,yBACjE1e,KAAKod,OAAOzD,oBAAoB,UAAW3Z,KAAKwd,UAElDxd,KAAKgd,UAAW,EAChBhd,KAAKqB,OAAO8E,UAAU/B,OAAO,yBAC7BpE,KAAKke,kBAAkBnK,MAAMnS,SAAW5B,KAAKgf,2BAA6B,KACtEhf,KAAKqB,SAAWrB,KAAKD,GACvBC,KAAKif,qBAELjf,KAAKqB,OAAO+C,SAEd,MAAM+Z,EAAK,EAAAC,QAAQC,UAAqBjd,EAAO,CAAEmG,OAAQvH,KAAKD,GAAIuF,KAAM,aACpEtF,KAAK8c,OAAO7U,MACdjI,KAAK8c,OAAO7U,KAAKkW,GAEnBne,KAAK2P,aAAa,WAAYwO,UACvB,EAAAP,UAAUC,mBACV7d,KAAKqB,OAIN,cAAcD,GACpB,IAAIC,EAASrB,KAAKD,GAYlB,MAXkC,mBAAvBC,KAAK8c,OAAOzb,OACrBA,EAASrB,KAAK8c,OAAOzb,OAAO6d,MAAMlf,KAAKD,GAAIqB,GACX,UAAvBpB,KAAK8c,OAAOzb,SACrBA,EAAS,EAAA+c,QAAQrO,MAAM/P,KAAKD,KAEzBuD,SAASoS,KAAK2H,SAAShc,IAC1B,EAAA+c,QAAQpX,SAAS3F,EAAiC,WAAzBrB,KAAK8c,OAAO9V,SAAwBhH,KAAKD,GAAGsY,WAAarY,KAAK8c,OAAO9V,UAE5F3F,IAAWrB,KAAKD,KAClBC,KAAKmf,uBAAyBvC,EAAYwC,gBAAgBpP,KAAIgC,GAAQhS,KAAKD,GAAGgU,MAAM/B,MAE/E3Q,EAID,oBAaN,OAZArB,KAAKqB,OAAO0S,MAAMsL,cAAgB,OAClCrf,KAAKqB,OAAO0S,MAAMxK,MAAQvJ,KAAKge,WAAWzU,MAAQ,KAClDvJ,KAAKqB,OAAO0S,MAAMvK,OAASxJ,KAAKge,WAAWxU,OAAS,KACpDxJ,KAAKqB,OAAO0S,MAAMuL,WAAa,YAC/Btf,KAAKqB,OAAO0S,MAAMwL,WAAa,OAC/Bvf,KAAKqB,OAAO0S,MAAMnS,SAAW5B,KAAK8c,OAAO0C,cAAgB5C,EAAY4C,aACrExf,KAAKqB,OAAO0S,MAAM0L,OAAS,OAC3Bha,YAAW,KACLzF,KAAKqB,SACPrB,KAAKqB,OAAO0S,MAAMwL,WAAa,QAEhC,GACIvf,KAID,qBAEN,IAAIsB,EAAOtB,KAAKqB,OAAUrB,KAAKqB,OAA+BlB,mBAAgBoF,EAO9E,OANKjE,GAASA,EAAK4E,kBACjB0W,EAAYwC,gBAAgBzY,SAAQqL,IAClChS,KAAKqB,OAAO0S,MAAM/B,GAAQhS,KAAKmf,uBAAuBnN,IAAS,eAG5DhS,KAAKmf,uBACLnf,KAID,YAAYoB,GACdpB,KAAK8e,YACPC,qBAAqB/e,KAAK8e,YAE5B9e,KAAK8e,WAAaY,uBAAsB,YAC/B1f,KAAK8e,WACZ,MAAM5B,EAASld,KAAKge,WACpB,IAAIf,EAAkB,CAAExb,KAAM,EAAGC,IAAK,GACtC,GAAmC,aAA/B1B,KAAKqB,OAAO0S,MAAMnS,SAAyB,CAC7C,MAAM,KAAEH,EAAI,IAAEC,GAAQ1B,KAAKke,kBAAkB1c,wBAC7Cyb,EAAkB,CAAExb,OAAMC,OAE5B1B,KAAKqB,OAAO0S,MAAMtS,KAAOL,EAAMue,QAAUzC,EAAOtE,WAAaqE,EAAgBxb,KAAO,KACpFzB,KAAKqB,OAAO0S,MAAMrS,IAAMN,EAAMwe,QAAU1C,EAAOvE,UAAYsE,EAAgBvb,IAAM,QAK7E,+BAQN,OAPA1B,KAAKke,kBAAoBle,KAAKqB,OAAO8C,cACJ,UAA7BnE,KAAK8c,OAAO0C,eACdxf,KAAKgf,0BAA4Bhf,KAAKke,kBAAkBnK,MAAMnS,SAC1D4D,OAAO2V,iBAAiBnb,KAAKke,mBAAmBtc,SAASie,MAAM,YACjE7f,KAAKke,kBAAkBnK,MAAMnS,SAAW,aAGrC5B,KAQD,iBAAiB0U,GASvB,IAAIoL,EAAMxc,SAAS4S,cAAc,OAQjC,OAPA4J,EAAI/L,MAAMxK,MAAQ,MAClBuW,EAAI/L,MAAMvK,OAAS,MACnBlG,SAASoS,KAAK3Q,YAAY+a,GAC1BpL,EAAEqL,aAAaC,aAAaF,EAAK,EAAG,GACpCra,YAAW,IAAMnC,SAASoS,KAAK4C,YAAYwH,KAE3CpL,EAAEuL,kBACKjgB,KAID,eAAeoB,EAAkBrB,EAAiBuV,GAGxD,IAAI4K,EAAe,EACfC,EAAe,EACnB,GAAI7K,EAAQ,CACV,MAAM8K,EAAS9c,SAAS4S,cAAc,OACtC,EAAAkI,QAAQiC,YAAYD,EAAQ,CAC1BE,QAAS,IACT1e,SAAU,QACVF,IAAK,MACLD,KAAM,MACN8H,MAAO,MACPC,OAAQ,MACRiW,OAAQ,YAEVnK,EAAOvQ,YAAYqb,GACnB,MAAMG,EAAiBH,EAAO5e,wBAC9B8T,EAAOgD,YAAY8H,GACnBF,EAAeK,EAAe9e,KAC9B0e,EAAeI,EAAe7e,IAIhC,MAAM8e,EAAezgB,EAAGyB,wBACxB,MAAO,CACLC,KAAM+e,EAAa/e,KACnBC,IAAK8e,EAAa9e,IAClBkX,YAAcxX,EAAMue,QAAUa,EAAa/e,KAAOye,EAClDvH,WAAavX,EAAMwe,QAAUY,EAAa9e,IAAMye,EAChD5W,MAAOiX,EAAajX,MACpBC,OAAQgX,EAAahX,SAvS3B,gBAsBiB,EAAAgW,aAAqC,WAErC,EAAAd,yBAA0B,EAE1B,EAAAU,gBAAkB,CAAC,aAAc,gBAAiB,WAC/D,OAAQ,MAAO,UAAW,SAAU,QAAS,SAAU,e,8DCtD3D,eACA,SACA,SASA,MAAaqB,UAAoB,EAAA5D,gBAS/B,YAAY9c,EAAiBW,EAAuB,IAClDqc,QACA/c,KAAKD,GAAKA,EACVC,KAAK8c,OAASpc,EAEdV,KAAK0gB,WAAa1gB,KAAK0gB,WAAWrE,KAAKrc,MACvCA,KAAK2gB,UAAY3gB,KAAK2gB,UAAUtE,KAAKrc,MACrCA,KAAK4gB,WAAa5gB,KAAK4gB,WAAWvE,KAAKrc,MACvCA,KAAK6gB,MAAQ7gB,KAAK6gB,MAAMxE,KAAKrc,MAE7BA,KAAKD,GAAGoG,UAAUC,IAAI,gBACtBpG,KAAKD,GAAG0Z,iBAAiB,YAAazZ,KAAK0gB,YAC3C1gB,KAAK8gB,eAGA,GAAG1f,EAAwCgY,GAChD2D,MAAM5Z,GAAG/B,EAAOgY,GAGX,IAAIhY,GACT2b,MAAMxa,IAAInB,GAGL,SACApB,KAAK2c,WACVI,MAAM1S,SACNrK,KAAKD,GAAGoG,UAAU/B,OAAO,yBACzBpE,KAAKD,GAAG0Z,iBAAiB,YAAazZ,KAAK0gB,aAGtC,QAAQjD,GAAW,GACpBzd,KAAK2c,WACTI,MAAM9S,UACDwT,GAAYzd,KAAKD,GAAGoG,UAAUC,IAAI,yBACvCpG,KAAKD,GAAG4Z,oBAAoB,YAAa3Z,KAAK0gB,aAGzC,UACD1gB,KAAK+gB,QACP/gB,KAAKghB,wBAEPhhB,KAAKiK,SAAQ,GACbjK,KAAKD,GAAGoG,UAAU/B,OAAO,gBACzBpE,KAAKD,GAAGoG,UAAU/B,OAAO,gCAClBpE,KAAK+gB,OACZhE,MAAMW,UAGD,aAAahd,GAGlB,OAFAid,OAAO7D,KAAKpZ,GAAMiG,SAAQmK,GAAO9Q,KAAK8c,OAAOhM,GAAOpQ,EAAKoQ,KACzD9Q,KAAK8gB,eACE9gB,KAID,WAAWoB,GACjB,IAAKpB,KAAKihB,WAAY,OAGtB,GAFA7f,EAAMud,iBAEF3e,KAAK+gB,OAAQ,OACjB/gB,KAAK+gB,QAAS,EAEd,MAAM5C,EAAK,EAAAC,QAAQC,UAAqBjd,EAAO,CAAEmG,OAAQvH,KAAKD,GAAIuF,KAAM,aACpEtF,KAAK8c,OAAO1P,MACdpN,KAAK8c,OAAO1P,KAAK+Q,EAAIne,KAAKkhB,IAAI,EAAAtD,UAAUC,cAE1C7d,KAAK2P,aAAa,WAAYwO,GAC9Bne,KAAKD,GAAG0Z,iBAAiB,WAAYzZ,KAAK2gB,WAC1C3gB,KAAKD,GAAG0Z,iBAAiB,OAAQzZ,KAAK6gB,OACtC7gB,KAAKD,GAAG0Z,iBAAiB,YAAazZ,KAAK4gB,YAC3C5gB,KAAKD,GAAGoG,UAAUC,IAAI,qBAIhB,UAAUhF,GAChBA,EAAMud,iBACNvd,EAAM6e,kBAIA,WAAW7e,GACjB,IAAIpB,KAAKD,GAAGsd,SAASjc,EAAM+f,eAA3B,CAEA,GADAnhB,KAAKghB,wBACDhhB,KAAK+gB,OAAQ,CACf3f,EAAMud,iBACN,MAAMR,EAAK,EAAAC,QAAQC,UAAqBjd,EAAO,CAAEmG,OAAQvH,KAAKD,GAAIuF,KAAM,YACpEtF,KAAK8c,OAAOsE,KACdphB,KAAK8c,OAAOsE,IAAIjD,EAAIne,KAAKkhB,IAAI,EAAAtD,UAAUC,cAEzC7d,KAAK2P,aAAa,UAAWwO,UAExBne,KAAK+gB,QAIN,MAAM3f,GACZ,IAAKpB,KAAK+gB,OAAQ,OAClB3f,EAAMud,iBACN,MAAMR,EAAK,EAAAC,QAAQC,UAAqBjd,EAAO,CAAEmG,OAAQvH,KAAKD,GAAIuF,KAAM,SACpEtF,KAAK8c,OAAOuE,MACdrhB,KAAK8c,OAAOuE,KAAKlD,EAAIne,KAAKkhB,IAAI,EAAAtD,UAAUC,cAE1C7d,KAAK2P,aAAa,OAAQwO,GAC1Bne,KAAKghB,+BACEhhB,KAAK+gB,OAIN,wBACN/gB,KAAKD,GAAG4Z,oBAAoB,YAAa3Z,KAAK4gB,YAC9C5gB,KAAKD,GAAGoG,UAAU/B,OAAO,qBACrBpE,KAAK+gB,SACP/gB,KAAKD,GAAG4Z,oBAAoB,WAAY3Z,KAAK2gB,WAC7C3gB,KAAKD,GAAG4Z,oBAAoB,OAAQ3Z,KAAK6gB,QAMrC,WACN,OAAO,EAAAjD,UAAUC,eAAiB7d,KAAKc,QAAUd,KAAKc,OAAO,EAAA8c,UAAUC,YAAY9d,KAI7E,eAQN,OAPIC,KAAK8c,OAAOhc,QAAwC,iBAAvBd,KAAK8c,OAAOhc,OAC3Cd,KAAKc,OAAUf,GACNA,EAAG6C,QAAQ5C,KAAK8c,OAAOhc,QAGhCd,KAAKc,OAASd,KAAK8c,OAAOhc,OAErBd,KAID,IAAIkI,GACV,OAAO,OAAP,QACEjI,UAAWiI,EAAKnI,IACbmI,EAAKvG,OApJd,iB,+DCZA,cAEA,SACA,QAMA,MAAa2f,EAYX,YAAYvhB,GACVC,KAAKD,GAAKA,EAXZ,YAAYA,GAEV,OADKA,EAAGwhB,YAAaxhB,EAAGwhB,UAAY,IAAID,EAAUvhB,IAC3CA,EAAGwhB,UAYL,GAAG7E,EAAmBtD,GAQ3B,OAPIpZ,KAAKwhB,aAAe,CAAC,OAAQ,YAAa,YAAYnI,QAAQqD,IAAc,EAC9E1c,KAAKwhB,YAAYre,GAAGuZ,EAAgDtD,GAC3DpZ,KAAKyhB,aAAe,CAAC,OAAQ,WAAY,WAAWpI,QAAQqD,IAAc,EACnF1c,KAAKyhB,YAAYte,GAAGuZ,EAA8CtD,GACzDpZ,KAAK0hB,aAAe,CAAC,cAAe,SAAU,cAAcrI,QAAQqD,IAAc,GAC3F1c,KAAK0hB,YAAYve,GAAGuZ,EAAsDtD,GAErEpZ,KAGF,IAAI0c,GAQT,OAPI1c,KAAKwhB,aAAe,CAAC,OAAQ,YAAa,YAAYnI,QAAQqD,IAAc,EAC9E1c,KAAKwhB,YAAYjf,IAAIma,GACZ1c,KAAKyhB,aAAe,CAAC,OAAQ,WAAY,WAAWpI,QAAQqD,IAAc,EACnF1c,KAAKyhB,YAAYlf,IAAIma,GACZ1c,KAAK0hB,aAAe,CAAC,cAAe,SAAU,cAAcrI,QAAQqD,IAAc,GAC3F1c,KAAK0hB,YAAYnf,IAAIma,GAEhB1c,KAGF,eAAeU,GAMpB,OALKV,KAAKwhB,YAGRxhB,KAAKwhB,YAAYG,aAAajhB,GAF9BV,KAAKwhB,YAAc,IAAI,EAAA5E,YAAY5c,KAAKD,GAAIW,GAIvCV,KAGF,iBAKL,OAJIA,KAAKwhB,cACPxhB,KAAKwhB,YAAY9D,iBACV1d,KAAKwhB,aAEPxhB,KAGF,eAAeU,GAMpB,OALKV,KAAK0hB,YAGR1hB,KAAK0hB,YAAYC,aAAajhB,GAF9BV,KAAK0hB,YAAc,IAAI,EAAAE,YAAY5hB,KAAKD,GAAIW,GAIvCV,KAGF,iBAKL,OAJIA,KAAK0hB,cACP1hB,KAAK0hB,YAAYhE,iBACV1d,KAAK0hB,aAEP1hB,KAGF,eAAeU,GAMpB,OALKV,KAAKyhB,YAGRzhB,KAAKyhB,YAAYE,aAAajhB,GAF9BV,KAAKyhB,YAAc,IAAI,EAAAhB,YAAYzgB,KAAKD,GAAIW,GAIvCV,KAGF,iBAKL,OAJIA,KAAKyhB,cACPzhB,KAAKyhB,YAAY/D,iBACV1d,KAAKyhB,aAEPzhB,MAtFX,e,6DCPA,qB,6DCIA,MAAa6hB,EAgBX,YAAYC,EAAmB9N,EAAmB8I,GAN1C,KAAAiE,QAAS,EAOf/gB,KAAK8hB,KAAOA,EACZ9hB,KAAKmO,IAAM6F,EACXhU,KAAK8c,OAASA,EAEd9c,KAAK+hB,WAAa/hB,KAAK+hB,WAAW1F,KAAKrc,MACvCA,KAAKgiB,WAAahiB,KAAKgiB,WAAW3F,KAAKrc,MACvCA,KAAKiiB,SAAWjiB,KAAKiiB,SAAS5F,KAAKrc,MAEnCA,KAAKkiB,QAIC,QACN,MAAMniB,EAAKuD,SAAS4S,cAAc,OAQlC,OAPAnW,EAAGoG,UAAUC,IAAI,uBACjBrG,EAAGoG,UAAUC,IAAI,GAAGyb,EAAkBlH,SAAS3a,KAAKmO,OACpDpO,EAAGgU,MAAM0L,OAAS,MAClB1f,EAAGgU,MAAMoO,WAAa,OACtBniB,KAAKD,GAAKA,EACVC,KAAK8hB,KAAK/c,YAAY/E,KAAKD,IAC3BC,KAAKD,GAAG0Z,iBAAiB,YAAazZ,KAAK+hB,YACpC/hB,KAIF,UAML,OALIA,KAAK+gB,QAAQ/gB,KAAKiiB,SAASjiB,KAAKoiB,gBACpCpiB,KAAKD,GAAG4Z,oBAAoB,YAAa3Z,KAAK+hB,YAC9C/hB,KAAK8hB,KAAKxJ,YAAYtY,KAAKD,WACpBC,KAAKD,UACLC,KAAK8hB,KACL9hB,KAID,WAAW0U,GACjBA,EAAEiK,iBACF3e,KAAKoiB,eAAiB1N,EACtBpR,SAASmW,iBAAiB,YAAazZ,KAAKgiB,YAAY,GACxD1e,SAASmW,iBAAiB,UAAWzZ,KAAKiiB,UAIpC,WAAWvN,GACjB,IAAI2N,EAAIriB,KAAKoiB,gBAERpiB,KAAK+gB,QAAUhf,KAAKugB,IAAI5N,EAAE5S,EAAIugB,EAAEvgB,GAAKC,KAAKugB,IAAI5N,EAAExS,EAAImgB,EAAEngB,GAAK,GAC9DlC,KAAK+gB,QAAS,EACd/gB,KAAKoK,cAAc,QAASpK,KAAKoiB,iBACxBpiB,KAAK+gB,QACd/gB,KAAKoK,cAAc,OAAQsK,GAKvB,SAASA,GACX1U,KAAK+gB,QACP/gB,KAAKoK,cAAc,OAAQsK,GAE7BpR,SAASqW,oBAAoB,YAAa3Z,KAAKgiB,YAAY,GAC3D1e,SAASqW,oBAAoB,UAAW3Z,KAAKiiB,iBACtCjiB,KAAK+gB,cACL/gB,KAAKoiB,eAIN,cAAcjJ,EAAc/X,GAElC,OADIpB,KAAK8c,OAAO3D,IAAOnZ,KAAK8c,OAAO3D,GAAM/X,GAClCpB,MArFX,sBAciB,EAAA2a,OAAS,iB,8DCpB1B,eACA,SACA,SACA,SAiBA,MAAaiH,UAAoB,EAAA/E,gBA2B/B,YAAY9c,EAAiBW,EAAuB,IAClDqc,QAqEM,KAAAwF,cAAgB,KACtBviB,KAAKD,GAAGoG,UAAU/B,OAAO,0BAInB,KAAAoe,cAAgB,KACtBxiB,KAAKD,GAAGoG,UAAUC,IAAI,0BA4KhB,KAAA8a,IAAM,KACZ,MACMjE,EADgBjd,KAAKD,GAAGoE,cACQ3C,wBAChCihB,EAAU,CACdlZ,MAAOvJ,KAAK0iB,aAAanZ,MACzBC,OAAQxJ,KAAK0iB,aAAalZ,OAASxJ,KAAK2iB,SACxClhB,KAAMzB,KAAK0iB,aAAajhB,KACxBC,IAAK1B,KAAK0iB,aAAahhB,IAAM1B,KAAK2iB,UAE9BlZ,EAAOzJ,KAAK4iB,cAAgBH,EAClC,MAAO,CACL7gB,SAAU,CACRH,KAAMgI,EAAKhI,KAAOwb,EAAgBxb,KAClCC,IAAK+H,EAAK/H,IAAMub,EAAgBvb,KAElC4H,KAAM,CACJC,MAAOE,EAAKF,MACZC,OAAQC,EAAKD,UAvQjBxJ,KAAKD,GAAKA,EACVC,KAAK8c,OAASpc,EACdV,KAAKqK,SACLrK,KAAK6iB,iBACL7iB,KAAK8iB,iBAGA,GAAG1hB,EAAgDgY,GACxD2D,MAAM5Z,GAAG/B,EAAOgY,GAGX,IAAIhY,GACT2b,MAAMxa,IAAInB,GAGL,SACL2b,MAAM1S,SACNrK,KAAKD,GAAGoG,UAAUC,IAAI,gBACtBpG,KAAKD,GAAGoG,UAAU/B,OAAO,yBAGpB,UACL2Y,MAAM9S,UACNjK,KAAKD,GAAGoG,UAAUC,IAAI,yBACtBpG,KAAKD,GAAGoG,UAAU/B,OAAO,gBAGpB,UACLpE,KAAK+iB,kBACD/iB,KAAK8c,OAAOhK,WACd9S,KAAKD,GAAG4Z,oBAAoB,YAAa3Z,KAAKuiB,eAC9CviB,KAAKD,GAAG4Z,oBAAoB,WAAY3Z,KAAKwiB,gBAE/CxiB,KAAKD,GAAGoG,UAAU/B,OAAO,uBAClBpE,KAAKD,GACZgd,MAAMW,UAGD,aAAahd,GAClB,IAAIsiB,EAAiBtiB,EAAKqS,SAAWrS,EAAKqS,UAAY/S,KAAK8c,OAAO/J,QAC9DkQ,EAAkBviB,EAAKoS,UAAYpS,EAAKoS,WAAa9S,KAAK8c,OAAOhK,SASrE,OARA6K,OAAO7D,KAAKpZ,GAAMiG,SAAQmK,GAAO9Q,KAAK8c,OAAOhM,GAAOpQ,EAAKoQ,KACrDkS,IACFhjB,KAAK+iB,kBACL/iB,KAAK8iB,kBAEHG,GACFjjB,KAAK6iB,iBAEA7iB,KAID,iBAWN,OAVIA,KAAK8c,OAAOhK,UACd9S,KAAKD,GAAGoG,UAAUC,IAAI,yBAEtBpG,KAAKD,GAAG0Z,iBAAiB,YAAazZ,KAAKuiB,eAC3CviB,KAAKD,GAAG0Z,iBAAiB,WAAYzZ,KAAKwiB,iBAE1CxiB,KAAKD,GAAGoG,UAAU/B,OAAO,yBACzBpE,KAAKD,GAAG4Z,oBAAoB,YAAa3Z,KAAKuiB,eAC9CviB,KAAKD,GAAG4Z,oBAAoB,WAAY3Z,KAAKwiB,gBAExCxiB,KAcD,iBACN,IAAIkjB,EAAmBljB,KAAK8c,OAAO/J,SAAW,SAiB9C,MAhByB,QAArBmQ,IACFA,EAAmB,uBAErBljB,KAAKmjB,SAAWD,EAAiB5J,MAAM,KACpCtJ,KAAI7B,GAAOA,EAAIiV,SACfpT,KAAI7B,GAAO,IAAI,EAAA0T,kBAAkB7hB,KAAKD,GAAIoO,EAAK,CAC9CnG,MAAQ5G,IACNpB,KAAKqjB,aAAajiB,IAEpB6G,KAAO7G,IACLpB,KAAKsjB,YAAYliB,IAEnBwQ,KAAOxQ,IACLpB,KAAKujB,UAAUniB,EAAO+M,QAGrBnO,KAID,aAAaoB,GACnBpB,KAAK0iB,aAAe1iB,KAAKD,GAAGyB,wBAC5BxB,KAAKwjB,SAAW,EAAA7e,MAAM8e,gBAAgBzjB,KAAKD,IAC3CC,KAAK0jB,QAAU1jB,KAAKwjB,SAAShgB,UAC7BxD,KAAK2jB,WAAaviB,EAClBpB,KAAK4jB,eACL5jB,KAAK6jB,eACL,MAAM1F,EAAK,EAAAC,QAAQC,UAAsBjd,EAAO,CAAEkE,KAAM,cAAeiC,OAAQvH,KAAKD,KAMpF,OALIC,KAAK8c,OAAO9U,OACdhI,KAAK8c,OAAO9U,MAAMmW,EAAIne,KAAKkhB,OAE7BlhB,KAAKD,GAAGoG,UAAUC,IAAI,yBACtBpG,KAAK2P,aAAa,cAAewO,GAC1Bne,KAID,UAAUoB,EAAmB+M,GACnCnO,KAAK2iB,SAAW3iB,KAAKwjB,SAAShgB,UAAYxD,KAAK0jB,QAC/C1jB,KAAK4iB,aAAe5iB,KAAK8jB,WAAW1iB,EAAO+M,GAC3CnO,KAAK6jB,eACL,MAAM1F,EAAK,EAAAC,QAAQC,UAAsBjd,EAAO,CAAEkE,KAAM,SAAUiC,OAAQvH,KAAKD,KAK/E,OAJIC,KAAK8c,OAAO3U,QACdnI,KAAK8c,OAAO3U,OAAOgW,EAAIne,KAAKkhB,OAE9BlhB,KAAK2P,aAAa,SAAUwO,GACrBne,KAID,YAAYoB,GAClB,MAAM+c,EAAK,EAAAC,QAAQC,UAAsBjd,EAAO,CAAEkE,KAAM,aAAciC,OAAQvH,KAAKD,KAYnF,OAXIC,KAAK8c,OAAO7U,MACdjI,KAAK8c,OAAO7U,KAAKkW,GAEnBne,KAAKD,GAAGoG,UAAU/B,OAAO,yBACzBpE,KAAK2P,aAAa,aAAcwO,GAChCne,KAAK+jB,sBACE/jB,KAAK2jB,kBACL3jB,KAAK0iB,oBACL1iB,KAAK4iB,oBACL5iB,KAAK0jB,eACL1jB,KAAK2iB,SACL3iB,KAID,eASN,OARAA,KAAKgkB,iBAAmBpC,EAAYqC,iBAAiBjU,KAAIgC,GAAQhS,KAAKD,GAAGgU,MAAM/B,KAC/EhS,KAAKgf,0BAA4Bhf,KAAKD,GAAGoE,cAAc4P,MAAMnS,SACzD4D,OAAO2V,iBAAiBnb,KAAKD,GAAGoE,eAAevC,SAASie,MAAM,YAChE7f,KAAKD,GAAGoE,cAAc4P,MAAMnS,SAAW,YAEzC5B,KAAKD,GAAGgU,MAAMnS,SAAW5B,KAAK8c,OAAO0C,cAAgB,WACrDxf,KAAKD,GAAGgU,MAAMuM,QAAU,MACxBtgB,KAAKD,GAAGgU,MAAM0L,OAAS,OAChBzf,KAID,eAKN,OAJA4hB,EAAYqC,iBAAiBtd,SAAQ,CAACqL,EAAMzD,KAC1CvO,KAAKD,GAAGgU,MAAM/B,GAAQhS,KAAKgkB,iBAAiBzV,IAAM,QAEpDvO,KAAKD,GAAGoE,cAAc4P,MAAMnS,SAAW5B,KAAKgf,2BAA6B,KAClEhf,KAID,WAAWoB,EAAmB+M,GACpC,MAAM+V,EAASlkB,KAAK2jB,WACdlB,EAAU,CACdlZ,MAAOvJ,KAAK0iB,aAAanZ,MACzBC,OAAQxJ,KAAK0iB,aAAalZ,OAASxJ,KAAK2iB,SACxClhB,KAAMzB,KAAK0iB,aAAajhB,KACxBC,IAAK1B,KAAK0iB,aAAahhB,IAAM1B,KAAK2iB,UAG9BwB,EAAU/iB,EAAMue,QAAUuE,EAAOvE,QACjCyE,EAAUhjB,EAAMwe,QAAUsE,EAAOtE,QAEnCzR,EAAIkL,QAAQ,MAAQ,IACtBoJ,EAAQlZ,OAASnI,EAAMue,QAAUuE,EAAOvE,SAEtCxR,EAAIkL,QAAQ,MAAQ,IACtBoJ,EAAQjZ,QAAUpI,EAAMwe,QAAUsE,EAAOtE,SAEvCzR,EAAIkL,QAAQ,MAAQ,IACtBoJ,EAAQlZ,OAAS4a,EACjB1B,EAAQhhB,MAAQ0iB,GAEdhW,EAAIkL,QAAQ,MAAQ,IACtBoJ,EAAQjZ,QAAU4a,EAClB3B,EAAQ/gB,KAAO0iB,GAEjB,MAAMC,EAAUrkB,KAAKskB,gBAAgB7B,EAAQlZ,MAAOkZ,EAAQjZ,QAa5D,OAZIiZ,EAAQlZ,QAAU8a,EAAQ9a,QACxB4E,EAAIkL,QAAQ,MAAQ,IACtBoJ,EAAQhhB,MAAQghB,EAAQlZ,MAAQ8a,EAAQ9a,OAE1CkZ,EAAQlZ,MAAQ8a,EAAQ9a,OAEtBkZ,EAAQjZ,SAAW6a,EAAQ7a,SACzB2E,EAAIkL,QAAQ,MAAQ,IACtBoJ,EAAQ/gB,KAAO+gB,EAAQjZ,OAAS6a,EAAQ7a,QAE1CiZ,EAAQjZ,OAAS6a,EAAQ7a,QAEpBiZ,EAID,gBAAgB8B,EAAgBC,GACtC,MAAMC,EAAWzkB,KAAK8c,OAAO2H,UAAYzX,OAAO0X,iBAC1C/R,EAAW3S,KAAK8c,OAAOnK,UAAY4R,EACnCI,EAAY3kB,KAAK8c,OAAO6H,WAAa3X,OAAO0X,iBAC5CE,EAAY5kB,KAAK8c,OAAO8H,WAAaJ,EAG3C,MAAO,CAAEjb,MAFKxH,KAAKsL,IAAIoX,EAAU1iB,KAAKC,IAAI2Q,EAAU4R,IAEpC/a,OADDzH,KAAKsL,IAAIsX,EAAW5iB,KAAKC,IAAI4iB,EAAWJ,KAKjD,eACN,IAAIvH,EAAkB,CAAExb,KAAM,EAAGC,IAAK,EAAG6H,MAAO,EAAGC,OAAQ,GAC3D,GAA+B,aAA3BxJ,KAAKD,GAAGgU,MAAMnS,SAAyB,CACzC,MAAMijB,EAAgB7kB,KAAKD,GAAGoE,eACxB,KAAE1C,EAAI,IAAEC,GAAQmjB,EAAcrjB,wBACpCyb,EAAkB,CAAExb,OAAMC,MAAK6H,MAAO,EAAGC,OAAQ,GAEnD,OAAKxJ,KAAK4iB,cACVjF,OAAO7D,KAAK9Z,KAAK4iB,cAAcjc,SAAQmK,IACrC,MAAMoJ,EAAQla,KAAK4iB,aAAa9R,GAChC9Q,KAAKD,GAAGgU,MAAMjD,GAAOoJ,EAAQ+C,EAAgBnM,GAAO,QAE/C9Q,MALwBA,KASzB,kBAGN,OAFAA,KAAKmjB,SAASxc,SAAQG,GAAUA,EAAO4W,mBAChC1d,KAAKmjB,SACLnjB,MA/QX,gBAyBiB,EAAAikB,iBAAmB,CAAC,QAAS,SAAU,WAAY,OAAQ,MAAO,UAAW,W,6DC7C9F,MAAa7F,EAiBJ,aAAare,GAClB,MAAMuB,EAAOvB,EAAG2E,WAAU,GAE1B,OADApD,EAAKoa,gBAAgB,MACdpa,EAGF,gBAAgBvB,EAAiBuV,GACtC,IAAI+C,EAEFA,EADoB,iBAAX/C,EACIhS,SAASyC,cAAcuP,GAEvBA,EAEX+C,GACFA,EAAWtT,YAAYhF,GAIpB,2BAA2BA,GAC3B,aAAe+kB,KAAKtf,OAAO2V,iBAAiBpb,GAAI6B,YACnD7B,EAAGgU,MAAMnS,SAAW,YAIjB,mBAAmB7B,EAAiBglB,GACzC,GAAIA,aAAkBpH,OACpB,IAAK,MAAM0E,KAAK0C,EACVA,EAAOpJ,eAAe0G,KACpBrT,MAAMC,QAAQ8V,EAAO1C,IAEtB0C,EAAO1C,GAAgB1b,SAAQqD,IAC9BjK,EAAGgU,MAAMsO,GAAKrY,KAGhBjK,EAAGgU,MAAMsO,GAAK0C,EAAO1C,IAOxB,iBAAoB3N,EAA2BsQ,GACpD,MAAMC,EAAM,CAAE3f,KAAM0f,EAAK1f,MACnB4f,EAAM,CACVC,OAAQ,EACRC,MAAO,EACPC,QAAS,EACThL,SAAS,EACTiL,YAAY,EACZ/d,OAAQyd,EAAKzd,OAASyd,EAAKzd,OAASmN,EAAEnN,QAQxC,OALKmN,EAAgBqL,eACnBkF,EAAkB,aAAKvQ,EAAgBqL,cAEzC,CAAC,SAAS,UAAU,UAAU,YAAYpZ,SAAQ0J,GAAK4U,EAAI5U,GAAKqE,EAAErE,KAClE,CAAC,QAAQ,QAAQ,UAAU,UAAU,UAAU,WAAW1J,SAAQ0J,GAAK4U,EAAI5U,GAAKqE,EAAErE,KAC3E,+BAAI4U,GAAQC,IA1EvB,YAEgB,EAAAK,4BAA+B,MAC3C,IAAIC,GAAkB,EAClBC,EAAc,OAUlB,OAPAniB,SAASmW,iBAAiB,OAAQgM,EAAa,CAC7C,cAEE,OADAD,GAAkB,GACX,KAGXliB,SAASqW,oBAAoB,OAAQ8L,GAC9BD,GAZmC,I,+DCF9C,eACA,SAGA,QAEA,U,4DAGA,QAKA,MAAaE,UAA0B,EAAA9lB,YAE9B,UAAUG,EAAyBW,EAAcoQ,EAAaoJ,GAsBnE,OArBAla,KAAK2lB,eAAe5lB,GAAI4G,SAAQif,IAC9B,GAAa,YAATllB,GAA+B,WAATA,EACxBklB,EAAIlE,aAAekE,EAAIlE,YAAYhhB,UAC9B,GAAa,YAATA,EACTklB,EAAIlE,aAAekE,EAAIC,sBAClB,GAAa,WAATnlB,EACTklB,EAAIE,eAAe,CAAE,CAAChV,GAAMoJ,QACvB,CACL,MAAMnZ,EAAO6kB,EAAI7lB,GAAGI,cAAcY,KAClC,IAAIgS,EAAU6S,EAAI7lB,GAAGwT,aAAa,qBAAuBqS,EAAI7lB,GAAGwT,aAAa,qBAAuBxS,EAAKL,KAAKR,UAAU6S,QACxH6S,EAAIE,eAAe,OAAD,sCACb/kB,EAAKL,KAAKR,WACV,CAAE6S,QAASA,IACX,CACD/K,MAAOtH,EAAKsH,MACZC,KAAMvH,EAAKuH,KACXE,OAAQzH,EAAKyH,cAKdnI,KAGF,UAAUD,EAAyBW,EAAcoQ,EAAaoJ,GAuBnE,OAtBAla,KAAK2lB,eAAe5lB,GAAI4G,SAAQif,IAC9B,GAAa,YAATllB,GAA+B,WAATA,EACxBklB,EAAIpE,aAAeoE,EAAIpE,YAAY9gB,UAC9B,GAAa,YAATA,EACTklB,EAAIpE,aAAeoE,EAAIG,sBAClB,GAAa,WAATrlB,EACTklB,EAAII,eAAe,CAAE,CAAClV,GAAMoJ,QACvB,CACL,MAAMnZ,EAAO6kB,EAAI7lB,GAAGI,cAAcY,KAClC6kB,EAAII,eAAe,OAAD,wBACbjlB,EAAKL,KAAKT,WACV,CACDgmB,YAAcllB,EAAKL,KAAKyT,YAAcpT,EAAKL,KAAKwlB,QAC5CnlB,EAAKhB,GAAGoE,cACPpD,EAAKL,KAAKT,UAAUgmB,aAAe,KACxCje,MAAOtH,EAAKsH,MACZC,KAAMvH,EAAKuH,KACXC,KAAMxH,EAAKwH,YAKZlI,KAGF,OAAOD,EAAsBW,GAElC,OADAV,KAAK2lB,eAAe5lB,GAAI4G,SAAQif,GAAOA,EAAII,eAAetlB,KACnDV,KAGF,UAAUD,EAAyBW,EAA0BoQ,EAAaoJ,GAkB/E,MAjB2B,mBAAhBxZ,EAAKI,QAA0BJ,EAAKylB,UAC7CzlB,EAAKylB,QAAUzlB,EAAKI,OACpBJ,EAAKI,OAAUf,GAAOW,EAAKylB,QAAQpmB,IAErCC,KAAK2lB,eAAe5lB,GAAI4G,SAAQif,IACjB,YAATllB,GAA+B,WAATA,EACxBklB,EAAInE,aAAemE,EAAInE,YAAY/gB,KACjB,YAATA,EACLklB,EAAInE,aACNmE,EAAIQ,iBAEY,WAAT1lB,EACTklB,EAAIS,eAAe,CAAE,CAACvV,GAAMoJ,IAE5B0L,EAAIS,eAAe3lB,MAGhBV,KAIF,YAAYD,GACjB,OAAOA,GAAMA,EAAGwhB,WAAaxhB,EAAGwhB,UAAUE,cAAgB1hB,EAAGwhB,UAAUE,YAAY9E,SAI9E,YAAY5c,GACjB,OAAOA,GAAMA,EAAGwhB,WAAaxhB,EAAGwhB,UAAUC,cAAgBzhB,EAAGwhB,UAAUC,YAAY7E,SAI9E,YAAY5c,GACjB,OAAOA,GAAMA,EAAGwhB,WAAaxhB,EAAGwhB,UAAUG,cAAgB3hB,EAAGwhB,UAAUG,YAAY/E,SAG9E,GAAG5c,EAAyBoZ,EAAcC,GAS/C,OARApZ,KAAK2lB,eAAe5lB,GAAI4G,SAAQif,GAC9BA,EAAIziB,GAAGgW,GAAO/X,IACZgY,EACEhY,EACA,EAAAwc,UAAUC,YAAc,EAAAD,UAAUC,YAAY9d,GAAKqB,EAAMmG,OACzD,EAAAqW,UAAUC,YAAc,EAAAD,UAAUC,YAAYxc,OAAS,WAGtDrB,KAGF,IAAID,EAAyBoZ,GAElC,OADAnZ,KAAK2lB,eAAe5lB,GAAI4G,SAAQif,GAAOA,EAAIrjB,IAAI4W,KACxCnZ,KAID,eAAe+J,EAAuBuc,GAAS,GACrD,IAAIC,EAAQ,EAAA5hB,MAAM+B,YAAYqD,GAC9B,IAAKwc,EAAMxY,OAAQ,MAAO,GAC1B,IAAI+I,EAAOyP,EAAMvW,KAAI0E,GAAKA,EAAE6M,YAAc+E,EAAS,EAAAhF,UAAUxL,KAAKpB,GAAK,QAEvE,OADK4R,GAAUxP,EAAKtK,QAAOga,GAAKA,IACzB1P,GArHX,sBA0HA,EAAAlX,YAAY+K,eAAe+a,I,6HCvI3B,UACA,SACA,UACA,UAEA,W,6DCIA,oBAAyB/lB,EAAM8mB,EAAGC,EAAiBC,EAAiBC,GAClE,IAAIC,EAAU,IAAIC,KAChB5R,QAAQmB,KAAK,2BAA6BqQ,EAAU,sBAAwBE,EAA/D,gCACFD,EAAU,gDACdF,EAAEvH,MAAMvf,EAAMmnB,IAGvB,OADAD,EAAQrmB,UAAYimB,EAAEjmB,UACfqmB,GAIT,wBAA6BnmB,EAAwBgmB,EAAiBC,EAAiBC,QAC/DrhB,IAAlB7E,EAAKgmB,KACPhmB,EAAKimB,GAAWjmB,EAAKgmB,GACrBxR,QAAQmB,KAAK,yBAA2BqQ,EAAU,sBAAwBE,EAAM,gCAC9ED,EAAU,kDAKhB,2BAAgCjmB,EAAwBgmB,EAAiBE,EAAa5B,QAC9Dzf,IAAlB7E,EAAKgmB,IACPxR,QAAQmB,KAAK,yBAA2BqQ,EAAU,sBAAwBE,EAAM5B,IAKpF,wBAA6BjlB,EAAiB2mB,EAAiBC,EAAiBC,GAC9E,IAAIG,EAAUhnB,EAAGwT,aAAamT,GACd,OAAZK,IACFhnB,EAAGqb,aAAauL,EAASI,GACzB7R,QAAQmB,KAAK,4BAA8BqQ,EAAU,KAAOK,EAAU,oCAAsCH,EAAM,gCAChHD,EAAU,kDAOhB,MAAahiB,EAGX,mBAAmBoF,GACjB,GAAmB,iBAARA,EAAkB,CAC3B,IAAI+M,EAAOxT,SAAS0jB,iBAAiBjd,GAKrC,OAJK+M,EAAK/I,QAAqB,MAAXhE,EAAI,IAAyB,MAAXA,EAAI,KACxC+M,EAAOxT,SAAS0jB,iBAAiB,IAAMjd,GAClC+M,EAAK/I,SAAU+I,EAAOxT,SAAS0jB,iBAAiB,IAAMjd,KAEtDiF,MAAMmJ,KAAKrB,GAEpB,MAAO,CAAC/M,GAIV,kBAAkBA,GAChB,GAAmB,iBAARA,EAAkB,CAC3B,IAAKA,EAAIgE,OAAQ,OAAO,KACxB,GAAe,MAAXhE,EAAI,GACN,OAAOzG,SAAS2jB,eAAeld,EAAIoT,UAAU,IAE/C,GAAe,MAAXpT,EAAI,IAAyB,MAAXA,EAAI,GACxB,OAAOzG,SAASyC,cAAcgE,GAIhC,IAAI4E,OAAO5E,EAAI,IACb,OAAOzG,SAAS2jB,eAAeld,GAIjC,IAAIhK,EAAKuD,SAASyC,cAAcgE,GAGhC,OAFKhK,IAAMA,EAAKuD,SAAS2jB,eAAeld,IACnChK,IAAMA,EAAKuD,SAASyC,cAAc,IAAMgE,IACtChK,EAET,OAAOgK,EAIT,qBAAqByD,EAAsBC,GACzC,QAASD,EAAEtL,GAAKuL,EAAEvL,EAAIuL,EAAEzK,GAAKwK,EAAEtL,EAAIsL,EAAExK,GAAKyK,EAAEvL,GAAKsL,EAAE1L,EAAI0L,EAAEzK,GAAK0K,EAAE3L,GAAK0L,EAAE1L,GAAK2L,EAAE3L,EAAI2L,EAAE1K,GAItF,kBAAkByK,EAAsBC,GACtC,OAAO9I,EAAM4H,cAAciB,EAAG,CAAC1L,EAAG2L,EAAE3L,EAAE,GAAKI,EAAGuL,EAAEvL,EAAE,GAAKa,EAAG0K,EAAE1K,EAAE,EAAGC,EAAGyK,EAAEzK,EAAE,IAQ1E,YAAYiI,EAAwBkD,EAActD,GAEhD,OADAA,EAASA,GAAUI,EAAMyF,QAAO,CAACwW,EAAKpkB,IAAMf,KAAKC,IAAIc,EAAEhB,EAAIgB,EAAEC,EAAGmkB,IAAM,IAAM,IAC/D,IAAT/Y,EACKlD,EAAMmD,MAAK,CAACZ,EAAGC,IAAOA,EAAE3L,EAAI2L,EAAEvL,EAAI2I,GAAS2C,EAAE1L,EAAI0L,EAAEtL,EAAI2I,KAEvDI,EAAMmD,MAAK,CAACX,EAAGD,IAAOC,EAAE3L,EAAI2L,EAAEvL,EAAI2I,GAAS2C,EAAE1L,EAAI0L,EAAEtL,EAAI2I,KASlE,wBAAwByL,EAAYhB,GAClC,IAAIvB,EAA0BzQ,SAAS4S,cAAc,SAiBrD,OAhBAnC,EAAMqH,aAAa,OAAQ,YAC3BrH,EAAMqH,aAAa,cAAe9E,GAE7BvC,EAAcoT,WAEhBpT,EAAcoT,WAAWC,QAAU,GAEpCrT,EAAMhP,YAAYzB,SAAS+jB,eAAe,KAEvC/R,EAKHA,EAAOgS,aAAavT,EAAOuB,EAAOiS,aAHlCjS,EAAShS,SAASkkB,qBAAqB,QAAQ,IACxCziB,YAAYgP,GAIdA,EAAM0T,MAIf,wBAAwBnR,GACtB,IAAIvW,EAAKuD,SAASyC,cAAc,qBAAuBuQ,EAAK,KACxDvW,GAAMA,EAAGsY,YAAYtY,EAAGqE,SAI9B,kBAAkBqjB,EAAsB9kB,EAAkB+kB,GAC3B,mBAAlBD,EAAME,QACfF,EAAME,QAAQhlB,EAAU+kB,GACa,mBAArBD,EAAMG,YACtBH,EAAMG,WAAW,GAAGjlB,KAAY+kB,MAKpC,cAAcG,GACZ,MAAiB,kBAANA,EACFA,EAEQ,iBAANA,IAEM,MADfA,EAAIA,EAAEC,gBACqB,OAAND,GAAoB,UAANA,GAAuB,MAANA,GAE/CE,QAAQF,GAGjB,gBAAgB3N,GACd,OAAkB,OAAVA,GAAmC,IAAjBA,EAAMnM,YAAgBxI,EAAYyH,OAAOkN,GAGrE,mBAAmBlQ,GACjB,IAAIhH,EACA6U,EAAO,KACX,GAAmB,iBAAR7N,EAAkB,CAC3B,IAAI6V,EAAQ7V,EAAI6V,MAAM,yEACtB,IAAKA,EACH,MAAM,IAAImI,MAAM,kBAElBnQ,EAAOgI,EAAM,IAAM,KACnB7c,EAAIilB,WAAWpI,EAAM,SAErB7c,EAAIgH,EAEN,MAAO,CAAEhH,IAAG6U,QAKd,gBAAgBtQ,KAAW2gB,GAczB,OAZAA,EAAQvhB,SAAQwhB,IACd,IAAK,MAAMrX,KAAOqX,EAAQ,CACxB,IAAKA,EAAOxM,eAAe7K,GAAM,OACb,OAAhBvJ,EAAOuJ,SAAiCvL,IAAhBgC,EAAOuJ,GACjCvJ,EAAOuJ,GAAOqX,EAAOrX,GACW,iBAAhBqX,EAAOrX,IAA4C,iBAAhBvJ,EAAOuJ,IAE1D9Q,KAAK0O,SAASnH,EAAOuJ,GAAMqX,EAAOrX,QAKjCvJ,EAIT,YAAYiG,EAAYC,GACtB,GAAiB,iBAAND,EAAiB,OAAOA,GAAKC,EACxC,UAAWD,UAAaC,EAAG,OAAO,EAElC,GAAIkQ,OAAO7D,KAAKtM,GAAGO,SAAW4P,OAAO7D,KAAKrM,GAAGM,OAAQ,OAAO,EAC5D,IAAK,MAAM+C,KAAOtD,EAChB,GAAIA,EAAEsD,KAASrD,EAAEqD,GAAM,OAAO,EAEhC,OAAO,EAIT,eAAetD,EAAsBC,GAKnC,OAJAD,EAAE1L,EAAI2L,EAAE3L,EACR0L,EAAEtL,EAAIuL,EAAEvL,EACRsL,EAAEzK,EAAI0K,EAAE1K,EACRyK,EAAExK,EAAIyK,EAAEzK,EACDwK,EAIT,eAAeA,EAAsBC,GACnC,OAAOD,GAAKC,GAAKD,EAAE1L,IAAM2L,EAAE3L,GAAK0L,EAAEtL,IAAMuL,EAAEvL,GAAKsL,EAAEzK,IAAM0K,EAAE1K,GAAKyK,EAAExK,IAAMyK,EAAEzK,EAI1E,6BAA6BwK,EAAYC,GACvC,GAAiB,iBAAND,GAA+B,iBAANC,EACpC,IAAK,IAAIqD,KAAOtD,EAAG,CACjB,IAAIxD,EAAMwD,EAAEsD,GACZ,GAAI9G,GAAsB,iBAARA,EAAkB,CAClC,IAAK,IAAIuE,KAAKvE,EACRA,EAAIuE,KAAOd,EAAEqD,GAAKvC,IAAe,MAATA,EAAE,WAAqBvE,EAAIuE,GAEpDoP,OAAO7D,KAAK9P,GAAK+D,eAAiBP,EAAEsD,QAChC9G,IAAQyD,EAAEqD,IAAmB,MAAXA,EAAI,WAAqBtD,EAAEsD,IAK5D,sBAAsB/Q,EAAiBoZ,GAErC,KAAMpZ,EAAKA,EAAGoE,eACZ,GAAIpE,EAAGoG,UAAUkX,SAASlE,GAAO,OAAOpZ,EAE1C,OAAO,KAIT,gBAAgBqoB,EAAkBC,GAChC,IAAIC,GAAY,EAChB,MAAO,IAAIxB,KACJwB,IACHA,GAAY,EACZ7iB,YAAW,KAAQ2iB,KAAQtB,GAAOwB,GAAY,IAAUD,KAK9D,+BAA+BtoB,GAC7B,IAAIgU,EAAQhU,EAAGgU,MACXA,EAAMnS,UACRmS,EAAMuH,eAAe,YAEnBvH,EAAMtS,MACRsS,EAAMuH,eAAe,QAEnBvH,EAAMrS,KACRqS,EAAMuH,eAAe,OAEnBvH,EAAMxK,OACRwK,EAAMuH,eAAe,SAEnBvH,EAAMvK,QACRuK,EAAMuH,eAAe,UAKzB,uBAAuBvb,GACrB,GAAW,OAAPA,EAAa,OAAOuD,SAASC,gBACjC,MAAMwQ,EAAQoH,iBAAiBpb,GAG/B,MAFsB,gBAEJ+kB,KAAK/Q,EAAMwU,SAAWxU,EAAMyU,WACrCzoB,EAEAC,KAAKyjB,gBAAgB1jB,EAAGoE,eAKnC,4BAA4BpE,EAAiB6B,EAAyBsH,GAEpE,IAAIO,EAAO1J,EAAGyB,wBACVinB,EAA6BjjB,OAAOkjB,aAAeplB,SAASC,gBAAgBolB,aAChF,GAAIlf,EAAK/H,IAAM,GACb+H,EAAK8D,OAASkb,EACd,CAIA,IAAIG,EAAiBnf,EAAK8D,OAASkb,EAC/BI,EAAepf,EAAK/H,IACpB8hB,EAAWxjB,KAAKyjB,gBAAgB1jB,GACpC,GAAiB,OAAbyjB,EAAmB,CACrB,IAAIsF,EAAatF,EAAShgB,UACtBiG,EAAK/H,IAAM,GAAKwH,EAAW,EAEzBnJ,EAAG8D,aAAe4kB,EACpBjF,EAAShgB,WAAa0F,EAEtBsa,EAAShgB,WAAazB,KAAKugB,IAAIuG,GAAgB9mB,KAAKugB,IAAIpZ,GAAYA,EAAW2f,EAExE3f,EAAW,IAEhBnJ,EAAG8D,aAAe4kB,EACpBjF,EAAShgB,WAAa0F,EAEtBsa,EAAShgB,WAAaolB,EAAiB1f,EAAWA,EAAW0f,GAIjEhnB,EAASF,KAAO8hB,EAAShgB,UAAYslB,IAY3C,0BAA0B1nB,EAAmBrB,EAAiBmJ,GAC5D,MAAMsa,EAAWxjB,KAAKyjB,gBAAgB1jB,GAChCyJ,EAASga,EAASmF,aAElBjnB,EAAMN,EAAMwe,QAAU1W,EACtBqE,EAASnM,EAAMwe,QAAUpW,EAASN,EAEpCxH,EAGF8hB,EAASuF,SAAS,CAAEC,SAAU,SAAUtnB,IAAKN,EAAMwe,QAAU1W,IACpDqE,GACTiW,EAASuF,SAAS,CAAEC,SAAU,SAAUtnB,IAAKwH,GAAYM,EAASpI,EAAMwe,YAhT9E,YClDIqJ,EAA2B,GCE/B,ODCA,SAASC,EAAoBC,GAE5B,GAAGF,EAAyBE,GAC3B,OAAOF,EAAyBE,GAAU5pB,QAG3C,IAAIC,EAASypB,EAAyBE,GAAY,CAGjD5pB,QAAS,IAOV,OAHA6pB,EAAoBD,GAAU3pB,EAAQA,EAAOD,QAAS2pB,GAG/C1pB,EAAOD,QCjBR2pB,CAAoB,M","file":"gridstack-h5.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GridStack\"] = factory();\n\telse\n\t\troot[\"GridStack\"] = factory();\n})(self, function() {\nreturn ","// gridstack-GridStackDD.get().ts 4.0.0\r\n// (c) 2021 Alain Dumesny - see root license\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { GridStackDDI } from './gridstack-ddi';\r\nimport { GridItemHTMLElement, GridStackNode, GridStackElement, DDUIData, DDDragInOpt, GridStackPosition } from './types';\r\nimport { GridStack, MousePosition } from './gridstack';\r\nimport { Utils } from './utils';\r\n\r\n/** Drag&Drop drop options */\r\nexport type DDDropOpt = {\r\n  /** function or class type that this grid will accept as dropped items (see GridStackOptions.acceptWidgets) */\r\n  accept?: (el: GridItemHTMLElement) => boolean;\r\n}\r\n\r\n/** drag&drop options currently called from the main code, but others can be passed in grid options */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type DDOpts = 'enable' | 'disable' | 'destroy' | 'option' | string | any;\r\nexport type DDKey = 'minWidth' | 'minHeight' | 'maxWidth' | 'maxHeight';\r\nexport type DDValue = number | string;\r\n\r\n/** drag&drop events callbacks */\r\nexport type DDCallback = (event: Event, arg2: GridItemHTMLElement, helper?: GridItemHTMLElement) => void;\r\n\r\n/**\r\n * Base class implementing common Grid drag'n'drop functionality, with domain specific subclass (h5 vs jq subclasses)\r\n */\r\nexport abstract class GridStackDD extends GridStackDDI {\r\n\r\n  /** override to cast to correct type */\r\n  static get(): GridStackDD {\r\n    return GridStackDDI.get() as GridStackDD;\r\n  }\r\n\r\n  /** removes any drag&drop present (called during destroy) */\r\n  public remove(el: GridItemHTMLElement): GridStackDD {\r\n    this.draggable(el, 'destroy').resizable(el, 'destroy');\r\n    if (el.gridstackNode) {\r\n      delete el.gridstackNode._initDD; // reset our DD init flag\r\n    }\r\n    return this;\r\n  }\r\n\r\n  // APIs that must be implemented by subclasses to do actual darg/drop/resize called by GridStack code below\r\n\r\n  public abstract resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDD;\r\n\r\n  public abstract isResizable(el: HTMLElement): boolean;\r\n\r\n  public abstract draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDD;\r\n\r\n  public abstract dragIn(el: GridStackElement, opts: DDDragInOpt): GridStackDD;\r\n\r\n  public abstract isDraggable(el: HTMLElement): boolean;\r\n\r\n  public abstract droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): GridStackDD;\r\n\r\n  public abstract isDroppable(el: HTMLElement): boolean;\r\n\r\n  public abstract on(el: GridItemHTMLElement, eventName: string, callback: DDCallback): GridStackDD;\r\n\r\n  public abstract off(el: GridItemHTMLElement, eventName: string): GridStackDD;\r\n}\r\n\r\n/********************************************************************************\r\n * GridStack code that is doing drag&drop extracted here so main class is smaller\r\n * for static grid that don't do any of this work anyway. Saves about 10k.\r\n * TODO: no code hint in code below as this is <any> so look at alternatives ?\r\n * https://www.typescriptlang.org/docs/handbook/declaration-merging.html\r\n * https://www.typescriptlang.org/docs/handbook/mixins.html\r\n ********************************************************************************/\r\n\r\n/** @internal called to add drag over to support widgets being added externally */\r\nGridStack.prototype._setupAcceptWidget = function(): GridStack {\r\n  if (this.opts.staticGrid) return this;\r\n\r\n  // if we don't accept external widgets (default) we still need to accept dragging within our\r\n  // list of items (else we get a no-drop icon on windows)\r\n  if (!this.opts.acceptWidgets) {\r\n    GridStackDD.get().droppable(this.el, {\r\n      accept: (el: GridItemHTMLElement) => el.gridstackNode && el.gridstackNode.grid === this\r\n    })\r\n    return this;\r\n  }\r\n\r\n  // vars shared across all methods\r\n  let gridPos: MousePosition;\r\n  let cellHeight: number, cellWidth: number;\r\n\r\n  let onDrag = (event: DragEvent, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n\r\n    helper = helper || el;\r\n    // let left = event.pageX - gridPos.left;\r\n    // let top = event.pageY - gridPos.top;\r\n    let rec = helper.getBoundingClientRect();\r\n    let left = rec.left - gridPos.left;\r\n    let top = rec.top - gridPos.top;\r\n    let ui: DDUIData = {position: {top, left}};\r\n\r\n    if (node._temporaryRemoved) {\r\n      node.x = Math.max(0, Math.round(left / cellWidth));\r\n      node.y = Math.max(0, Math.round(top / cellHeight));\r\n      delete node.autoPosition;\r\n      this.engine.nodeBoundFix(node);\r\n\r\n      // don't accept *initial* location if doesn't fit #1419 (locked drop region, or can't grow), but maybe try if it will go somewhere\r\n      if (!this.engine.willItFit(node)) {\r\n        node.autoPosition = true; // ignore x,y and try for any slot...\r\n        if (!this.engine.willItFit(node)) {\r\n          GridStackDD.get().off(el, 'drag'); // stop calling us\r\n          return; // full grid or can't grow\r\n        }\r\n      }\r\n\r\n      // re-use the existing node dragging method\r\n      this._onStartMoving(event, ui, node, cellWidth, cellHeight);\r\n    } else {\r\n      // re-use the existing node dragging that does so much of the collision detection\r\n      this._dragOrResize(event, ui, node, cellWidth, cellHeight);\r\n    }\r\n  }\r\n\r\n  GridStackDD.get()\r\n    .droppable(this.el, {\r\n      accept: (el: GridItemHTMLElement) => {\r\n        let node: GridStackNode = el.gridstackNode;\r\n        // set accept drop to true on ourself (which we ignore) so we don't get \"can't drop\" icon in HTML5 mode while moving\r\n        if (node && node.grid === this) return true;\r\n        // check for accept method or class matching\r\n        let canAccept = true;\r\n        if (typeof this.opts.acceptWidgets === 'function') {\r\n          canAccept = this.opts.acceptWidgets(el);\r\n        } else {\r\n          let selector = (this.opts.acceptWidgets === true ? '.grid-stack-item' : this.opts.acceptWidgets as string);\r\n          canAccept = el.matches(selector);\r\n        }\r\n        // finally check to make sure we actually have space left #1571\r\n        if (canAccept && node && this.opts.maxRow) {\r\n          let n = {w: node.w, h: node.h, minW: node.minW, minH: node.minH}; // only width/height matters\r\n          canAccept = this.engine.willItFit(n);\r\n        }\r\n        return canAccept;\r\n      }\r\n    })\r\n    /**\r\n     * entering our grid area\r\n     */\r\n    .on(this.el, 'dropover', (event: Event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      // ignore drop enter on ourself (unless we temporarily removed) which happens on a simple drag of our item\r\n      if (node && node.grid === this && !node._temporaryRemoved) {\r\n        // delete node._added; // reset this to track placeholder again in case we were over other grid #1484 (dropout doesn't always clear)\r\n        return false; // prevent parent from receiving msg (which may be a grid as well)\r\n      }\r\n\r\n      // fix #1578 when dragging fast, we may not get a leave on the previous grid so force one now\r\n      if (node && node.grid && node.grid !== this && !node._temporaryRemoved) {\r\n        // TEST console.log('dropover without leave');\r\n        let otherGrid = node.grid;\r\n        otherGrid._leave(el.gridstackNode, el, helper, true); // MATCH line 222\r\n      }\r\n\r\n      // get grid screen coordinates and cell dimensions\r\n      let box = this.el.getBoundingClientRect();\r\n      gridPos = {top: box.top + document.documentElement.scrollTop, left: box.left};\r\n      cellWidth = this.cellWidth();\r\n      cellHeight = this.getCellHeight(true);\r\n\r\n      // load any element attributes if we don't have a node\r\n      if (!node) {\r\n        node = this._readAttr(el);\r\n      }\r\n      if (!node.grid) {\r\n        node._isExternal = true;\r\n        el.gridstackNode = node;\r\n      }\r\n\r\n      // calculate the grid size based on element outer size\r\n      helper = helper || el;\r\n      let w = node.w || Math.round(helper.offsetWidth / cellWidth) || 1;\r\n      let h = node.h || Math.round(helper.offsetHeight / cellHeight) || 1;\r\n\r\n      // if the item came from another grid, make a copy and save the original info in case we go back there\r\n      if (node.grid && node.grid !== this) {\r\n        // copy the node original values (min/max/id/etc...) but override width/height/other flags which are this grid specific\r\n        // TEST console.log('dropover cloning node');\r\n        if (!el._gridstackNodeOrig) el._gridstackNodeOrig = node; // shouldn't have multiple nested!\r\n        el.gridstackNode = node = {...node, w, h, grid: this};\r\n        this.engine.cleanupNode(node)\r\n          .nodeBoundFix(node);\r\n        // restore some internal fields we need after clearing them all\r\n        node._initDD =\r\n        node._isExternal =  // DOM needs to be re-parented on a drop\r\n        node._temporaryRemoved = true;\r\n      } else {\r\n        node.w = w; node.h = h;\r\n        node._temporaryRemoved = true; // so we can insert it\r\n      }\r\n\r\n      // we're entering this grid (even if we left another)\r\n      delete node._isCursorOutside;\r\n\r\n      GridStackDD.get().on(el, 'drag', onDrag);\r\n      // make sure this is called at least once when going fast #1578\r\n      onDrag(event as DragEvent, el, helper);\r\n      return false; // prevent parent from receiving msg (which may be a grid as well)\r\n    })\r\n    /**\r\n     * Leaving our grid area...\r\n     */\r\n    .on(this.el, 'dropout', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      // fix #1578 when dragging fast, we might get leave after other grid gets enter (which calls us to clean)\r\n      // so skip this one if we're not the active grid really..\r\n      if (!node.grid || node.grid === this) {\r\n        this._leave(node, el, helper, true); // MATCH line 166\r\n      }\r\n      return false; // prevent parent from receiving msg (which may be grid as well)\r\n    })\r\n    /**\r\n     * end - releasing the mouse\r\n     */\r\n    .on(this.el, 'drop', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      // ignore drop on ourself from ourself that didn't come from the outside - dragend will handle the simple move instead\r\n      if (node && node.grid === this && !node._isExternal) return false;\r\n\r\n      let wasAdded = !!this.placeholder.parentElement; // skip items not actually added to us because of constrains, but do cleanup #1419\r\n      this.placeholder.remove();\r\n\r\n      // notify previous grid of removal\r\n      // TEST console.log('drop delete _gridstackNodeOrig')\r\n      let origNode = el._gridstackNodeOrig;\r\n      delete el._gridstackNodeOrig;\r\n      if (wasAdded && origNode && origNode.grid && origNode.grid !== this) {\r\n        let oGrid = origNode.grid;\r\n        oGrid.engine.removedNodes.push(origNode);\r\n        oGrid._triggerRemoveEvent();\r\n      }\r\n\r\n      if (!node) return false;\r\n\r\n      // use existing placeholder node as it's already in our list with drop location\r\n      if (wasAdded) {\r\n        this.engine.cleanupNode(node); // removes all internal _xyz values\r\n        node.grid = this;\r\n      }\r\n      GridStackDD.get().off(el, 'drag');\r\n      // if we made a copy ('helper' which is temp) of the original node then insert a copy, else we move the original node (#1102)\r\n      // as the helper will be nuked by jquery-ui otherwise\r\n      if (helper !== el) {\r\n        helper.remove();\r\n        el.gridstackNode = origNode; // original item (left behind) is re-stored to pre dragging as the node now has drop info\r\n        if (wasAdded) {\r\n          el = el.cloneNode(true) as GridItemHTMLElement;\r\n        }\r\n      } else {\r\n        el.remove(); // reduce flicker as we change depth here, and size further down\r\n        GridStackDD.get().remove(el);\r\n      }\r\n      if (!wasAdded) return false;\r\n      el.gridstackNode = node;\r\n      node.el = el;\r\n\r\n      Utils.copyPos(node, this._readAttr(this.placeholder)); // placeholder values as moving VERY fast can throw things off #1578\r\n      Utils.removePositioningStyles(el);\r\n      this._writeAttr(el, node);\r\n      this.el.appendChild(el);\r\n      this._updateContainerHeight();\r\n      this.engine.addedNodes.push(node);\r\n      this._triggerAddEvent();\r\n      this._triggerChangeEvent();\r\n\r\n      this.engine.endUpdate();\r\n      if (this._gsEventHandler['dropped']) {\r\n        this._gsEventHandler['dropped']({type: 'dropped'}, origNode && origNode.grid ? origNode : undefined, node);\r\n      }\r\n\r\n      // wait till we return out of the drag callback to set the new drag&resize handler or they may get messed up\r\n      window.setTimeout(() => {\r\n        // IFF we are still there (some application will use as placeholder and insert their real widget instead and better call makeWidget())\r\n        if (node.el && node.el.parentElement) {\r\n          this._prepareDragDropByNode(node);\r\n        } else {\r\n          this.engine.removeNode(node);\r\n        }\r\n      });\r\n\r\n      return false; // prevent parent from receiving msg (which may be grid as well)\r\n    });\r\n  return this;\r\n}\r\n\r\n/** @internal called to setup a trash drop zone if the user specifies it */\r\nGridStack.prototype._setupRemoveDrop = function(): GridStack {\r\n  if (!this.opts.staticGrid && typeof this.opts.removable === 'string') {\r\n    let trashEl = document.querySelector(this.opts.removable) as HTMLElement;\r\n    if (!trashEl) return this;\r\n    // only register ONE drop-over/dropout callback for the 'trash', and it will\r\n    // update the passed in item and parent grid because the 'trash' is a shared resource anyway,\r\n    // and Native DD only has 1 event CB (having a list and technically a per grid removableOptions complicates things greatly)\r\n    if (!GridStackDD.get().isDroppable(trashEl)) {\r\n      GridStackDD.get().droppable(trashEl, this.opts.removableOptions)\r\n        .on(trashEl, 'dropover', function(event, el) { // don't use => notation to avoid using 'this' as grid by mistake...\r\n          let node = el.gridstackNode;\r\n          if (!node || !node.grid) return;\r\n          node._isAboutToRemove = true;\r\n          el.classList.add('grid-stack-item-removing');\r\n        })\r\n        .on(trashEl, 'dropout', function(event, el) { // same\r\n          let node = el.gridstackNode;\r\n          if (!node || !node.grid) return;\r\n          delete node._isAboutToRemove;\r\n          el.classList.remove('grid-stack-item-removing');\r\n        });\r\n    }\r\n  }\r\n  return this;\r\n}\r\n\r\n/**\r\n * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n * Called during GridStack.init() as options, but can also be called directly (last param are cached) in case the toolbar\r\n * is dynamically create and needs to change later.\r\n **/\r\nGridStack.setupDragIn = function(_dragIn?: string, _dragInOptions?: DDDragInOpt) {\r\n  // cache in the passed in values (form grid init?) so they don't have to resend them each time\r\n  if (_dragIn) {\r\n    dragIn = _dragIn;\r\n    dragInOptions = {...dragInDefaultOptions, ...(_dragInOptions || {})};\r\n  }\r\n  if (typeof dragIn !== 'string') return;\r\n  let dd = GridStackDD.get();\r\n  Utils.getElements(dragIn).forEach(el => {\r\n    if (!dd.isDraggable(el)) dd.dragIn(el, dragInOptions);\r\n  });\r\n}\r\nlet dragIn: string;\r\nlet dragInOptions: DDDragInOpt;\r\nconst dragInDefaultOptions: DDDragInOpt = {\r\n  revert: 'invalid',\r\n  handle: '.grid-stack-item-content',\r\n  scroll: false,\r\n  appendTo: 'body'\r\n};\r\n\r\n/** @internal prepares the element for drag&drop **/\r\nGridStack.prototype._prepareDragDropByNode = function(node: GridStackNode): GridStack {\r\n  let el = node.el;\r\n\r\n  // check for disabled grid first\r\n  if (this.opts.staticGrid || node.locked ||\r\n    ((node.noMove || this.opts.disableDrag) && (node.noResize || this.opts.disableResize))) {\r\n    if (node._initDD) {\r\n      GridStackDD.get().remove(node.el); // nukes everything instead of just disable, will add some styles back next\r\n      delete node._initDD;\r\n    }\r\n    node.el.classList.add('ui-draggable-disabled', 'ui-resizable-disabled'); // add styles one might depend on #1435\r\n    return this;\r\n  }\r\n  // check if init already done\r\n  if (node._initDD) {\r\n    // fine tune drag vs move by disabling any part...\r\n    if (node.noMove || this.opts.disableDrag) {\r\n      GridStackDD.get().draggable(el, 'disable');\r\n    }\r\n    if (node.noResize || this.opts.disableResize) {\r\n      GridStackDD.get().resizable(el, 'disable');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  // remove our style that look like D&D\r\n  node.el.classList.remove('ui-draggable-disabled', 'ui-resizable-disabled');\r\n\r\n  // variables used/cashed between the 3 start/move/end methods, in addition to node passed above\r\n  let cellWidth: number;\r\n  let cellHeight: number;\r\n\r\n  /** called when item starts moving/resizing */\r\n  let onStartMoving = (event: Event, ui: DDUIData) => {\r\n    // trigger any 'dragstart' / 'resizestart' manually\r\n    if (this._gsEventHandler[event.type]) {\r\n      this._gsEventHandler[event.type](event, event.target);\r\n    }\r\n    cellWidth = this.cellWidth();\r\n    cellHeight = this.getCellHeight(true); // force pixels for calculations\r\n\r\n    this._onStartMoving(event, ui, node, cellWidth, cellHeight);\r\n  }\r\n\r\n  /** called when item is being dragged/resized */\r\n  let dragOrResize = (event: Event, ui: DDUIData) => {\r\n    this._dragOrResize(event, ui, node, cellWidth, cellHeight);\r\n  }\r\n\r\n  /** called when the item stops moving/resizing */\r\n  let onEndMoving = (event: Event) => {\r\n    this.placeholder.remove();\r\n    delete node._moving;\r\n    delete node._lastTried;\r\n\r\n    // if the item has moved to another grid, we're done here\r\n    let target: GridItemHTMLElement = event.target as GridItemHTMLElement;\r\n    if (!target.gridstackNode || target.gridstackNode.grid !== this) return;\r\n\r\n    node.el = target;\r\n\r\n    if (node._isAboutToRemove) {\r\n      let gridToNotify = el.gridstackNode.grid;\r\n      if (gridToNotify._gsEventHandler[event.type]) {\r\n        gridToNotify._gsEventHandler[event.type](event, target);\r\n      }\r\n      GridStackDD.get().remove(el);\r\n      gridToNotify.engine.removedNodes.push(node);\r\n      gridToNotify._triggerRemoveEvent();\r\n      // break circular links and remove DOM\r\n      delete el.gridstackNode;\r\n      delete node.el;\r\n      el.remove();\r\n    } else {\r\n      if (!node._temporaryRemoved) {\r\n        // move to new placeholder location\r\n        Utils.removePositioningStyles(target);\r\n        this._writePosAttr(target, node);\r\n      } else {\r\n        // got removed - restore item back to before dragging position\r\n        Utils.removePositioningStyles(target);\r\n        Utils.copyPos(node, node._orig);\r\n        this._writePosAttr(target, node);\r\n        this.engine.addNode(node);\r\n      }\r\n      if (this._gsEventHandler[event.type]) {\r\n        this._gsEventHandler[event.type](event, target);\r\n      }\r\n    }\r\n\r\n    this._updateContainerHeight();\r\n    this._triggerChangeEvent();\r\n\r\n    this.engine.endUpdate();\r\n  }\r\n\r\n  GridStackDD.get()\r\n    .draggable(el, {\r\n      start: onStartMoving,\r\n      stop: onEndMoving,\r\n      drag: dragOrResize\r\n    })\r\n    .resizable(el, {\r\n      start: onStartMoving,\r\n      stop: onEndMoving,\r\n      resize: dragOrResize\r\n    });\r\n  node._initDD = true; // we've set DD support now\r\n\r\n  // finally fine tune drag vs move by disabling any part...\r\n  if (node.noMove || this.opts.disableDrag) {\r\n    GridStackDD.get().draggable(el, 'disable');\r\n  }\r\n  if (node.noResize || this.opts.disableResize) {\r\n    GridStackDD.get().resizable(el, 'disable');\r\n  }\r\n  return this;\r\n}\r\n\r\n/** @internal called when item is starting a drag/resize */\r\nGridStack.prototype._onStartMoving = function(event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number) {\r\n  this.engine.cleanNodes()\r\n    .beginUpdate(node);\r\n\r\n  this._writePosAttr(this.placeholder, node)\r\n  this.el.appendChild(this.placeholder);\r\n  // TEST console.log('_onStartMoving placeholder')\r\n\r\n  node.el = this.placeholder;\r\n  node._lastUiPosition = ui.position;\r\n  node._prevYPix = ui.position.top;\r\n  node._moving = (event.type === 'dragstart'); // 'dropover' are not initially moving so they can go exactly where they enter (will push stuff out of the way)\r\n  delete node._lastTried;\r\n  delete node._isCursorOutside;\r\n\r\n  if (event.type === 'dropover' && node._temporaryRemoved) {\r\n    // TEST console.log('engine.addNode x=' + node.x);\r\n    this.engine.addNode(node); // will add, fix collisions, update attr and clear _temporaryRemoved\r\n    node._moving = true; // AFTER, mark as moving object (wanted fix location before)\r\n  }\r\n\r\n  // set the min/max resize info\r\n  this.engine.cacheRects(cellWidth, cellHeight, this.opts.marginTop, this.opts.marginRight, this.opts.marginBottom, this.opts.marginLeft);\r\n  if (event.type === 'resizestart') {\r\n    let el = node.el;\r\n    let dd = GridStackDD.get()\r\n      .resizable(el, 'option', 'minWidth', cellWidth * (node.minW || 1))\r\n      .resizable(el, 'option', 'minHeight', cellHeight * (node.minH || 1));\r\n    if (node.maxW) { dd.resizable(el, 'option', 'maxWidth', cellWidth * node.maxW); }\r\n    if (node.maxH) { dd.resizable(el, 'option', 'maxHeight', cellHeight * node.maxH); }\r\n  }\r\n}\r\n\r\n/** @internal called when item leaving our area by either cursor dropout event\r\n * or shape is outside our boundaries. remove it from us, and mark temporary if this was\r\n * our item to start with else restore prev node values from prev grid it came from.\r\n **/\r\nGridStack.prototype._leave = function(node: GridStackNode, el: GridItemHTMLElement, helper?: GridItemHTMLElement, dropoutEvent = false)  {\r\n  if (!node) return;\r\n\r\n  if (dropoutEvent) {\r\n    node._isCursorOutside = true;\r\n    GridStackDD.get().off(el, 'drag'); // no need to track while being outside\r\n  }\r\n\r\n  // this gets called when cursor leaves and shape is outside, so only do this once\r\n  if (node._temporaryRemoved) return;\r\n  node._temporaryRemoved = true;\r\n\r\n  this.engine.removeNode(node); // remove placeholder as well\r\n  node.el = node._isExternal && helper ? helper : el; // point back to real item being dragged\r\n\r\n  // finally if item originally came from another grid, but left us, restore things back to prev info\r\n  if (el._gridstackNodeOrig) {\r\n    // TEST console.log('leave delete _gridstackNodeOrig')\r\n    el.gridstackNode = el._gridstackNodeOrig;\r\n    delete el._gridstackNodeOrig;\r\n  } else if (node._isExternal) {\r\n    // item came from outside (like a toolbar) so nuke any node info\r\n    delete node.el;\r\n    delete el.gridstackNode;\r\n    // and restore all nodes back to original\r\n    this.engine.restoreInitial();\r\n  }\r\n}\r\n\r\n/** @internal called when item is being dragged/resized */\r\nGridStack.prototype._dragOrResize = function(event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number)  {\r\n  let el = node.el || event.target as GridItemHTMLElement;\r\n  // calculate the place where we're landing by offsetting margin so actual edge crosses mid point\r\n  let left = ui.position.left + (ui.position.left > node._lastUiPosition.left  ? -this.opts.marginRight : this.opts.marginLeft);\r\n  let top = ui.position.top + (ui.position.top > node._lastUiPosition.top  ? -this.opts.marginBottom : this.opts.marginTop);\r\n  let x = Math.round(left / cellWidth);\r\n  let y = Math.round(top / cellHeight);\r\n  let w = node.w;\r\n  let h = node.h;\r\n  let resizing: boolean;\r\n\r\n  if (event.type === 'drag') {\r\n    if (node._isCursorOutside) return; // handled by dropover\r\n    let distance = ui.position.top - node._prevYPix;\r\n    node._prevYPix = ui.position.top;\r\n    Utils.updateScrollPosition(el, ui.position, distance);\r\n    // if inTrash or outside of the bounds (but not external which is handled by 'dropout' event), temporarily remove it from us\r\n    if (node._isAboutToRemove || (!node._isExternal && this.engine.isOutside(x, y, node))) {\r\n      this._leave(node, event.target);\r\n    } else {\r\n      if (node._temporaryRemoved) {\r\n        node.el = this.placeholder;\r\n        this.engine.addNode(node);\r\n        this.el.appendChild(this.placeholder);\r\n        // TEST console.log('drag placeholder');\r\n        delete node._temporaryRemoved;\r\n      }\r\n    }\r\n    if (node.x === x && node.y === y) return; // skip same\r\n    // DON'T skip one we tried as we might have failed because of coverage <50% before\r\n    // if (node._lastTried && node._lastTried.x === x && node._lastTried.y === y) return;\r\n  } else if (event.type === 'resize')  {\r\n    if (x < 0) return;\r\n    // Scrolling page if needed\r\n    Utils.updateScrollResize(event as MouseEvent, el, cellHeight);\r\n    w = Math.round(ui.size.width / cellWidth);\r\n    h = Math.round(ui.size.height / cellHeight);\r\n    if (node.w === w && node.h === h) return;\r\n    if (node._lastTried && node._lastTried.w === w && node._lastTried.h === h) return; // skip one we tried (but failed)\r\n    resizing = true;\r\n  }\r\n\r\n  node._lastTried = {x, y, w, h}; // set as last tried (will nuke if we go there)\r\n  let rect: GridStackPosition = { // screen pix of the dragged box\r\n    x: ui.position.left + this.opts.marginLeft,\r\n    y: ui.position.top + this.opts.marginTop,\r\n    w: (ui.size ? ui.size.width : node.w * cellWidth) - this.opts.marginLeft - this.opts.marginRight,\r\n    h: (ui.size ? ui.size.height : node.h * cellHeight) - this.opts.marginTop - this.opts.marginBottom\r\n  };\r\n  if (this.engine.moveNodeCheck(node, {x, y, w, h, cellWidth, cellHeight, rect})) {\r\n    node._lastUiPosition = ui.position;\r\n    this.engine.cacheRects(cellWidth, cellHeight, this.opts.marginTop, this.opts.marginRight, this.opts.marginBottom, this.opts.marginLeft);\r\n    delete node._skipDown;\r\n    if (resizing && node.subGrid) { (node.subGrid as GridStack).onParentResize(); }\r\n    this._updateContainerHeight();\r\n\r\n    let target = event.target as GridItemHTMLElement;\r\n    this._writePosAttr(target, node);\r\n    if (this._gsEventHandler[event.type]) {\r\n      this._gsEventHandler[event.type](event, target);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Enables/Disables moving.\r\n * @param els widget or selector to modify.\r\n * @param val if true widget will be draggable.\r\n */\r\nGridStack.prototype.movable = function(els: GridStackElement, val: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't move a static grid!\r\n  GridStack.getElements(els).forEach(el => {\r\n    let node = el.gridstackNode;\r\n    if (!node || node.locked) return;\r\n    node.noMove = !(val || false);\r\n    if (node.noMove) {\r\n      GridStackDD.get().draggable(el, 'disable');\r\n      el.classList.remove('ui-draggable-handle');\r\n    } else {\r\n      this._prepareDragDropByNode(node); // init DD if need be\r\n      GridStackDD.get().draggable(el, 'enable');\r\n      el.classList.remove('ui-draggable-handle');\r\n    }\r\n  });\r\n  return this;\r\n}\r\n\r\n/**\r\n * Enables/Disables resizing.\r\n * @param els  widget or selector to modify\r\n * @param val  if true widget will be resizable.\r\n */\r\nGridStack.prototype.resizable = function(els: GridStackElement, val: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't resize a static grid!\r\n  GridStack.getElements(els).forEach(el => {\r\n    let node = el.gridstackNode;\r\n    if (!node || node.locked) return;\r\n    node.noResize = !(val || false);\r\n    if (node.noResize) {\r\n      GridStackDD.get().resizable(el, 'disable');\r\n    } else {\r\n      this._prepareDragDropByNode(node); // init DD if need be\r\n      GridStackDD.get().resizable(el, 'enable');\r\n    }\r\n  });\r\n  return this;\r\n}\r\n\r\n\r\n/**\r\n  * Temporarily disables widgets moving/resizing.\r\n  * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n  * Note: no-op for static grid\r\n  * This is a shortcut for:\r\n  * @example\r\n  *  grid.enableMove(false);\r\n  *  grid.enableResize(false);\r\n  */\r\nGridStack.prototype.disable = function(): GridStack {\r\n  if (this.opts.staticGrid) return;\r\n  this.enableMove(false);\r\n  this.enableResize(false);\r\n  this._triggerEvent('disable');\r\n  return this;\r\n}\r\n\r\n/**\r\n  * Re-enables widgets moving/resizing - see disable().\r\n  * Note: no-op for static grid.\r\n  * This is a shortcut for:\r\n  * @example\r\n  *  grid.enableMove(true);\r\n  *  grid.enableResize(true);\r\n  */\r\nGridStack.prototype.enable = function(): GridStack {\r\n  if (this.opts.staticGrid) return;\r\n  this.enableMove(true);\r\n  this.enableResize(true);\r\n  this._triggerEvent('enable');\r\n  return this;\r\n}\r\n\r\n/**\r\n  * Enables/disables widget moving. No-op for static grids.\r\n  *\r\n  * @param doEnable\r\n  * @param includeNewWidgets will force new widgets to be draggable as per\r\n  * doEnable`s value by changing the disableDrag grid option (default: true).\r\n  */\r\nGridStack.prototype.enableMove = function(doEnable: boolean, includeNewWidgets = true): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't move a static grid!\r\n  this.getGridItems().forEach(el => this.movable(el, doEnable));\r\n  if (includeNewWidgets) {\r\n    this.opts.disableDrag = !doEnable;\r\n  }\r\n  return this;\r\n}\r\n\r\n/**\r\n  * Enables/disables widget resizing. No-op for static grids.\r\n  * @param doEnable\r\n  * @param includeNewWidgets will force new widgets to be draggable as per\r\n  * doEnable`s value by changing the disableResize grid option (default: true).\r\n  */\r\nGridStack.prototype.enableResize = function(doEnable: boolean, includeNewWidgets = true): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't size a static grid!\r\n  this.getGridItems().forEach(el => this.resizable(el, doEnable));\r\n  if (includeNewWidgets) {\r\n    this.opts.disableResize = !doEnable;\r\n  }\r\n  return this;\r\n}\r\n","// gridstack-ddi.ts 4.0.0\r\n// (c) 2021 Alain Dumesny - see root license\r\nimport { GridItemHTMLElement } from './types';\r\n\r\n/**\r\n * Abstract Partial Interface API for drag'n'drop plugin - look at GridStackDD and HTML5 / Jquery implementation versions\r\n */\r\nexport class GridStackDDI {\r\n\r\n  protected static ddi: GridStackDDI;\r\n\r\n  /** call this method to register your plugin instead of the default no-op one */\r\n  static registerPlugin(pluginClass: typeof GridStackDDI): GridStackDDI {\r\n    GridStackDDI.ddi = new pluginClass();\r\n    return GridStackDDI.ddi;\r\n  }\r\n\r\n  /** get the current registered plugin to use */\r\n  static get(): GridStackDDI {\r\n    return GridStackDDI.ddi || GridStackDDI.registerPlugin(GridStackDDI);\r\n  }\r\n\r\n  /** removes any drag&drop present (called during destroy) */\r\n  public remove(el: GridItemHTMLElement): GridStackDDI {\r\n    return this; // no-op for static grids\r\n  }\r\n}\r\n","// gridstack-engine.ts 4.0.0\r\n// (c) 2021 Alain Dumesny - see root license\r\nimport { Utils } from './utils';\r\nimport { GridStackNode, ColumnOptions, GridStackPosition, GridStackMoveOpts } from './types';\r\n\r\nexport type onChangeCB = (nodes: GridStackNode[], removeDOM?: boolean) => void;\r\n\r\n/** options used for creations - similar to GridStackOptions */\r\nexport interface GridStackEngineOptions {\r\n  column?: number;\r\n  maxRow?: number;\r\n  float?: boolean;\r\n  nodes?: GridStackNode[];\r\n  onChange?: onChangeCB;\r\n}\r\n\r\n/**\r\n * Defines the GridStack engine that does most no DOM grid manipulation.\r\n * See GridStack methods and vars for descriptions.\r\n *\r\n * NOTE: values should not be modified directly - call the main GridStack API instead\r\n */\r\nexport class GridStackEngine {\r\n  public column: number;\r\n  public maxRow: number;\r\n  public nodes: GridStackNode[];\r\n  public onChange: onChangeCB;\r\n  public addedNodes: GridStackNode[] = [];\r\n  public removedNodes: GridStackNode[] = [];\r\n  public batchMode: boolean;\r\n  /** @internal */\r\n  private _float: boolean;\r\n  /** @internal */\r\n  private _prevFloat: boolean;\r\n  /** @internal */\r\n  private _layouts?: Layout[][]; // maps column # to array of values nodes\r\n  /** @internal */\r\n  private _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal true if we have some items locked */\r\n  private _hasLocked: boolean;\r\n  /** @internal unique global internal _id counter NOT starting at 0 */\r\n  private static _idSeq = 1;\r\n\r\n  public constructor(opts: GridStackEngineOptions = {}) {\r\n    this.column = opts.column || 12;\r\n    this.onChange = opts.onChange;\r\n    this._float = opts.float;\r\n    this.maxRow = opts.maxRow;\r\n    this.nodes = opts.nodes || [];\r\n  }\r\n\r\n  public batchUpdate(): GridStackEngine {\r\n    if (this.batchMode) return this;\r\n    this.batchMode = true;\r\n    this._prevFloat = this._float;\r\n    this._float = true; // let things go anywhere for now... commit() will restore and possibly reposition\r\n    return this;\r\n  }\r\n\r\n  public commit(): GridStackEngine {\r\n    if (!this.batchMode) return this;\r\n    this.batchMode = false;\r\n    this._float = this._prevFloat;\r\n    delete this._prevFloat;\r\n    return this._packNodes()\r\n      ._notify();\r\n  }\r\n\r\n  // use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip\r\n  private _useEntireRowArea(node: GridStackNode, nn: GridStackPosition): boolean {\r\n    return !this.float && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);\r\n  }\r\n\r\n  /** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.\r\n   * return true if we moved. */\r\n  private _fixCollisions(node: GridStackNode, nn = node, collide?: GridStackNode, opt: GridStackMoveOpts = {}): boolean {\r\n    this._sortNodes(-1); // from last to first, so recursive collision move items in the right order\r\n\r\n    collide = collide || this.collide(node, nn); // REAL area collide for swap and skip if none...\r\n    if (!collide) return false;\r\n\r\n    // swap check: if we're actively moving in gravity mode, see if we collide with an object the same size\r\n    if (node._moving && !opt.nested && !this.float) {\r\n      if (this.swap(node, collide)) return true;\r\n    }\r\n\r\n    // during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)\r\n    let area = nn;\r\n    if (this._useEntireRowArea(node, nn)) {\r\n      area = {x: 0, w: this.column, y: nn.y, h: nn.h};\r\n      collide = this.collide(node, area, opt.skip); // force new hit\r\n    }\r\n\r\n    let didMove = false;\r\n    let newOpt: GridStackMoveOpts = {nested: true, pack: false};\r\n    while (collide = collide || this.collide(node, area, opt.skip)) { // could collide with more than 1 item... so repeat for each\r\n      let moved: boolean;\r\n      // if colliding with a locked item OR moving down with top gravity (and collide could move up) -> skip past the collide,\r\n      // but remember that skip down so we only do this once (and push others otherwise).\r\n      if (collide.locked || node._moving && !node._skipDown && nn.y > node.y && !this.float &&\r\n        // can take space we had, or before where we're going\r\n        (!this.collide(collide, {...collide, y: node.y}, node) || !this.collide(collide, {...collide, y: nn.y - collide.h}, node))) {\r\n        node._skipDown = (node._skipDown || nn.y > node.y);\r\n        moved = this.moveNode(node, {...nn, y: collide.y + collide.h, ...newOpt});\r\n        if (collide.locked && moved) {\r\n          Utils.copyPos(nn, node); // moving after lock become our new desired location\r\n        } else if (!collide.locked && moved && opt.pack) {\r\n          // we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way\r\n          this._packNodes();\r\n          nn.y = collide.y + collide.h;\r\n          Utils.copyPos(node, nn);\r\n        }\r\n        didMove = didMove || moved;\r\n      } else {\r\n        // move collide down *after* where we will be, ignoring where we are now (don't collide with us)\r\n        moved = this.moveNode(collide, {...collide, y: nn.y + nn.h, skip: node, ...newOpt});\r\n      }\r\n      if (!moved) { return didMove; } // break inf loop if we couldn't move after all (ex: maxRow, fixed)\r\n      collide = undefined;\r\n    }\r\n    return didMove;\r\n  }\r\n\r\n  /** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */\r\n  public collide(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode {\r\n    return this.nodes.find(n => n !== skip && n !== skip2 && Utils.isIntercepted(n, area));\r\n  }\r\n  public collideAll(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode[] {\r\n    return this.nodes.filter(n => n !== skip && n !== skip2 && Utils.isIntercepted(n, area));\r\n  }\r\n\r\n  /** does a pixel coverage collision, returning the node that has the most coverage that is >50% mid line */\r\n  public collideCoverage(node: GridStackNode, o: GridStackMoveOpts, collides: GridStackNode[]): GridStackNode {\r\n    if (!o.rect || !node._rect) return;\r\n    let r0 = node._rect; // where started\r\n    let r = {...o.rect}; // where we are\r\n\r\n    // update dragged rect to show where it's coming from (above or below, etc...)\r\n    if (r.y > r0.y) {\r\n      r.h += r.y - r0.y;\r\n      r.y = r0.y;\r\n    } else {\r\n      r.h += r0.y - r.y;\r\n    }\r\n    if (r.x > r0.x) {\r\n      r.w += r.x - r0.x;\r\n      r.x = r0.x;\r\n    } else {\r\n      r.w += r0.x - r.x;\r\n    }\r\n\r\n    let collide: GridStackNode;\r\n    collides.forEach(n => {\r\n      if (n.locked || !n._rect) return;\r\n      let r2 = n._rect; // overlapping target\r\n      let yOver = Number.MAX_VALUE, xOver = Number.MAX_VALUE, overMax = 0.5; // need >50%\r\n      // depending on which side we started from, compute the overlap % of coverage\r\n      // (ex: from above/below we only compute the max horizontal line coverage)\r\n      if (r0.y < r2.y) { // from above\r\n        yOver = ((r.y + r.h) - r2.y) / r2.h;\r\n      } else if (r0.y+r0.h > r2.y+r2.h) { // from below\r\n        yOver = ((r2.y + r2.h) - r.y) / r2.h;\r\n      }\r\n      if (r0.x < r2.x) { // from the left\r\n        xOver = ((r.x + r.w) - r2.x) / r2.w;\r\n      } else if (r0.x+r0.w > r2.x+r2.w) { // from the right\r\n        xOver = ((r2.x + r2.w) - r.x) / r2.w;\r\n      }\r\n      let over = Math.min(xOver, yOver);\r\n      if (over > overMax) {\r\n        overMax = over;\r\n        collide = n;\r\n      }\r\n    });\r\n    return collide;\r\n  }\r\n\r\n  /** called to cache the nodes pixel rectangles used for collision detection during drag */\r\n  public cacheRects(w: number, h: number, top: number, right: number, bottom: number, left: number): GridStackEngine\r\n  {\r\n    this.nodes.forEach(n =>\r\n      n._rect = {\r\n        y: n.y * h + top,\r\n        x: n.x * w + left,\r\n        w: n.w * w - left - right,\r\n        h: n.h * h - top - bottom\r\n      }\r\n    );\r\n    return this;\r\n  }\r\n\r\n  /** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */\r\n  public swap(a: GridStackNode, b: GridStackNode): boolean {\r\n    if (!b || b.locked || !a || a.locked) return false;\r\n\r\n    function _doSwap(): true { // assumes a is before b IFF they have different height (put after rather than exact swap)\r\n      let x = b.x, y = b.y;\r\n      b.x = a.x; b.y = a.y; // b -> a position\r\n      if (a.h != b.h) {\r\n        a.x = x; a.y = b.y + b.h; // a -> goes after b\r\n      } else {\r\n        a.x = x; a.y = y; // a -> old b position\r\n      }\r\n      a._dirty = b._dirty = true;\r\n      return true;\r\n    }\r\n    let touching: boolean; // remember if we called it (vs undefined)\r\n\r\n    // same size and same row or column, and touching\r\n    if (a.w === b.w && a.h === b.h && (a.x === b.x || a.y === b.y) && (touching = Utils.isTouching(a, b)))\r\n      return _doSwap();\r\n    if (touching === false) return; // ran test and fail, bail out\r\n\r\n    // check for taking same columns (but different height) and touching\r\n    if (a.w === b.w && a.x === b.x && (touching || Utils.isTouching(a, b))) {\r\n      if (b.y < a.y) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\r\n      return _doSwap();\r\n    }\r\n\r\n    /* different X will be weird (expect vertical swap) and different height overlap, so too complex. user regular layout instead\r\n    // else check if swapping would not collide with anything else (requiring a re-layout)\r\n    if (!this.collide(a, {x: a.x, y: a.y, w: b.w, h: b.h}, b) &&\r\n        !this.collide(a, {x: b.x, y: b.y, w: a.w, h: a.h}, b))\r\n      return _doSwap(); */\r\n    return false;\r\n  }\r\n\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    let nn: GridStackNode = {x: x || 0, y: y || 0, w: w || 1, h: h || 1};\r\n    return !this.collide(nn);\r\n  }\r\n\r\n  /** re-layout grid items to reclaim any empty space */\r\n  public compact(): GridStackEngine {\r\n    if (this.nodes.length === 0) return this;\r\n    this.batchUpdate()\r\n      ._sortNodes();\r\n    let copyNodes = this.nodes;\r\n    this.nodes = []; // pretend we have no nodes to conflict layout to start with...\r\n    copyNodes.forEach(node => {\r\n      if (!node.locked) {\r\n        node.autoPosition = true;\r\n      }\r\n      this.addNode(node, false); // 'false' for add event trigger\r\n      node._dirty = true; // will force attr update\r\n    });\r\n    return this.commit();\r\n  }\r\n\r\n  /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\r\n  public set float(val: boolean) {\r\n    if (this._float === val) return;\r\n    this._float = val || false;\r\n    if (!val) {\r\n      this._packNodes()._notify();\r\n    }\r\n  }\r\n\r\n  /** float getter method */\r\n  public get float(): boolean { return this._float || false; }\r\n\r\n  /** @internal */\r\n  private _sortNodes(dir?: -1 | 1): GridStackEngine {\r\n    this.nodes = Utils.sort(this.nodes, dir, this.column);\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */\r\n  private _packNodes(): GridStackEngine {\r\n    this._sortNodes(); // first to last\r\n\r\n    if (this.float) {\r\n      // restore original Y pos\r\n      this.nodes.forEach(n => {\r\n        if (n._updating || n._orig === undefined || n.y === n._orig.y) return;\r\n        let newY = n.y;\r\n        while (newY > n._orig.y) {\r\n          --newY;\r\n          let collide = this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\r\n          if (!collide) {\r\n            n._dirty = true;\r\n            n.y = newY;\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      // top gravity pack\r\n      this.nodes.forEach((n, i) => {\r\n        if (n.locked) return;\r\n        while (n.y > 0) {\r\n          let newY = i === 0 ? 0 : n.y - 1;\r\n          let canBeMoved = i === 0 || !this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\r\n          if (!canBeMoved) break;\r\n          // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\r\n          // and move items back. The user 'change' CB should detect changes from the original\r\n          // starting position instead.\r\n          n._dirty = (n.y !== newY);\r\n          n.y = newY;\r\n        }\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * given a random node, makes sure it's coordinates/values are valid in the current grid\r\n   * @param node to adjust\r\n   * @param resizing if out of bound, resize down or move into the grid to fit ?\r\n   */\r\n  public prepareNode(node: GridStackNode, resizing?: boolean): GridStackNode {\r\n    node = node || {};\r\n    node._id = node._id || GridStackEngine._idSeq++;\r\n\r\n    // if we're missing position, have the grid position us automatically (before we set them to 0,0)\r\n    if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\r\n      node.autoPosition = true;\r\n    }\r\n\r\n    // assign defaults for missing required fields\r\n    let defaults: GridStackNode = { x: 0, y: 0, w: 1, h: 1};\r\n    Utils.defaults(node, defaults);\r\n\r\n    if (!node.autoPosition) { delete node.autoPosition; }\r\n    if (!node.noResize) { delete node.noResize; }\r\n    if (!node.noMove) { delete node.noMove; }\r\n\r\n    // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\r\n    if (typeof node.x == 'string')      { node.x = Number(node.x); }\r\n    if (typeof node.y == 'string')      { node.y = Number(node.y); }\r\n    if (typeof node.w == 'string')  { node.w = Number(node.w); }\r\n    if (typeof node.h == 'string') { node.h = Number(node.h); }\r\n    if (isNaN(node.x))      { node.x = defaults.x; node.autoPosition = true; }\r\n    if (isNaN(node.y))      { node.y = defaults.y; node.autoPosition = true; }\r\n    if (isNaN(node.w))  { node.w = defaults.w; }\r\n    if (isNaN(node.h)) { node.h = defaults.h; }\r\n\r\n    return this.nodeBoundFix(node, resizing);\r\n  }\r\n\r\n  /** part2 of preparing a node to fit inside our grid - checks  for x,y from grid dimensions */\r\n  public nodeBoundFix(node: GridStackNode, resizing?: boolean): GridStackNode {\r\n\r\n    if (node.maxW) { node.w = Math.min(node.w, node.maxW); }\r\n    if (node.maxH) { node.h = Math.min(node.h, node.maxH); }\r\n    if (node.minW) { node.w = Math.max(node.w, node.minW); }\r\n    if (node.minH) { node.h = Math.max(node.h, node.minH); }\r\n\r\n    if (node.w > this.column) {\r\n      node.w = this.column;\r\n    } else if (node.w < 1) {\r\n      node.w = 1;\r\n    }\r\n\r\n    if (this.maxRow && node.h > this.maxRow) {\r\n      node.h = this.maxRow;\r\n    } else if (node.h < 1) {\r\n      node.h = 1;\r\n    }\r\n\r\n    if (node.x < 0) {\r\n      node.x = 0;\r\n    }\r\n    if (node.y < 0) {\r\n      node.y = 0;\r\n    }\r\n\r\n    if (node.x + node.w > this.column) {\r\n      if (resizing) {\r\n        node.w = this.column - node.x;\r\n      } else {\r\n        node.x = this.column - node.w;\r\n      }\r\n    }\r\n    if (this.maxRow && node.y + node.h > this.maxRow) {\r\n      if (resizing) {\r\n        node.h = this.maxRow - node.y;\r\n      } else {\r\n        node.y = this.maxRow - node.h;\r\n      }\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  public getDirtyNodes(verify?: boolean): GridStackNode[] {\r\n    // compare original x,y,w,h instead as _dirty can be a temporary state\r\n    if (verify) {\r\n      return this.nodes.filter(n => n._dirty && !Utils.samePos(n, n._orig));\r\n    }\r\n    return this.nodes.filter(n => n._dirty);\r\n  }\r\n\r\n  /** @internal call this to call onChange CB with dirty nodes */\r\n  private _notify(nodes?: GridStackNode | GridStackNode[], removeDOM = true): GridStackEngine {\r\n    if (this.batchMode) return this;\r\n    nodes = (nodes === undefined ? [] : (Array.isArray(nodes) ? nodes : [nodes]) );\r\n    let dirtyNodes = nodes.concat(this.getDirtyNodes());\r\n    this.onChange && this.onChange(dirtyNodes, removeDOM);\r\n    return this;\r\n  }\r\n\r\n  /** @internal remove dirty and last tried info */\r\n  public cleanNodes(): GridStackEngine {\r\n    if (this.batchMode) return this;\r\n    this.nodes.forEach(n => {\r\n      delete n._dirty;\r\n      delete n._lastTried;\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to save initial position/size to track real dirty state.\r\n   * Note: should be called right after we call change event (so next API is can detect changes)\r\n   * as well as right before we start move/resize/enter (so we can restore items to prev values) */\r\n  public saveInitial(): GridStackEngine {\r\n    this.nodes.forEach(n => {\r\n      n._orig = Utils.copyPos({}, n);\r\n      delete n._dirty;\r\n    });\r\n    this._hasLocked = this.nodes.some(n => n.locked);\r\n    return this;\r\n  }\r\n\r\n  /** @internal restore all the nodes back to initial values (called when we leave) */\r\n  public restoreInitial(): GridStackEngine {\r\n    this.nodes.forEach(n => {\r\n      if (Utils.samePos(n, n._orig)) return;\r\n      Utils.copyPos(n, n._orig);\r\n      n._dirty = true;\r\n    });\r\n    this._notify();\r\n    return this;\r\n  }\r\n\r\n  /** call to add the given node to our list, fixing collision and re-packing */\r\n  public addNode(node: GridStackNode, triggerAddEvent = false): GridStackNode {\r\n    let dup: GridStackNode;\r\n    if (dup = this.nodes.find(n => n._id === node._id)) return dup; // prevent inserting twice! return it instead.\r\n\r\n    node = this.prepareNode(node);\r\n    delete node._temporaryRemoved;\r\n    delete node._removeDOM;\r\n\r\n    if (node.autoPosition) {\r\n      this._sortNodes();\r\n\r\n      for (let i = 0;; ++i) {\r\n        let x = i % this.column;\r\n        let y = Math.floor(i / this.column);\r\n        if (x + node.w > this.column) {\r\n          continue;\r\n        }\r\n        let box = {x, y, w: node.w, h: node.h};\r\n        if (!this.nodes.find(n => Utils.isIntercepted(box, n))) {\r\n          node.x = x;\r\n          node.y = y;\r\n          delete node.autoPosition; // found our slot\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.nodes.push(node);\r\n    triggerAddEvent && this.addedNodes.push(node);\r\n\r\n    this._fixCollisions(node);\r\n    this._packNodes()\r\n      ._notify();\r\n    return node;\r\n  }\r\n\r\n  public removeNode(node: GridStackNode, removeDOM = true, triggerEvent = false): GridStackEngine {\r\n    if (!this.nodes.find(n => n === node)) return; // not in our list\r\n    if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)\r\n      this.removedNodes.push(node);\r\n    }\r\n    if (removeDOM) node._removeDOM = true; // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\r\n    // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\r\n    this.nodes = this.nodes.filter(n => n !== node);\r\n    return this._packNodes()\r\n      ._notify(node, removeDOM);\r\n  }\r\n\r\n  public removeAll(removeDOM = true): GridStackEngine {\r\n    delete this._layouts;\r\n    if (this.nodes.length === 0) return this;\r\n    removeDOM && this.nodes.forEach(n => n._removeDOM = true); // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\r\n    this.removedNodes = this.nodes;\r\n    this.nodes = [];\r\n    return this._notify(this.removedNodes, removeDOM);\r\n  }\r\n\r\n  /** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.\r\n   * In more complicated cases (maxRow) it will attempt at moving the item and fixing\r\n   * others in a clone first, then apply those changes if still within specs. */\r\n  public moveNodeCheck(node: GridStackNode, o: GridStackMoveOpts): boolean {\r\n    if (node.locked) return false;\r\n    if (!this.changedPosConstrain(node, o)) return false;\r\n    o.pack = true;\r\n\r\n    // simpler case: move item directly...\r\n    if (!this.maxRow/* && !this._hasLocked*/) {\r\n      return this.moveNode(node, o);\r\n    }\r\n\r\n    // complex case: create a clone with NO maxRow (will check for out of bounds at the end)\r\n    let clonedNode: GridStackNode;\r\n    let clone = new GridStackEngine({\r\n      column: this.column,\r\n      float: this.float,\r\n      nodes: this.nodes.map(n => {\r\n        if (n === node) {\r\n          clonedNode = {...n};\r\n          return clonedNode;\r\n        }\r\n        return {...n};\r\n      })\r\n    });\r\n    if (!clonedNode) return false;\r\n\r\n    let canMove = clone.moveNode(clonedNode, o);\r\n    // if maxRow make sure we are still valid size\r\n    if (this.maxRow && canMove) {\r\n      canMove = (clone.getRow() <= this.maxRow);\r\n      // turns out we can't grow, then see if we can swap instead (ex: full grid)\r\n      if (!canMove) {\r\n        let collide = this.collide(node, o);\r\n        if (collide && this.swap(node, collide)) {\r\n          this._notify();\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    if (!canMove) return false;\r\n\r\n    // if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!\r\n    // Note: we can't use the list directly as elements and other parts point to actual node struct, so copy content\r\n    clone.nodes.filter(n => n._dirty).forEach(c => {\r\n      let n = this.nodes.find(a => a._id === c._id);\r\n      if (!n) return;\r\n      Utils.copyPos(n, c);\r\n      n._dirty = true;\r\n    });\r\n    this._notify();\r\n    return true;\r\n  }\r\n\r\n  /** return true if can fit in grid height constrain only (always true if no maxRow) */\r\n  public willItFit(node: GridStackNode): boolean {\r\n    if (!this.maxRow) return true;\r\n    // create a clone with NO maxRow and check if still within size\r\n    let clone = new GridStackEngine({\r\n      column: this.column,\r\n      float: this.float,\r\n      nodes: this.nodes.map(n => {return {...n}})\r\n    });\r\n    clone.addNode(node);\r\n    return clone.getRow() <= this.maxRow;\r\n  }\r\n\r\n  /** return true if the passed in node (x,y) is being dragged outside of the grid, and not added to bottom */\r\n  public isOutside(x: number, y: number, node: GridStackNode): boolean {\r\n    if (node._isCursorOutside) return false; // dragging out is handled by 'dropout' event instead\r\n    // simple outside boundaries\r\n    if (x < 0 || x >= this.column || y < 0) return true;\r\n    if (this.maxRow) return (y >= this.maxRow);\r\n    else if (this.float) return false; // infinite grow with no maxRow\r\n\r\n    // see if dragging PAST bottom (row+1)\r\n    let row = this.getRow();\r\n    if (y < row || y === 0) return false;\r\n    if (y > row) return true;\r\n    // else check to see if we can add that item to the bottom... (y == row)\r\n    if (!node._temporaryRemoved) {\r\n      let clone = new GridStackEngine({\r\n        column: this.column,\r\n        float: this.float,\r\n        nodes: this.nodes.filter(n => n !== node).map(n => {return {...n}})\r\n      });\r\n      let nn = {...node, x, y};\r\n      clone.addNode(nn);\r\n      return nn.y === node.y && nn.x === node.x; // didn't actually move, so last row was a drag out and not a new place...\r\n    }\r\n    return node._temporaryRemoved; // if still outside so we don't flicker back & forth\r\n  }\r\n\r\n  /** true if x,y or w,h are different after clamping to min/max */\r\n  public changedPosConstrain(node: GridStackNode, p: GridStackPosition): boolean {\r\n    // make sure w,h are set\r\n    p.w = p.w || node.w;\r\n    p.h = p.h || node.h;\r\n    if (node.x !== p.x || node.y !== p.y) return true;\r\n    // check constrained w,h\r\n    if (node.maxW) { p.w = Math.min(p.w, node.maxW); }\r\n    if (node.maxH) { p.h = Math.min(p.h, node.maxH); }\r\n    if (node.minW) { p.w = Math.max(p.w, node.minW); }\r\n    if (node.minH) { p.h = Math.max(p.h, node.minH); }\r\n    return (node.w !== p.w || node.h !== p.h);\r\n  }\r\n\r\n  /** return true if the passed in node was actually moved (checks for no-op and locked) */\r\n  public moveNode(node: GridStackNode, o: GridStackMoveOpts): boolean {\r\n    if (!node || node.locked || !o) return false;\r\n    if (o.pack === undefined) o.pack = true;\r\n\r\n    // constrain the passed in values and check if we're still changing our node\r\n    if (typeof o.x !== 'number') { o.x = node.x; }\r\n    if (typeof o.y !== 'number') { o.y = node.y; }\r\n    if (typeof o.w !== 'number') { o.w = node.w; }\r\n    if (typeof o.h !== 'number') { o.h = node.h; }\r\n    let resizing = (node.w !== o.w || node.h !== o.h);\r\n    let nn: GridStackNode = {maxW: node.maxW, maxH: node.maxH, minW: node.minW, minH: node.minH};\r\n    Utils.copyPos(nn, o);\r\n    nn = this.nodeBoundFix(nn, resizing);\r\n    Utils.copyPos(o, nn);\r\n\r\n    if (Utils.samePos(node, o)) return false;\r\n    let prevPos: GridStackPosition = Utils.copyPos({}, node);\r\n\r\n    // during while() collisions make sure to check entire row so larger items don't leap frog small ones (push them all down)\r\n    let area = nn;\r\n    // if (this._useEntireRowArea(node, nn)) {\r\n    //   area = {x: 0, w: this.column, y: nn.y, h: nn.h};\r\n    // }\r\n\r\n    // check if we will need to fix collision at our new location\r\n    let collides = this.collideAll(node, area, o.skip);\r\n    let needToMove = true;\r\n    if (collides.length) {\r\n      // now check to make sure we actually collided over 50% surface area while dragging\r\n      let collide = node._moving && !o.nested ? this.collideCoverage(node, o, collides) : collides[0];\r\n      if (collide) {\r\n        needToMove = !this._fixCollisions(node, nn, collide, o); // check if already moved...\r\n      } else {\r\n        needToMove = false; // we didn't cover >50% for a move, skip...\r\n      }\r\n    }\r\n\r\n    // now move (to the original ask vs the collision version which might differ) and repack things\r\n    if (needToMove) {\r\n      node._dirty = true;\r\n      Utils.copyPos(node, nn);\r\n    }\r\n    if (o.pack) {\r\n      this._packNodes()\r\n        ._notify();\r\n    }\r\n    return !Utils.samePos(node, prevPos); // pack might have moved things back\r\n  }\r\n\r\n  public getRow(): number {\r\n    return this.nodes.reduce((row, n) => Math.max(row, n.y + n.h), 0);\r\n  }\r\n\r\n  public beginUpdate(node: GridStackNode): GridStackEngine {\r\n    if (!node._updating) {\r\n      node._updating = true;\r\n      delete node._skipDown;\r\n      this.saveInitial();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public endUpdate(): GridStackEngine {\r\n    let n = this.nodes.find(n => n._updating);\r\n    if (n) {\r\n      delete n._updating;\r\n      delete n._skipDown;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** saves the current layout returning a list of widgets for serialization */\r\n  public save(saveElement = true): GridStackNode[] {\r\n    let widgets: GridStackNode[] = [];\r\n    this._sortNodes();\r\n    this.nodes.forEach(n => {\r\n      let w: GridStackNode = {};\r\n      for (let key in n) { if (key[0] !== '_' && n[key] !== null && n[key] !== undefined ) w[key] = n[key]; }\r\n      // delete other internals\r\n      if (!saveElement) delete w.el;\r\n      delete w.grid;\r\n      // delete default values (will be re-created on read)\r\n      if (!w.autoPosition) delete w.autoPosition;\r\n      if (!w.noResize) delete w.noResize;\r\n      if (!w.noMove) delete w.noMove;\r\n      if (!w.locked) delete w.locked;\r\n      widgets.push(w);\r\n    });\r\n    return widgets;\r\n  }\r\n\r\n  /** @internal called whenever a node is added or moved - updates the cached layouts */\r\n  public layoutsNodesChange(nodes: GridStackNode[]): GridStackEngine {\r\n    if (!this._layouts || this._ignoreLayoutsNodeChange) return this;\r\n    // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\r\n    this._layouts.forEach((layout, column) => {\r\n      if (!layout || column === this.column) return this;\r\n      if (column < this.column) {\r\n        this._layouts[column] = undefined;\r\n      }\r\n      else {\r\n        // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\r\n        // Note: we don't need to check against out of bound scaling/moving as that will be done when using those cache values.\r\n        nodes.forEach(node => {\r\n          let n = layout.find(l => l._id === node._id);\r\n          if (!n) return this; // no cache for new nodes. Will use those values.\r\n          let ratio = column / this.column;\r\n          // Y changed, push down same amount\r\n          // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\r\n          if (node.y !== node._orig.y) {\r\n            n.y += (node.y - node._orig.y);\r\n          }\r\n          // X changed, scale from new position\r\n          if (node.x !== node._orig.x) {\r\n            n.x = Math.round(node.x * ratio);\r\n          }\r\n          // width changed, scale from new width\r\n          if (node.w !== node._orig.w) {\r\n            n.w = Math.round(node.w * ratio);\r\n          }\r\n          // ...height always carries over from cache\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @internal Called to scale the widget width & position up/down based on the column change.\r\n   * Note we store previous layouts (especially original ones) to make it possible to go\r\n   * from say 12 -> 1 -> 12 and get back to where we were.\r\n   *\r\n   * @param oldColumn previous number of columns\r\n   * @param column  new column number\r\n   * @param nodes different sorted list (ex: DOM order) instead of current list\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n   */\r\n  public updateNodeWidths(oldColumn: number, column: number, nodes: GridStackNode[], layout: ColumnOptions = 'moveScale'): GridStackEngine {\r\n    if (!this.nodes.length || oldColumn === column) return this;\r\n\r\n    // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data\r\n    this.cacheLayout(this.nodes, oldColumn);\r\n\r\n    // if we're going to 1 column and using DOM order rather than default sorting, then generate that layout\r\n    if (column === 1 && nodes && nodes.length) {\r\n      let top = 0;\r\n      nodes.forEach(n => {\r\n        n.x = 0;\r\n        n.w = 1;\r\n        n.y = Math.max(n.y, top);\r\n        top = n.y + n.h;\r\n      });\r\n    } else {\r\n      nodes = Utils.sort(this.nodes, -1, oldColumn); // current column reverse sorting so we can insert last to front (limit collision)\r\n    }\r\n\r\n    // see if we have cached previous layout.\r\n    let cacheNodes = this._layouts[column] || [];\r\n    // if not AND we are going up in size start with the largest layout as down-scaling is more accurate\r\n    let lastIndex = this._layouts.length - 1;\r\n    if (cacheNodes.length === 0 && column > oldColumn && column < lastIndex) {\r\n      cacheNodes = this._layouts[lastIndex] || [];\r\n      if (cacheNodes.length) {\r\n        // pretend we came from that larger column by assigning those values as starting point\r\n        oldColumn = lastIndex;\r\n        cacheNodes.forEach(cacheNode => {\r\n          let j = nodes.findIndex(n => n._id === cacheNode._id);\r\n          if (j !== -1) {\r\n            // still current, use cache info positions\r\n            nodes[j].x = cacheNode.x;\r\n            nodes[j].y = cacheNode.y;\r\n            nodes[j].w = cacheNode.w;\r\n          }\r\n        });\r\n        cacheNodes = []; // we still don't have new column cached data... will generate from larger one.\r\n      }\r\n    }\r\n\r\n    // if we found cache re-use those nodes that are still current\r\n    let newNodes: GridStackNode[] = [];\r\n    cacheNodes.forEach(cacheNode => {\r\n      let j = nodes.findIndex(n => n._id === cacheNode._id);\r\n      if (j !== -1) {\r\n        // still current, use cache info positions\r\n        nodes[j].x = cacheNode.x;\r\n        nodes[j].y = cacheNode.y;\r\n        nodes[j].w = cacheNode.w;\r\n        newNodes.push(nodes[j]);\r\n        nodes.splice(j, 1);\r\n      }\r\n    });\r\n    // ...and add any extra non-cached ones\r\n    if (nodes.length) {\r\n      if (typeof layout === 'function') {\r\n        layout(column, oldColumn, newNodes, nodes);\r\n      } else {\r\n        let ratio = column / oldColumn;\r\n        let move = (layout === 'move' || layout === 'moveScale');\r\n        let scale = (layout === 'scale' || layout === 'moveScale');\r\n        nodes.forEach(node => {\r\n          node.x = (column === 1 ? 0 : (move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1)));\r\n          node.w = ((column === 1 || oldColumn === 1) ? 1 :\r\n            scale ? (Math.round(node.w * ratio) || 1) : (Math.min(node.w, column)));\r\n          newNodes.push(node);\r\n        });\r\n        nodes = [];\r\n      }\r\n    }\r\n\r\n    // finally re-layout them in reverse order (to get correct placement)\r\n    newNodes = Utils.sort(newNodes, -1, column);\r\n    this._ignoreLayoutsNodeChange = true;\r\n    this.batchUpdate();\r\n    this.nodes = []; // pretend we have no nodes to start with (we use same structures) to simplify layout\r\n    newNodes.forEach(node => {\r\n      this.addNode(node, false); // 'false' for add event trigger\r\n      node._dirty = true; // force attr update\r\n    }, this);\r\n    this.commit();\r\n    delete this._ignoreLayoutsNodeChange;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * call to cache the given layout internally to the given location so we can restore back when column changes size\r\n   * @param nodes list of nodes\r\n   * @param column corresponding column index to save it under\r\n   * @param clear if true, will force other caches to be removed (default false)\r\n   */\r\n  public cacheLayout(nodes: GridStackNode[], column: number, clear = false): GridStackEngine {\r\n    let copy: Layout[] = [];\r\n    nodes.forEach((n, i) => {\r\n      n._id = n._id || GridStackEngine._idSeq++; // make sure we have an id in case this is new layout, else re-use id already set\r\n      copy[i] = {x: n.x, y: n.y, w: n.w, _id: n._id} // only thing we change is x,y,w and id to find it back\r\n    });\r\n    this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\r\n    this._layouts[column] = copy;\r\n    return this;\r\n  }\r\n\r\n\r\n  /** called to remove all internal values but the _id */\r\n  public cleanupNode(node: GridStackNode): GridStackEngine {\r\n    for (let prop in node) {\r\n      if (prop[0] === '_' && prop !== '_id') delete node[prop];\r\n    }\r\n    return this;\r\n  }\r\n}\r\n\r\n/** @internal class to store per column layout bare minimal info (subset of GridStackWidget) */\r\ninterface Layout {\r\n  x: number;\r\n  y: number;\r\n  w: number;\r\n  _id: number; // so we can find full node back\r\n}\r\n","// gridstack.ts 4.0.0\r\n/*!\r\n * (c) 2021 Alain Dumesny - see root license\r\n */\r\nimport { GridStackEngine } from './gridstack-engine';\r\nimport { Utils, HeightData } from './utils';\r\nimport { ColumnOptions, GridItemHTMLElement, GridStackElement, GridStackEventHandlerCallback,\r\n  GridStackNode, GridStackOptions, GridStackWidget, numberOrString, DDUIData, DDDragInOpt, GridStackPosition } from './types';\r\nimport { GridStackDDI } from './gridstack-ddi';\r\n\r\n// export all dependent file as well to make it easier for users to just import the main file\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\nexport * from './gridstack-ddi';\r\n\r\nexport interface GridHTMLElement extends HTMLElement {\r\n  gridstack?: GridStack; // grid's parent DOM element points back to grid class\r\n}\r\nexport type GridStackEvent = 'added' | 'change' | 'disable' | 'drag' | 'dragstart' | 'dragstop' | 'dropped' |\r\n  'enable' | 'removed' | 'resize' | 'resizestart' | 'resizestop';\r\n\r\n/** Defines the coordinates of an object */\r\nexport interface MousePosition {\r\n  top: number;\r\n  left: number;\r\n}\r\n\r\n/** Defines the position of a cell inside the grid*/\r\nexport interface CellPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface GridCSSStyleSheet extends CSSStyleSheet {\r\n  _id?: string; // random id we will use to style us\r\n  _max?: number; // internal tracker of the max # of rows we created\\\r\n}\r\n\r\n// default values for grid options - used during init and when saving out\r\nconst GridDefaults: GridStackOptions = {\r\n  column: 12,\r\n  minRow: 0,\r\n  maxRow: 0,\r\n  itemClass: 'grid-stack-item',\r\n  placeholderClass: 'grid-stack-placeholder',\r\n  placeholderText: '',\r\n  handle: '.grid-stack-item-content',\r\n  handleClass: null,\r\n  styleInHead: false,\r\n  cellHeight: 'auto',\r\n  cellHeightThrottle: 100,\r\n  margin: 10,\r\n  auto: true,\r\n  minWidth: 768,\r\n  float: false,\r\n  staticGrid: false,\r\n  animate: true,\r\n  alwaysShowResizeHandle: false,\r\n  resizable: {\r\n    autoHide: true,\r\n    handles: 'se'\r\n  },\r\n  draggable: {\r\n    handle: '.grid-stack-item-content',\r\n    scroll: false,\r\n    appendTo: 'body'\r\n  },\r\n  disableDrag: false,\r\n  disableResize: false,\r\n  rtl: 'auto',\r\n  removable: false,\r\n  removableOptions: {\r\n    accept: '.grid-stack-item'\r\n  },\r\n  marginUnit: 'px',\r\n  cellHeightUnit: 'px',\r\n  disableOneColumnMode: false,\r\n  oneColumnModeDomSort: false\r\n};\r\n\r\n/**\r\n * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.\r\n * Note: your grid elements MUST have the following classes for the CSS layout to work:\r\n * @example\r\n * <div class=\"grid-stack\">\r\n *   <div class=\"grid-stack-item\">\r\n *     <div class=\"grid-stack-item-content\">Item 1</div>\r\n *   </div>\r\n * </div>\r\n */\r\nexport class GridStack {\r\n\r\n  /**\r\n   * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will\r\n   * simply return the existing instance (ignore any passed options). There is also an initAll() version that support\r\n   * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.\r\n   * @param options grid options (optional)\r\n   * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   *\r\n   * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\r\n   * let grid = document.querySelector('.grid-stack').gridstack;\r\n   */\r\n  public static init(options: GridStackOptions = {}, elOrString: GridStackElement = '.grid-stack'): GridStack {\r\n    let el = GridStack.getGridElement(elOrString);\r\n    if (!el) {\r\n      if (typeof elOrString === 'string') {\r\n        console.error('GridStack.initAll() no grid was found with selector \"' + elOrString + '\" - element missing or wrong selector ?' +\r\n        '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n      } else {\r\n        console.error('GridStack.init() no grid element was passed.');\r\n      }\r\n      return null;\r\n    }\r\n    if (!el.gridstack) {\r\n      el.gridstack = new GridStack(el, {...options});\r\n    }\r\n    return el.gridstack\r\n  }\r\n\r\n  /**\r\n   * Will initialize a list of elements (given a selector) and return an array of grids.\r\n   * @param options grid options (optional)\r\n   * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grids = GridStack.initAll();\r\n   * grids.forEach(...)\r\n   */\r\n  public static initAll(options: GridStackOptions = {}, selector = '.grid-stack'): GridStack[] {\r\n    let grids: GridStack[] = [];\r\n    GridStack.getGridElements(selector).forEach(el => {\r\n      if (!el.gridstack) {\r\n        el.gridstack = new GridStack(el, {...options});\r\n        delete options.dragIn; delete options.dragInOptions; // only need to be done once (really a static global thing, not per grid)\r\n      }\r\n      grids.push(el.gridstack);\r\n    });\r\n    if (grids.length === 0) {\r\n      console.error('GridStack.initAll() no grid was found with selector \"' + selector + '\" - element missing or wrong selector ?' +\r\n      '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n    }\r\n    return grids;\r\n  }\r\n\r\n  /**\r\n   * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then\r\n   * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from\r\n   * JSON serialized data, including options.\r\n   * @param parent HTML element parent to the grid\r\n   * @param opt grids options used to initialize the grid, and list of children\r\n   */\r\n  public static addGrid(parent: HTMLElement, opt: GridStackOptions = {}): GridStack {\r\n    if (!parent) return null;\r\n\r\n    // create the grid element\r\n    let doc = document.implementation.createHTMLDocument();\r\n    doc.body.innerHTML = `<div class=\"grid-stack ${opt.class || ''}\"></div>`;\r\n    let el = doc.body.children[0] as HTMLElement;\r\n    parent.appendChild(el);\r\n\r\n    // create grid class and load any children\r\n    let grid = GridStack.init(opt, el);\r\n    if (opt.children) {\r\n      grid.load(opt.children);\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  /** scoping so users can call GridStack.Utils.sort() for example */\r\n  public static Utils = Utils;\r\n\r\n  /** scoping so users can call new GridStack.Engine(12) for example */\r\n  public static Engine = GridStackEngine;\r\n\r\n  /** the HTML element tied to this grid after it's been initialized */\r\n  public el: GridHTMLElement;\r\n\r\n  /** engine used to implement non DOM grid functionality */\r\n  public engine: GridStackEngine;\r\n\r\n  /** grid options - public for classes to access, but use methods to modify! */\r\n  public opts: GridStackOptions;\r\n\r\n  /** @internal create placeholder DIV as needed */\r\n  public get placeholder(): HTMLElement {\r\n    if (!this._placeholder) {\r\n      let placeholderChild = document.createElement('div'); // child so padding match item-content\r\n      placeholderChild.className = 'placeholder-content';\r\n      if (this.opts.placeholderText) {\r\n        placeholderChild.innerHTML = this.opts.placeholderText;\r\n      }\r\n      this._placeholder = document.createElement('div');\r\n      this._placeholder.classList.add(this.opts.placeholderClass, GridDefaults.itemClass, this.opts.itemClass);\r\n      this.placeholder.appendChild(placeholderChild);\r\n    }\r\n    return this._placeholder;\r\n  }\r\n  /** @internal */\r\n  private _placeholder: HTMLElement;\r\n  /** @internal */\r\n  private _oneColumnMode: boolean;\r\n  /** @internal */\r\n  private _prevColumn: number;\r\n  /** @internal */\r\n  private _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal */\r\n  public _gsEventHandler = {};\r\n  /** @internal */\r\n  private _styles: GridCSSStyleSheet;\r\n  /** @internal flag to keep cells square during resize */\r\n  private _isAutoCellHeight: boolean;\r\n  /** @internal track event binding to window resize so we can remove */\r\n  private _windowResizeBind: () => void;\r\n  /** @internal limit auto cell resizing method */\r\n  private _cellHeightThrottle: () => void;\r\n  /** @internal true when loading items to insert first rather than append */\r\n  private _insertNotAppend: boolean;\r\n\r\n  /**\r\n   * Construct a grid item from the given element and options\r\n   * @param el\r\n   * @param opts\r\n   */\r\n  public constructor(el: GridHTMLElement, opts: GridStackOptions = {}) {\r\n    this.el = el; // exposed HTML element to the user\r\n    opts = opts || {}; // handles null/undefined/0\r\n\r\n    // if row property exists, replace minRow and maxRow instead\r\n    if (opts.row) {\r\n      opts.minRow = opts.maxRow = opts.row;\r\n      delete opts.row;\r\n    }\r\n    let rowAttr = Utils.toNumber(el.getAttribute('gs-row'));\r\n\r\n    // elements attributes override any passed options (like CSS style) - merge the two together\r\n    let defaults: GridStackOptions = {...GridDefaults,\r\n      column: Utils.toNumber(el.getAttribute('gs-column')) || 12,\r\n      minRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-min-row')) || 0,\r\n      maxRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-max-row')) || 0,\r\n      staticGrid: Utils.toBool(el.getAttribute('gs-static')) || false,\r\n      _styleSheetClass: 'grid-stack-instance-' + (Math.random() * 10000).toFixed(0),\r\n      alwaysShowResizeHandle: opts.alwaysShowResizeHandle || false,\r\n      resizable: {\r\n        autoHide: !(opts.alwaysShowResizeHandle || false),\r\n        handles: 'se'\r\n      },\r\n      draggable: {\r\n        handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) || '.grid-stack-item-content',\r\n        scroll: false,\r\n        appendTo: 'body'\r\n      },\r\n      removableOptions: {\r\n        accept: '.' + (opts.itemClass || 'grid-stack-item')\r\n      },\r\n    };\r\n    if (el.getAttribute('gs-animate')) { // default to true, but if set to false use that instead\r\n      defaults.animate = Utils.toBool(el.getAttribute('gs-animate'))\r\n    }\r\n\r\n    this.opts = Utils.defaults(opts, defaults);\r\n    opts = null; // make sure we use this.opts instead\r\n    this.initMargin(); // part of settings defaults...\r\n\r\n    // Now check if we're loading into 1 column mode FIRST so we don't do un-necessary work (like cellHeight = width / 12 then go 1 column)\r\n    if (this.opts.column !== 1 && !this.opts.disableOneColumnMode && this._widthOrContainer() <= this.opts.minWidth) {\r\n      this._prevColumn = this.opts.column;\r\n      this.opts.column = 1;\r\n    }\r\n\r\n    if (this.opts.rtl === 'auto') {\r\n      this.opts.rtl = (el.style.direction === 'rtl');\r\n    }\r\n\r\n    if (this.opts.rtl) {\r\n      this.el.classList.add('grid-stack-rtl');\r\n    }\r\n\r\n    // check if we're been nested, and if so update our style and keep pointer around (used during save)\r\n    let parentGridItemEl = Utils.closestByClass(this.el, GridDefaults.itemClass) as GridItemHTMLElement;\r\n    if (parentGridItemEl && parentGridItemEl.gridstackNode) {\r\n      this.opts._isNested = parentGridItemEl.gridstackNode;\r\n      this.opts._isNested.subGrid = this;\r\n      this.el.classList.add('grid-stack-nested');\r\n    }\r\n\r\n    this._isAutoCellHeight = (this.opts.cellHeight === 'auto');\r\n    if (this._isAutoCellHeight || this.opts.cellHeight === 'initial') {\r\n      // make the cell content square initially (will use resize/column event to keep it square)\r\n      this.cellHeight(undefined, false);\r\n    } else {\r\n      this.cellHeight(this.opts.cellHeight, false);\r\n    }\r\n\r\n    this.el.classList.add(this.opts._styleSheetClass);\r\n\r\n    this._setStaticClass();\r\n\r\n    this.engine = new GridStackEngine({\r\n      column: this.opts.column,\r\n      float: this.opts.float,\r\n      maxRow: this.opts.maxRow,\r\n      onChange: (cbNodes, removeDOM = true) => {\r\n        let maxH = 0;\r\n        this.engine.nodes.forEach(n => { maxH = Math.max(maxH, n.y + n.h) });\r\n        cbNodes.forEach(n => {\r\n          let el = n.el;\r\n          if (removeDOM && n._removeDOM) { // TODO: do we need to pass 'removeDOM' ?\r\n            if (el) el.remove();\r\n            delete n._removeDOM;\r\n          } else {\r\n            this._writePosAttr(el, n);\r\n          }\r\n        });\r\n        this._updateStyles(false, maxH); // false = don't recreate, just append if need be\r\n      }\r\n    });\r\n\r\n    if (this.opts.auto) {\r\n      this.batchUpdate(); // prevent in between re-layout #1535 TODO: this only set float=true, need to prevent collision check...\r\n      let elements: {el: HTMLElement; i: number}[] = [];\r\n      this.getGridItems().forEach(el => {\r\n        let x = parseInt(el.getAttribute('gs-x'));\r\n        let y = parseInt(el.getAttribute('gs-y'));\r\n        elements.push({\r\n          el,\r\n          // if x,y are missing (autoPosition) add them to end of list - but keep their respective DOM order\r\n          i: (Number.isNaN(x) ? 1000 : x) + (Number.isNaN(y) ? 1000 : y) * this.opts.column\r\n        });\r\n      });\r\n      elements.sort((a, b) => a.i - b.i).forEach(e => this._prepareElement(e.el));\r\n      this.commit();\r\n    }\r\n\r\n    this.setAnimation(this.opts.animate);\r\n\r\n    this._updateStyles();\r\n    if (this.opts.column != 12) {\r\n      this.el.classList.add('grid-stack-' + this.opts.column);\r\n    }\r\n\r\n    // legacy support to appear 'per grid` options when really global.\r\n    if (this.opts.dragIn) GridStack.setupDragIn(this.opts.dragIn, this.opts.dragInOptions);\r\n    delete this.opts.dragIn;\r\n    delete this.opts.dragInOptions;\r\n\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this._updateWindowResizeEvent();\r\n  }\r\n\r\n  /**\r\n   * add a new widget and returns it.\r\n   *\r\n   * Widget will be always placed even if result height is more than actual grid height.\r\n   * You need to use `willItFit()` before calling addWidget for additional check.\r\n   * See also `makeWidget()`.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.addWidget({w: 3, content: 'hello'});\r\n   * grid.addWidget('<div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">hello</div></div>', {w: 3});\r\n   *\r\n   * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add\r\n   * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget\r\n   */\r\n  public addWidget(els?: GridStackWidget | GridStackElement, options?: GridStackWidget): GridItemHTMLElement {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `addWidget(el, x, y, width...)` is deprecated. Use `addWidget({x, y, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1,\r\n        opt: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++],\r\n          minW:a[i++], maxW:a[i++], minH:a[i++], maxH:a[i++], id:a[i++] };\r\n      return this.addWidget(els, opt);\r\n    }\r\n\r\n    function isGridStackWidget(w: GridStackWidget): w is GridStackWidget { // https://medium.com/ovrsea/checking-the-type-of-an-object-in-typescript-the-type-guards-24d98d9119b0\r\n      return w.x !== undefined || w.y !== undefined || w.w !== undefined || w.h !== undefined || w.content !== undefined ? true : false;\r\n    }\r\n\r\n    let el: HTMLElement;\r\n    if (typeof els === 'string') {\r\n      let doc = document.implementation.createHTMLDocument();\r\n      doc.body.innerHTML = els;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else if (arguments.length === 0 || arguments.length === 1 && isGridStackWidget(els)) {\r\n      let content = els ? (els as GridStackWidget).content || '' : '';\r\n      options = els;\r\n      let doc = document.implementation.createHTMLDocument();\r\n      doc.body.innerHTML = `<div class=\"grid-stack-item ${this.opts.itemClass || ''}\"><div class=\"grid-stack-item-content\">${content}</div></div>`;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else {\r\n      el = els as HTMLElement;\r\n    }\r\n\r\n    // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos\r\n    // as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz) before adding the node.\r\n    // So make sure we load any DOM attributes that are not specified in passed in options (which override)\r\n    let domAttr = this._readAttr(el);\r\n    options = {...(options || {})};  // make a copy before we modify in case caller re-uses it\r\n    Utils.defaults(options, domAttr);\r\n    this.engine.prepareNode(options);\r\n    this._writeAttr(el, options);\r\n\r\n    if (this._insertNotAppend) {\r\n      this.el.prepend(el);\r\n    } else {\r\n      this.el.appendChild(el);\r\n    }\r\n\r\n    // similar to makeWidget() that doesn't read attr again and worse re-create a new node and loose any _id\r\n    this._prepareElement(el, true, options);\r\n    this._updateContainerHeight();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * saves the current layout returning a list of widgets for serialization (with default to save content), which might include any nested grids.\r\n   * Optionally you can also save the grid with options itself, so you can call the new GridStack.addGrid()\r\n   * to recreate everything from scratch. GridStackOptions.children would then contain the widget list.\r\n   */\r\n  public save(saveContent = true, saveGridOpt = false): GridStackWidget[] | GridStackOptions {\r\n    // return copied nodes we can modify at will...\r\n    let list = this.engine.save(saveContent);\r\n\r\n    // check for HTML content as well\r\n    if (saveContent) {\r\n      list.forEach(n => {\r\n        if (n.el && !n.subGrid) { // sub-grid are saved differently, not plain content\r\n          let sub = n.el.querySelector('.grid-stack-item-content');\r\n          n.content = sub ? sub.innerHTML : undefined;\r\n          if (!n.content) delete n.content;\r\n          delete n.el;\r\n        }\r\n      });\r\n    }\r\n\r\n    // check if save entire grid options (needed for recursive) + children...\r\n    if (saveGridOpt) {\r\n\r\n      // check for nested grid\r\n      list.forEach(n => {\r\n        if (n.subGrid) {\r\n          n.subGrid = (n.subGrid as GridStack).save(saveContent, saveGridOpt) as GridStackOptions;\r\n        }\r\n      })\r\n\r\n      let o: GridStackOptions = {...this.opts};\r\n      // delete default values that will be recreated on launch\r\n      if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {\r\n        o.margin = o.marginTop;\r\n        delete o.marginTop; delete o.marginRight; delete o.marginBottom; delete o.marginLeft;\r\n      }\r\n      if (o.rtl === (this.el.style.direction === 'rtl')) { o.rtl = 'auto' }\r\n      if (this._isAutoCellHeight) { o.cellHeight = 'auto' }\r\n      Utils.removeInternalAndSame(o, GridDefaults);\r\n      o.children = list;\r\n      return o;\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  /**\r\n   * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.\r\n   *\r\n   * @param layout list of widgets definition to update/create\r\n   * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving\r\n   * the user control of insertion.\r\n   *\r\n   * @example\r\n   * see http://gridstackjs.com/demo/serialization.html\r\n   **/\r\n  public load(layout: GridStackWidget[], addAndRemove: boolean | ((g: GridStack, w: GridStackWidget, add: boolean) => GridItemHTMLElement)  = true): GridStack {\r\n    let items = GridStack.Utils.sort(layout, -1, this._prevColumn || this.opts.column);\r\n    this._insertNotAppend = true; // since create in reverse order...\r\n\r\n    // if we're loading a layout into 1 column (_prevColumn is set only when going to 1) and items don't fit, make sure to save\r\n    // the original wanted layout so we can scale back up correctly #1471\r\n    if (this._prevColumn && this._prevColumn !== this.opts.column && items.some(n => (n.x + n.w) > this.opts.column)) {\r\n      this._ignoreLayoutsNodeChange = true; // skip layout update\r\n      this.engine.cacheLayout(items, this._prevColumn, true);\r\n    }\r\n\r\n    let removed: GridStackNode[] = [];\r\n    this.batchUpdate();\r\n\r\n    // see if any items are missing from new layout and need to be removed first\r\n    if (addAndRemove) {\r\n      let copyNodes = [...this.engine.nodes]; // don't loop through array you modify\r\n      copyNodes.forEach(n => {\r\n        let item = items.find(w => n.id === w.id);\r\n        if (!item) {\r\n          if (typeof(addAndRemove) === 'function') {\r\n            addAndRemove(this, n, false);\r\n          } else {\r\n            removed.push(n); // batch keep track\r\n            this.removeWidget(n.el, true, false);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // now add/update the widgets\r\n    items.forEach(w => {\r\n      let item = (w.id || w.id === 0) ? this.engine.nodes.find(n => n.id === w.id) : undefined;\r\n      if (item) {\r\n        this.update(item.el, w);\r\n        if (w.subGrid && (w.subGrid as GridStackOptions).children) { // update any sub grid as well\r\n          let sub = item.el.querySelector('.grid-stack') as GridHTMLElement;\r\n          if (sub && sub.gridstack) {\r\n            sub.gridstack.load((w.subGrid as GridStackOptions).children); // TODO: support updating grid options ?\r\n            this._insertNotAppend = true; // got reset by above call\r\n          }\r\n        }\r\n      } else if (addAndRemove) {\r\n        if (typeof(addAndRemove) === 'function') {\r\n          w = addAndRemove(this, w, true).gridstackNode;\r\n        } else {\r\n          w = this.addWidget(w).gridstackNode;\r\n        }\r\n        if (w.subGrid) { // see if there is a sub-grid to create too\r\n          let content = w.el.querySelector('.grid-stack-item-content') as HTMLElement;\r\n          w.subGrid = GridStack.addGrid(content, w.subGrid as GridStackOptions);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.engine.removedNodes = removed;\r\n    this.commit();\r\n\r\n    // after commit, clear that flag\r\n    delete this._ignoreLayoutsNodeChange;\r\n    delete this._insertNotAppend;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Initializes batch updates. You will see no changes until `commit()` method is called.\r\n   */\r\n  public batchUpdate(): GridStack {\r\n    this.engine.batchUpdate();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets current cell height.\r\n   */\r\n  public getCellHeight(forcePixel = false): number {\r\n    if (this.opts.cellHeight && this.opts.cellHeight !== 'auto' &&\r\n       (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === 'px')) {\r\n      return this.opts.cellHeight as number;\r\n    }\r\n    // else do entire grid and # of rows\r\n    // or get first cell height ?\r\n    // let el = this.el.querySelector('.' + this.opts.itemClass) as HTMLElement;\r\n    // let height = Utils.toNumber(el.getAttribute('gs-h'));\r\n    // return Math.round(el.offsetHeight / height);\r\n    return Math.round(this.el.getBoundingClientRect().height) / parseInt(this.el.getAttribute('gs-current-row'));\r\n  }\r\n\r\n  /**\r\n   * Update current cell height - see `GridStackOptions.cellHeight` for format.\r\n   * This method rebuilds an internal CSS style sheet.\r\n   * Note: You can expect performance issues if call this method too often.\r\n   *\r\n   * @param val the cell height. If not passed (undefined), cells content will be made square (match width minus margin),\r\n   * if pass 0 the CSS will be generated by the application instead.\r\n   * @param update (Optional) if false, styles will not be updated\r\n   *\r\n   * @example\r\n   * grid.cellHeight(100); // same as 100px\r\n   * grid.cellHeight('70px');\r\n   * grid.cellHeight(grid.cellWidth() * 1.2);\r\n   */\r\n  public cellHeight(val?: numberOrString, update = true): GridStack {\r\n\r\n    // if not called internally, check if we're changing mode\r\n    if (update && val !== undefined) {\r\n      if (this._isAutoCellHeight !== (val === 'auto')) {\r\n        this._isAutoCellHeight = (val === 'auto');\r\n        this._updateWindowResizeEvent();\r\n      }\r\n    }\r\n    if (val === 'initial' || val === 'auto') { val = undefined; }\r\n\r\n    // make item content be square\r\n    if (val === undefined) {\r\n      let marginDiff = - (this.opts.marginRight as number) - (this.opts.marginLeft as number)\r\n        + (this.opts.marginTop as number) + (this.opts.marginBottom as number);\r\n      val = this.cellWidth() + marginDiff;\r\n    }\r\n\r\n    let data = Utils.parseHeight(val);\r\n    if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {\r\n      return this;\r\n    }\r\n    this.opts.cellHeightUnit = data.unit;\r\n    this.opts.cellHeight = data.h;\r\n\r\n    if (update) {\r\n      this._updateStyles(true, this.getRow()); // true = force re-create, for that # of rows\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** Gets current cell width. */\r\n  public cellWidth(): number {\r\n    return this._widthOrContainer() / this.opts.column;\r\n  }\r\n  /** return our expected width (or parent) for 1 column check */\r\n  private _widthOrContainer(): number {\r\n    // use `offsetWidth` or `clientWidth` (no scrollbar) ?\r\n    // https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively\r\n    return (this.el.clientWidth || this.el.parentElement.clientWidth || window.innerWidth);\r\n  }\r\n\r\n  /**\r\n   * Finishes batch updates. Updates DOM nodes. You must call it after batchUpdate.\r\n   */\r\n  public commit(): GridStack {\r\n    this.engine.commit();\r\n    this._triggerRemoveEvent();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /** re-layout grid items to reclaim any empty space */\r\n  public compact(): GridStack {\r\n    this.engine.compact();\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,\r\n   * as well as cache the original layout so you can revert back to previous positions without loss.\r\n   * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],\r\n   * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)\r\n   * @param column - Integer > 0 (default 12).\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n   */\r\n  public column(column: number, layout: ColumnOptions = 'moveScale'): GridStack {\r\n    if (this.opts.column === column) return this;\r\n    let oldColumn = this.opts.column;\r\n\r\n    // if we go into 1 column mode (which happens if we're sized less than minW unless disableOneColumnMode is on)\r\n    // then remember the original columns so we can restore.\r\n    if (column === 1) {\r\n      this._prevColumn = oldColumn;\r\n    } else {\r\n      delete this._prevColumn;\r\n    }\r\n\r\n    this.el.classList.remove('grid-stack-' + oldColumn);\r\n    this.el.classList.add('grid-stack-' + column);\r\n    this.opts.column = this.engine.column = column;\r\n\r\n    // update the items now - see if the dom order nodes should be passed instead (else default to current list)\r\n    let domNodes: GridStackNode[];\r\n    if (column === 1 && this.opts.oneColumnModeDomSort) {\r\n      domNodes = [];\r\n      this.getGridItems().forEach(el => {\r\n        if (el.gridstackNode) { domNodes.push(el.gridstackNode); }\r\n      });\r\n      if (!domNodes.length) { domNodes = undefined; }\r\n    }\r\n    this.engine.updateNodeWidths(oldColumn, column, domNodes, layout);\r\n    if (this._isAutoCellHeight) this.cellHeight();\r\n\r\n    // and trigger our event last...\r\n    this._ignoreLayoutsNodeChange = true; // skip layout update\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the number of columns in the grid (default 12)\r\n   */\r\n  public getColumn(): number {\r\n    return this.opts.column;\r\n  }\r\n\r\n  /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children */\r\n  public getGridItems(): GridItemHTMLElement[] {\r\n    return Array.from(this.el.children)\r\n      .filter((el: HTMLElement) => el.matches('.' + this.opts.itemClass) && !el.matches('.' + this.opts.placeholderClass)) as GridItemHTMLElement[];\r\n  }\r\n\r\n  /**\r\n   * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.\r\n   * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).\r\n   */\r\n  public destroy(removeDOM = true): GridStack {\r\n    if (!this.el) return; // prevent multiple calls\r\n    this._updateWindowResizeEvent(true);\r\n    this.setStatic(true); // permanently removes DD\r\n    if (!removeDOM) {\r\n      this.removeAll(removeDOM);\r\n      this.el.classList.remove(this.opts._styleSheetClass);\r\n    } else {\r\n      this.el.parentNode.removeChild(this.el);\r\n    }\r\n    this._removeStylesheet();\r\n    delete this.opts._isNested;\r\n    delete this.opts;\r\n    delete this._placeholder;\r\n    delete this.engine;\r\n    delete this.el.gridstack; // remove circular dependency that would prevent a freeing\r\n    delete this.el;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)\r\n   */\r\n  public float(val: boolean): GridStack {\r\n    this.engine.float = val;\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the current float mode\r\n   */\r\n  public getFloat(): boolean {\r\n    return this.engine.float;\r\n  }\r\n\r\n  /**\r\n   * Get the position of the cell under a pixel on screen.\r\n   * @param position the position of the pixel to resolve in\r\n   * absolute coordinates, as an object with top and left properties\r\n   * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).\r\n   * Useful when grid is within `position: relative` element\r\n   *\r\n   * Returns an object with properties `x` and `y` i.e. the column and row in the grid.\r\n   */\r\n  public getCellFromPixel(position: MousePosition, useDocRelative = false): CellPosition {\r\n    let box = this.el.getBoundingClientRect();\r\n    // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)\r\n    let containerPos;\r\n    if (useDocRelative) {\r\n      containerPos = {top: box.top + document.documentElement.scrollTop, left: box.left};\r\n      // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)\r\n    } else {\r\n      containerPos = {top: this.el.offsetTop, left: this.el.offsetLeft}\r\n      // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)\r\n    }\r\n    let relativeLeft = position.left - containerPos.left;\r\n    let relativeTop = position.top - containerPos.top;\r\n\r\n    let columnWidth = (box.width / this.opts.column);\r\n    let rowHeight = (box.height / parseInt(this.el.getAttribute('gs-current-row')));\r\n\r\n    return {x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight)};\r\n  }\r\n\r\n  /** returns the current number of rows, which will be at least `minRow` if set */\r\n  public getRow(): number {\r\n    return Math.max(this.engine.getRow(), this.opts.minRow);\r\n  }\r\n\r\n  /**\r\n   * Checks if specified area is empty.\r\n   * @param x the position x.\r\n   * @param y the position y.\r\n   * @param w the width of to check\r\n   * @param h the height of to check\r\n   */\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    return this.engine.isAreaEmpty(x, y, w, h);\r\n  }\r\n\r\n  /**\r\n   * If you add elements to your grid by hand, you have to tell gridstack afterwards to make them widgets.\r\n   * If you want gridstack to add the elements for you, use `addWidget()` instead.\r\n   * Makes the given element a widget and returns it.\r\n   * @param els widget or single selector to convert.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.el.appendChild('<div id=\"gsi-1\" gs-w=\"3\"></div>');\r\n   * grid.makeWidget('#gsi-1');\r\n   */\r\n  public makeWidget(els: GridStackElement): GridItemHTMLElement {\r\n    let el = GridStack.getElement(els);\r\n    this._prepareElement(el, true);\r\n    this._updateContainerHeight();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Event handler that extracts our CustomEvent data out automatically for receiving custom\r\n   * notifications (see doc for supported events)\r\n   * @param name of the event (see possible values) or list of names space separated\r\n   * @param callback function called with event and optional second/third param\r\n   * (see README documentation for each signature).\r\n   *\r\n   * @example\r\n   * grid.on('added', function(e, items) { log('added ', items)} );\r\n   * or\r\n   * grid.on('added removed change', function(e, items) { log(e.type, items)} );\r\n   *\r\n   * Note: in some cases it is the same as calling native handler and parsing the event.\r\n   * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );\r\n   *\r\n   */\r\n  public on(name: GridStackEvent, callback: GridStackEventHandlerCallback): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.on(name, callback));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // native CustomEvent handlers - cash the generic handlers so we can easily remove\r\n      let noData = (name === 'enable' || name === 'disable');\r\n      if (noData) {\r\n        this._gsEventHandler[name] = (event: Event) => callback(event);\r\n      } else {\r\n        this._gsEventHandler[name] = (event: CustomEvent) => callback(event, event.detail);\r\n      }\r\n      this.el.addEventListener(name, this._gsEventHandler[name]);\r\n    } else if (name === 'drag' || name === 'dragstart' || name === 'dragstop' || name === 'resizestart' || name === 'resize' || name === 'resizestop' || name === 'dropped') {\r\n      // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.\r\n      // do same for start event to make it easier...\r\n      this._gsEventHandler[name] = callback;\r\n    } else {\r\n      console.log('GridStack.on(' + name + ') event not supported, but you can still use $(\".grid-stack\").on(...) while jquery-ui is still used internally.');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * unsubscribe from the 'on' event below\r\n   * @param name of the event (see possible values)\r\n   */\r\n  public off(name: GridStackEvent): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.off(name));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // remove native CustomEvent handlers\r\n      if (this._gsEventHandler[name]) {\r\n        this.el.removeEventListener(name, this._gsEventHandler[name]);\r\n      }\r\n    }\r\n    delete this._gsEventHandler[name];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes widget from the grid.\r\n   * @param el  widget or selector to modify\r\n   * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).\r\n   * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\r\n   */\r\n  public removeWidget(els: GridStackElement, removeDOM = true, triggerEvent = true): GridStack {\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (el.parentElement !== this.el) return; // not our child!\r\n      let node = el.gridstackNode;\r\n      // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272\r\n      if (!node) {\r\n        node = this.engine.nodes.find(n => el === n.el);\r\n      }\r\n      if (!node) return;\r\n\r\n      // remove our DOM data (circular link) and drag&drop permanently\r\n      delete el.gridstackNode;\r\n      GridStackDDI.get().remove(el);\r\n\r\n      this.engine.removeNode(node, removeDOM, triggerEvent);\r\n\r\n      if (removeDOM && el.parentElement) {\r\n        el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM\r\n      }\r\n    });\r\n    if (triggerEvent) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes all widgets from the grid.\r\n   * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).\r\n   */\r\n  public removeAll(removeDOM = true): GridStack {\r\n    // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently\r\n    this.engine.nodes.forEach(n => {\r\n      delete n.el.gridstackNode;\r\n      GridStackDDI.get().remove(n.el);\r\n    });\r\n    this.engine.removeAll(removeDOM);\r\n    this._triggerRemoveEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.\r\n   * @param doAnimate if true the grid will animate.\r\n   */\r\n  public setAnimation(doAnimate: boolean): GridStack {\r\n    if (doAnimate) {\r\n      this.el.classList.add('grid-stack-animate');\r\n    } else {\r\n      this.el.classList.remove('grid-stack-animate');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.\r\n   * Also toggle the grid-stack-static class.\r\n   * @param val if true the grid become static.\r\n   */\r\n  public setStatic(val: boolean): GridStack {\r\n    if (this.opts.staticGrid === val) return this;\r\n    this.opts.staticGrid = val;\r\n    this.engine.nodes.forEach(n => this._prepareDragDropByNode(n)); // either delete Drag&drop or initialize it\r\n    this._setStaticClass();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.\r\n   * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)\r\n   * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.\r\n   */\r\n  public update(els: GridStackElement, opt: GridStackWidget): GridStack {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update({x, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1;\r\n      opt = { x:a[i++], y:a[i++], w:a[i++], h:a[i++] };\r\n      return this.update(els, opt);\r\n    }\r\n\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (!el || !el.gridstackNode) return;\r\n      let n = el.gridstackNode;\r\n      let w = {...opt}; // make a copy we can modify in case they re-use it or multiple items\r\n      delete w.autoPosition;\r\n\r\n      // move/resize widget if anything changed\r\n      let keys = ['x', 'y', 'w', 'h'];\r\n      let m: GridStackWidget;\r\n      if (keys.some(k => w[k] !== undefined && w[k] !== n[k])) {\r\n        m = {};\r\n        keys.forEach(k => {\r\n          m[k] = (w[k] !== undefined) ? w[k] : n[k];\r\n          delete w[k];\r\n        });\r\n      }\r\n      // for a move as well IFF there is any min/max fields set\r\n      if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {\r\n        m = {}; // will use node position but validate values\r\n      }\r\n\r\n      // check for content changing\r\n      if (w.content) {\r\n        let sub = el.querySelector('.grid-stack-item-content');\r\n        if (sub && sub.innerHTML !== w.content) {\r\n          sub.innerHTML = w.content;\r\n        }\r\n        delete w.content;\r\n      }\r\n\r\n      // any remaining fields are assigned, but check for dragging changes, resize constrain\r\n      let changed = false;\r\n      let ddChanged = false;\r\n      for (const key in w) {\r\n        if (key[0] !== '_' && n[key] !== w[key]) {\r\n          n[key] = w[key];\r\n          changed = true;\r\n          ddChanged = ddChanged || (!this.opts.staticGrid && (key === 'noResize' || key === 'noMove' || key === 'locked'));\r\n        }\r\n      }\r\n\r\n      // finally move the widget\r\n      if (m) {\r\n        this.engine.cleanNodes()\r\n          .beginUpdate(n)\r\n          .moveNode(n, m);\r\n        this._updateContainerHeight();\r\n        this._triggerChangeEvent();\r\n        this.engine.endUpdate();\r\n      }\r\n      if (changed) { // move will only update x,y,w,h so update the rest too\r\n        this._writeAttr(el, n);\r\n      }\r\n      if (ddChanged) {\r\n        this._prepareDragDropByNode(n);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).\r\n   * @param value margin value\r\n   */\r\n  public margin(value: numberOrString): GridStack {\r\n    let isMultiValue = (typeof value === 'string' && value.split(' ').length > 1);\r\n    // check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)\r\n    if (!isMultiValue) {\r\n      let data = Utils.parseHeight(value);\r\n      if (this.opts.marginUnit === data.unit && this.opts.margin === data.h) return;\r\n    }\r\n    // re-use existing margin handling\r\n    this.opts.margin = value;\r\n    this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = undefined;\r\n    this.initMargin();\r\n\r\n    this._updateStyles(true); // true = force re-create\r\n\r\n    return this;\r\n  }\r\n\r\n  /** returns current margin number value (undefined if 4 sides don't match) */\r\n  public getMargin(): number { return this.opts.margin as number; }\r\n\r\n  /**\r\n   * Returns true if the height of the grid will be less than the vertical\r\n   * constraint. Always returns true if grid doesn't have height constraint.\r\n   * @param node contains x,y,w,h,auto-position options\r\n   *\r\n   * @example\r\n   * if (grid.willItFit(newWidget)) {\r\n   *   grid.addWidget(newWidget);\r\n   * } else {\r\n   *   alert('Not enough free space to place the widget');\r\n   * }\r\n   */\r\n  public willItFit(node: GridStackWidget): boolean {\r\n    // support legacy call for now\r\n    if (arguments.length > 1) {\r\n      console.warn('gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 0,\r\n        w: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++] };\r\n      return this.willItFit(w);\r\n    }\r\n    return this.engine.willItFit(node);\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerChangeEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    let elements = this.engine.getDirtyNodes(true); // verify they really changed\r\n    if (elements && elements.length) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(elements);\r\n      }\r\n      this._triggerEvent('change', elements);\r\n    }\r\n    this.engine.saveInitial(); // we called, now reset initial values & dirty flags\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerAddEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.addedNodes && this.engine.addedNodes.length > 0) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(this.engine.addedNodes);\r\n      }\r\n      // prevent added nodes from also triggering 'change' event (which is called next)\r\n      this.engine.addedNodes.forEach(n => { delete n._dirty; });\r\n      this._triggerEvent('added', this.engine.addedNodes);\r\n      this.engine.addedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  public _triggerRemoveEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.removedNodes && this.engine.removedNodes.length > 0) {\r\n      this._triggerEvent('removed', this.engine.removedNodes);\r\n      this.engine.removedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerEvent(name: string, data?: GridStackNode[]): GridStack {\r\n    let event = data ? new CustomEvent(name, {bubbles: false, detail: data}) : new Event(name);\r\n    this.el.dispatchEvent(event);\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to delete the current dynamic style sheet used for our layout */\r\n  private _removeStylesheet(): GridStack {\r\n\r\n    if (this._styles) {\r\n      Utils.removeStylesheet(this._styles._id);\r\n      delete this._styles;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal updated/create the CSS styles for row based layout and initial margin setting */\r\n  private _updateStyles(forceUpdate = false, maxH?: number): GridStack {\r\n    // call to delete existing one if we change cellHeight / margin\r\n    if (forceUpdate) {\r\n      this._removeStylesheet();\r\n    }\r\n\r\n    this._updateContainerHeight();\r\n\r\n    // if user is telling us they will handle the CSS themselves by setting heights to 0. Do we need this opts really ??\r\n    if (this.opts.cellHeight === 0) {\r\n      return this;\r\n    }\r\n\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let cellHeightUnit = this.opts.cellHeightUnit;\r\n    let prefix = `.${this.opts._styleSheetClass} > .${this.opts.itemClass}`;\r\n\r\n    // create one as needed\r\n    if (!this._styles) {\r\n      let id = 'gridstack-style-' + (Math.random() * 100000).toFixed();\r\n      // insert style to parent (instead of 'head' by default) to support WebComponent\r\n      let styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode as HTMLElement;\r\n      this._styles = Utils.createStylesheet(id, styleLocation);\r\n      if (!this._styles) return this;\r\n      this._styles._id = id;\r\n      this._styles._max = 0;\r\n\r\n      // these are done once only\r\n      Utils.addCSSRule(this._styles, prefix, `min-height: ${cellHeight}${cellHeightUnit}`);\r\n      // content margins\r\n      let top: string = this.opts.marginTop + this.opts.marginUnit;\r\n      let bottom: string = this.opts.marginBottom + this.opts.marginUnit;\r\n      let right: string = this.opts.marginRight + this.opts.marginUnit;\r\n      let left: string = this.opts.marginLeft + this.opts.marginUnit;\r\n      let content = `${prefix} > .grid-stack-item-content`;\r\n      let placeholder = `.${this.opts._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;\r\n      Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      // resize handles offset (to match margin)\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);\r\n    }\r\n\r\n    // now update the height specific fields\r\n    maxH = maxH || this._styles._max;\r\n    if (maxH > this._styles._max) {\r\n      let getHeight = (rows: number): string => (cellHeight * rows) + cellHeightUnit;\r\n      for (let i = this._styles._max + 1; i <= maxH; i++) { // start at 1\r\n        let h: string = getHeight(i);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-y=\"${i-1}\"]`,        `top: ${getHeight(i-1)}`); // start at 0\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-h=\"${i}\"]`,     `height: ${h}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-min-h=\"${i}\"]`, `min-height: ${h}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-max-h=\"${i}\"]`, `max-height: ${h}`);\r\n      }\r\n      this._styles._max = maxH;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _updateContainerHeight(): GridStack {\r\n    if (!this.engine || this.engine.batchMode) return this;\r\n    let row = this.getRow(); // checks for minRow already\r\n    // check for css min height\r\n    let cssMinHeight = parseInt(getComputedStyle(this.el)['min-height']);\r\n    if (cssMinHeight > 0) {\r\n      let minRow = Math.round(cssMinHeight / this.getCellHeight(true));\r\n      if (row < minRow) {\r\n        row = minRow;\r\n      }\r\n    }\r\n    this.el.setAttribute('gs-current-row', String(row));\r\n    if (row === 0) {\r\n      this.el.style.removeProperty('height');\r\n      return this;\r\n    }\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let unit = this.opts.cellHeightUnit;\r\n    if (!cellHeight) return this;\r\n    this.el.style.height = row * cellHeight + unit;\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _prepareElement(el: GridItemHTMLElement, triggerAddEvent = false, node?: GridStackNode): GridStack {\r\n    if (!node) {\r\n      el.classList.add(this.opts.itemClass);\r\n      node = this._readAttr(el);\r\n    }\r\n    el.gridstackNode = node;\r\n    node.el = el;\r\n    node.grid = this;\r\n    let copy = {...node};\r\n    node = this.engine.addNode(node, triggerAddEvent);\r\n    // write node attr back in case there was collision or we have to fix bad values during addNode()\r\n    if (!Utils.same(node, copy)) {\r\n      this._writeAttr(el, node);\r\n    }\r\n    this._prepareDragDropByNode(node);\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write position x,y,w,h attributes back to element */\r\n  private _writePosAttr(el: HTMLElement, n: GridStackPosition): GridStack {\r\n    if (n.x !== undefined && n.x !== null) { el.setAttribute('gs-x', String(n.x)); }\r\n    if (n.y !== undefined && n.y !== null) { el.setAttribute('gs-y', String(n.y)); }\r\n    if (n.w) { el.setAttribute('gs-w', String(n.w)); }\r\n    if (n.h) { el.setAttribute('gs-h', String(n.h)); }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write any default attributes back to element */\r\n  private _writeAttr(el: HTMLElement, node: GridStackWidget): GridStack {\r\n    if (!node) return this;\r\n    this._writePosAttr(el, node);\r\n\r\n    let attrs /*: GridStackWidget but strings */ = { // remaining attributes\r\n      autoPosition: 'gs-auto-position',\r\n      minW: 'gs-min-w',\r\n      minH: 'gs-min-h',\r\n      maxW: 'gs-max-w',\r\n      maxH: 'gs-max-h',\r\n      noResize: 'gs-no-resize',\r\n      noMove: 'gs-no-move',\r\n      locked: 'gs-locked',\r\n      id: 'gs-id',\r\n      resizeHandles: 'gs-resize-handles'\r\n    };\r\n    for (const key in attrs) {\r\n      if (node[key]) { // 0 is valid for x,y only but done above already and not in list anyway\r\n        el.setAttribute(attrs[key], String(node[key]));\r\n      } else {\r\n        el.removeAttribute(attrs[key]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to read any default attributes from element */\r\n  private _readAttr(el: HTMLElement): GridStackWidget {\r\n    let node: GridStackNode = {};\r\n    node.x = Utils.toNumber(el.getAttribute('gs-x'));\r\n    node.y = Utils.toNumber(el.getAttribute('gs-y'));\r\n    node.w = Utils.toNumber(el.getAttribute('gs-w'));\r\n    node.h = Utils.toNumber(el.getAttribute('gs-h'));\r\n    node.maxW = Utils.toNumber(el.getAttribute('gs-max-w'));\r\n    node.minW = Utils.toNumber(el.getAttribute('gs-min-w'));\r\n    node.maxH = Utils.toNumber(el.getAttribute('gs-max-h'));\r\n    node.minH = Utils.toNumber(el.getAttribute('gs-min-h'));\r\n    node.autoPosition = Utils.toBool(el.getAttribute('gs-auto-position'));\r\n    node.noResize = Utils.toBool(el.getAttribute('gs-no-resize'));\r\n    node.noMove = Utils.toBool(el.getAttribute('gs-no-move'));\r\n    node.locked = Utils.toBool(el.getAttribute('gs-locked'));\r\n    node.resizeHandles = el.getAttribute('gs-resize-handles');\r\n    node.id = el.getAttribute('gs-id');\r\n\r\n    // remove any key not found (null or false which is default)\r\n    for (const key in node) {\r\n      if (!node.hasOwnProperty(key)) return;\r\n      if (!node[key] && node[key] !== 0) { // 0 can be valid value (x,y only really)\r\n        delete node[key];\r\n      }\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  /** @internal */\r\n  private _setStaticClass(): GridStack {\r\n    let classes = ['grid-stack-static'];\r\n\r\n    if (this.opts.staticGrid) {\r\n      this.el.classList.add(...classes);\r\n      this.el.setAttribute('gs-static', 'true');\r\n    } else {\r\n      this.el.classList.remove(...classes);\r\n      this.el.removeAttribute('gs-static');\r\n\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * called when we are being resized by the window - check if the one Column Mode needs to be turned on/off\r\n   * and remember the prev columns we used, as well as check for auto cell height (square)\r\n   */\r\n  public onParentResize(): GridStack {\r\n    if (!this.el || !this.el.clientWidth) return; // return if we're gone or no size yet (will get called again)\r\n    let oneColumn = !this.opts.disableOneColumnMode && this.el.clientWidth <= this.opts.minWidth;\r\n    let changedOneColumn = false;\r\n\r\n    if (!this._oneColumnMode !== !oneColumn) { // use ! (negate) so we can check undefined == false vs true\r\n      this._oneColumnMode = oneColumn;\r\n      changedOneColumn = true;\r\n      if (this.opts.animate) { this.setAnimation(false); } // 1 <-> 12 is too radical, turn off animation\r\n      this.column(oneColumn ? 1 : this._prevColumn);\r\n      if (this.opts.animate) { this.setAnimation(true); }\r\n    }\r\n\r\n    // make the cells content square again\r\n    if (this._isAutoCellHeight) {\r\n      if (!changedOneColumn && this.opts.cellHeightThrottle) {\r\n        if (!this._cellHeightThrottle) {\r\n          this._cellHeightThrottle = Utils.throttle(() => this.cellHeight(), this.opts.cellHeightThrottle);\r\n        }\r\n        this._cellHeightThrottle();\r\n      } else {\r\n        // immediate update if we've changed to/from oneColumn or have no threshold\r\n        this.cellHeight();\r\n      }\r\n    }\r\n\r\n    // finally update any nested grids\r\n    this.engine.nodes.forEach(n => {\r\n      if (n.subGrid) {(n.subGrid as GridStack).onParentResize()}\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /** add or remove the window size event handler */\r\n  private _updateWindowResizeEvent(forceRemove = false): GridStack {\r\n    // only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting oneColumn (i.e. doing work)\r\n    const workTodo = (this._isAutoCellHeight || !this.opts.disableOneColumnMode) && !this.opts._isNested;\r\n\r\n    if (!forceRemove && workTodo && !this._windowResizeBind) {\r\n      this._windowResizeBind = this.onParentResize.bind(this); // so we can properly remove later\r\n      window.addEventListener('resize', this._windowResizeBind);\r\n    } else if ((forceRemove || !workTodo) && this._windowResizeBind) {\r\n      window.removeEventListener('resize', this._windowResizeBind);\r\n      delete this._windowResizeBind; // remove link to us so we can free\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal convert a potential selector into actual element */\r\n  public static getElement(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement { return Utils.getElement(els) }\r\n  /** @internal */\r\n  public static getElements(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement[] { return Utils.getElements(els) }\r\n  /** @internal */\r\n  public static getGridElement(els: GridStackElement): GridHTMLElement { return GridStack.getElement(els) }\r\n  /** @internal */\r\n  public static getGridElements(els: string): GridHTMLElement[] { return Utils.getElements(els) }\r\n\r\n  /** @internal initialize margin top/bottom/left/right and units */\r\n  private initMargin(): GridStack {\r\n\r\n    let data: HeightData;\r\n    let margin = 0;\r\n\r\n    // support passing multiple values like CSS (ex: '5px 10px 0 20px')\r\n    let margins: string[] = [];\r\n    if (typeof this.opts.margin === 'string') {\r\n      margins = this.opts.margin.split(' ')\r\n    }\r\n    if (margins.length === 2) { // top/bot, left/right like CSS\r\n      this.opts.marginTop = this.opts.marginBottom = margins[0];\r\n      this.opts.marginLeft = this.opts.marginRight = margins[1];\r\n    } else if (margins.length === 4) { // Clockwise like CSS\r\n      this.opts.marginTop = margins[0];\r\n      this.opts.marginRight = margins[1];\r\n      this.opts.marginBottom = margins[2];\r\n      this.opts.marginLeft = margins[3];\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.margin);\r\n      this.opts.marginUnit = data.unit;\r\n      margin = this.opts.margin = data.h;\r\n    }\r\n\r\n    // see if top/bottom/left/right need to be set as well\r\n    if (this.opts.marginTop === undefined) {\r\n      this.opts.marginTop = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginTop);\r\n      this.opts.marginTop = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginBottom === undefined) {\r\n      this.opts.marginBottom = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginBottom);\r\n      this.opts.marginBottom = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginRight === undefined) {\r\n      this.opts.marginRight = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginRight);\r\n      this.opts.marginRight = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginLeft === undefined) {\r\n      this.opts.marginLeft = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginLeft);\r\n      this.opts.marginLeft = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n    this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...\r\n    if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {\r\n      this.opts.margin = this.opts.marginTop; // makes it easier to check for no-ops in setMargin()\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /*\r\n   * drag&drop empty stubs that will be implemented in gridstack-dd.ts for non static grid\r\n   * so we don't incur the load unless needed.\r\n   * NOTE: had to make those methods public in order to define them else as\r\n   *   GridStack.prototype._setupAcceptWidget = function()\r\n   * maybe there is a better way ????\r\n   */\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n\r\n  /**\r\n   * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n   * Called during GridStack.init() as options, but can also be called directly (last param are cached) in case the toolbar\r\n   * is dynamically create and needs to change later.\r\n   * @param dragIn string selector (ex: '.sidebar .grid-stack-item')\r\n   * @param dragInOptions options - see DDDragInOpt. (default: {revert: 'invalid', handle: '.grid-stack-item-content', scroll: false, appendTo: 'body'}\r\n   **/\r\n  public static setupDragIn(dragIn?: string, dragInOptions?: DDDragInOpt): void { /* implemented in gridstack-dd.ts */ }\r\n\r\n  /**\r\n   * Enables/Disables moving. No-op for static grids.\r\n   * @param els widget or selector to modify.\r\n   * @param val if true widget will be draggable.\r\n   */\r\n  public movable(els: GridStackElement, val: boolean): GridStack { return this }\r\n  /**\r\n   * Enables/Disables resizing. No-op for static grids.\r\n   * @param els  widget or selector to modify\r\n   * @param val  if true widget will be resizable.\r\n   */\r\n  public resizable(els: GridStackElement, val: boolean): GridStack { return this }\r\n  /**\r\n   * Temporarily disables widgets moving/resizing.\r\n   * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n   * Note: no-op for static grid\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(false);\r\n   *  grid.enableResize(false);\r\n   */\r\n  public disable(): GridStack { return this }\r\n  /**\r\n   * Re-enables widgets moving/resizing - see disable().\r\n   * Note: no-op for static grid.\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(true);\r\n   *  grid.enableResize(true);\r\n   */\r\n  public enable(): GridStack { return this }\r\n  /**\r\n   * Enables/disables widget moving. No-op for static grids.\r\n   *\r\n   * @param doEnable\r\n   * @param includeNewWidgets will force new widgets to be draggable as per\r\n   * doEnable`s value by changing the disableDrag grid option (default: true).\r\n   */\r\n  public enableMove(doEnable: boolean, includeNewWidgets = true): GridStack { return this }\r\n  /**\r\n   * Enables/disables widget resizing. No-op for static grids.\r\n   * @param doEnable\r\n   * @param includeNewWidgets will force new widgets to be draggable as per\r\n   * doEnable`s value by changing the disableResize grid option (default: true).\r\n   */\r\n  public enableResize(doEnable: boolean, includeNewWidgets = true): GridStack { return this }\r\n\r\n  /** @internal called to add drag over support to support widgets */\r\n  public _setupAcceptWidget(): GridStack { return this }\r\n  /** @internal called to setup a trash drop zone if the user specifies it */\r\n  public _setupRemoveDrop(): GridStack { return this }\r\n  /** @internal prepares the element for drag&drop **/\r\n  public _prepareDragDropByNode(node: GridStackNode): GridStack { return this }\r\n  /** @internal handles actual drag/resize start **/\r\n  public _onStartMoving(event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void { return }\r\n  /** @internal handles actual drag/resize **/\r\n  public _dragOrResize(event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void { return }\r\n  /** @internal called when a node leaves our area (mouse out or shape outside) **/\r\n  public _leave(node: GridStackNode, el: GridItemHTMLElement, helper?: GridItemHTMLElement, dropoutEvent = false): void { return }\r\n}\r\n","// dd-base-impl.ts 4.0.0\n// (c) 2021 Alain Dumesny - see root license\nexport type EventCallback = (event: Event) => boolean|void;\nexport abstract class DDBaseImplement {\n  /** returns the enable state, but you have to call enable()/disable() to change (as other things need to happen) */\n  public get disabled(): boolean   { return this._disabled; }\n\n  /** @internal */\n  private _disabled = false;\n  /** @internal */\n  private _eventRegister: {\n    [eventName: string]: EventCallback;\n  } = {};\n\n  public on(event: string, callback: EventCallback): void {\n    this._eventRegister[event] = callback;\n  }\n\n  public off(event: string): void {\n    delete this._eventRegister[event];\n  }\n\n  public enable(): void {\n    this._disabled = false;\n  }\n\n  public disable(): void {\n    this._disabled = true;\n  }\n\n  public destroy(): void {\n    delete this._eventRegister;\n  }\n\n  public triggerEvent(eventName: string, event: Event): boolean|void {\n    if (!this.disabled && this._eventRegister && this._eventRegister[eventName])\n      return this._eventRegister[eventName](event);\n  }\n}\n\nexport interface HTMLElementExtendOpt<T> {\n  el: HTMLElement;\n  option: T;\n  updateOption(T): DDBaseImplement;\n}\n","// dd-draggable.ts 4.0.0\n// (c) 2021 Alain Dumesny - see root license\nimport { DDManager } from './dd-manager';\nimport { DDUtils } from './dd-utils';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { GridItemHTMLElement, DDUIData } from '../types';\n\n// TODO: merge with DDDragOpt ?\nexport interface DDDraggableOpt {\n  appendTo?: string | HTMLElement;\n  containment?: string | HTMLElement; // TODO: not implemented yet\n  handle?: string;\n  revert?: string | boolean | unknown; // TODO: not implemented yet\n  scroll?: boolean; // nature support by HTML5 drag drop, can't be switch to off actually\n  helper?: string | HTMLElement | ((event: Event) => HTMLElement);\n  basePosition?: 'fixed' | 'absolute';\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  drag?: (event: Event, ui: DDUIData) => void;\n}\n\ninterface DragOffset {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n  offsetLeft: number;\n  offsetTop: number;\n}\n\nexport class DDDraggable extends DDBaseImplement implements HTMLElementExtendOpt<DDDraggableOpt> {\n  public el: HTMLElement;\n  public option: DDDraggableOpt;\n  public helper: HTMLElement; // used by GridStackDDNative\n\n  /** @internal */\n  private dragOffset: DragOffset;\n  /** @internal */\n  private dragElementOriginStyle: Array<string>;\n  /** @internal */\n  private dragFollowTimer: number;\n  /** @internal */\n  private dragEl: HTMLElement;\n  /** @internal */\n  private dragging = false;\n  /** @internal */\n  private paintTimer: number;\n  /** @internal */\n  private parentOriginStylePosition: string;\n  /** @internal */\n  private helperContainment: HTMLElement;\n  /** @internal */\n  private static basePosition: 'fixed' | 'absolute' = 'absolute';\n  /** @internal #1541 can't have {passive: true} on Safari as otherwise it reverts animate back to old location on drop */\n  private static dragEventListenerOption = true; // DDUtils.isEventSupportPassiveOption ? { capture: true, passive: true } : true;\n  /** @internal */\n  private static originStyleProp = ['transition', 'pointerEvents', 'position',\n    'left', 'top', 'opacity', 'zIndex', 'width', 'height', 'willChange'];\n\n  constructor(el: HTMLElement, option: DDDraggableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = option;\n    // get the element that is actually supposed to be dragged by\n    let className = option.handle.substring(1);\n    this.dragEl = el.classList.contains(className) ? el : el.querySelector(option.handle) || el;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._dragStart = this._dragStart.bind(this);\n    this._drag = this._drag.bind(this);\n    this._dragEnd = this._dragEnd.bind(this);\n    this.enable();\n  }\n\n  public on(event: 'drag' | 'dragstart' | 'dragstop', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'drag' | 'dragstart' | 'dragstop'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    super.enable();\n    this.dragEl.draggable = true;\n    this.dragEl.addEventListener('dragstart', this._dragStart);\n    this.el.classList.remove('ui-draggable-disabled');\n    this.el.classList.add('ui-draggable');\n  }\n\n  public disable(forDestroy = false): void {\n    super.disable();\n    this.dragEl.removeAttribute('draggable');\n    this.dragEl.removeEventListener('dragstart', this._dragStart);\n    this.el.classList.remove('ui-draggable');\n    if (!forDestroy) this.el.classList.add('ui-draggable-disabled');\n  }\n\n  public destroy(): void {\n    if (this.dragging) {\n      // Destroy while dragging should remove dragend listener and manually trigger\n      // dragend, otherwise dragEnd can't perform dragstop because eventRegistry is\n      // destroyed.\n      this._dragEnd({} as DragEvent);\n    }\n    this.disable(true);\n    delete this.el;\n    delete this.helper;\n    delete this.option;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDraggableOpt): DDDraggable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    return this;\n  }\n\n  /** @internal */\n  private _dragStart(event: DragEvent): void {\n    DDManager.dragElement = this;\n    this.helper = this._createHelper(event);\n    this._setupHelperContainmentStyle();\n    this.dragOffset = this._getDragOffset(event, this.el, this.helperContainment);\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'dragstart' });\n    if (this.helper !== this.el) {\n      this._setupDragFollowNodeNotifyStart(ev);\n    } else {\n      this.dragFollowTimer = window.setTimeout(() => {\n        delete this.dragFollowTimer;\n        this._setupDragFollowNodeNotifyStart(ev);\n      }, 0);\n    }\n    this._cancelDragGhost(event);\n  }\n\n  /** @internal */\n  private _setupDragFollowNodeNotifyStart(ev: Event): DDDraggable {\n    this._setupHelperStyle();\n    document.addEventListener('dragover', this._drag, DDDraggable.dragEventListenerOption);\n    this.dragEl.addEventListener('dragend', this._dragEnd);\n    if (this.option.start) {\n      this.option.start(ev, this.ui());\n    }\n    this.dragging = true;\n    this.helper.classList.add('ui-draggable-dragging');\n    this.triggerEvent('dragstart', ev);\n    return this;\n  }\n\n  /** @internal */\n  private _drag(event: DragEvent): void {\n    // Safari: prevent default to allow drop to happen instead of reverting back (with animation) and delaying dragend #1541\n    // https://stackoverflow.com/questions/61760755/how-to-fire-dragend-event-immediately\n    event.preventDefault();\n    this._dragFollow(event);\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'drag' });\n    if (this.option.drag) {\n      this.option.drag(ev, this.ui());\n    }\n    this.triggerEvent('drag', ev);\n  }\n\n  /** @internal */\n  private _dragEnd(event: DragEvent): void {\n    if (this.dragFollowTimer) {\n      clearTimeout(this.dragFollowTimer);\n      delete this.dragFollowTimer;\n      return;\n    } else {\n      if (this.paintTimer) {\n        cancelAnimationFrame(this.paintTimer);\n      }\n      document.removeEventListener('dragover', this._drag, DDDraggable.dragEventListenerOption);\n      this.dragEl.removeEventListener('dragend', this._dragEnd);\n    }\n    this.dragging = false;\n    this.helper.classList.remove('ui-draggable-dragging');\n    this.helperContainment.style.position = this.parentOriginStylePosition || null;\n    if (this.helper === this.el) {\n      this._removeHelperStyle();\n    } else {\n      this.helper.remove();\n    }\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'dragstop' });\n    if (this.option.stop) {\n      this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\n    }\n    this.triggerEvent('dragstop', ev);\n    delete DDManager.dragElement;\n    delete this.helper;\n  }\n\n  /** @internal create a clone copy (or user defined method) of the original drag item if set */\n  private _createHelper(event: DragEvent): HTMLElement {\n    let helper = this.el;\n    if (typeof this.option.helper === 'function') {\n      helper = this.option.helper.apply(this.el, event);\n    } else if (this.option.helper === 'clone') {\n      helper = DDUtils.clone(this.el);\n    }\n    if (!document.body.contains(helper)) {\n      DDUtils.appendTo(helper, this.option.appendTo === 'parent' ? this.el.parentNode : this.option.appendTo);\n    }\n    if (helper === this.el) {\n      this.dragElementOriginStyle = DDDraggable.originStyleProp.map(prop => this.el.style[prop]);\n    }\n    return helper;\n  }\n\n  /** @internal */\n  private _setupHelperStyle(): DDDraggable {\n    this.helper.style.pointerEvents = 'none';\n    this.helper.style.width = this.dragOffset.width + 'px';\n    this.helper.style.height = this.dragOffset.height + 'px';\n    this.helper.style.willChange = 'left, top';\n    this.helper.style.transition = 'none'; // show up instantly\n    this.helper.style.position = this.option.basePosition || DDDraggable.basePosition;\n    this.helper.style.zIndex = '1000';\n    setTimeout(() => {\n      if (this.helper) {\n        this.helper.style.transition = null; // recover animation\n      }\n    }, 0);\n    return this;\n  }\n\n  /** @internal */\n  private _removeHelperStyle(): DDDraggable {\n    // don't bother restoring styles if we're gonna remove anyway...\n    let node = this.helper ? (this.helper as GridItemHTMLElement).gridstackNode : undefined;\n    if (!node || !node._isAboutToRemove) {\n      DDDraggable.originStyleProp.forEach(prop => {\n        this.helper.style[prop] = this.dragElementOriginStyle[prop] || null;\n      });\n    }\n    delete this.dragElementOriginStyle;\n    return this;\n  }\n\n  /** @internal */\n  private _dragFollow(event: DragEvent): void {\n    if (this.paintTimer) {\n      cancelAnimationFrame(this.paintTimer);\n    }\n    this.paintTimer = requestAnimationFrame(() => {\n      delete this.paintTimer;\n      const offset = this.dragOffset;\n      let containmentRect = { left: 0, top: 0 };\n      if (this.helper.style.position === 'absolute') {\n        const { left, top } = this.helperContainment.getBoundingClientRect();\n        containmentRect = { left, top };\n      }\n      this.helper.style.left = event.clientX + offset.offsetLeft - containmentRect.left + 'px';\n      this.helper.style.top = event.clientY + offset.offsetTop - containmentRect.top + 'px';\n    });\n  }\n\n  /** @internal */\n  private _setupHelperContainmentStyle(): DDDraggable {\n    this.helperContainment = this.helper.parentElement;\n    if (this.option.basePosition !== 'fixed') {\n      this.parentOriginStylePosition = this.helperContainment.style.position;\n      if (window.getComputedStyle(this.helperContainment).position.match(/static/)) {\n        this.helperContainment.style.position = 'relative';\n      }\n    }\n    return this;\n  }\n\n  /** @internal prevent the default gost image to be created (which has wrongas we move the helper/element instead\n   * (legacy jquery UI code updates the top/left of the item).\n   * TODO: maybe use mouse event instead of HTML5 drag as we have to work around it anyway, or change code to not update\n   * the actual grid-item but move the gost image around (and special case jq version) ?\n   **/\n  private _cancelDragGhost(e: DragEvent): DDDraggable {\n    /* doesn't seem to do anything...\n    let t = e.dataTransfer;\n    t.effectAllowed = 'none';\n    t.dropEffect = 'none';\n    t.setData('text', '');\n    */\n\n    // NOTE: according to spec (and required by Safari see #1540) the image has to be visible in the browser (in dom and not hidden) so make it a 1px div\n    let img = document.createElement('div');\n    img.style.width = '1px';\n    img.style.height = '1px';\n    document.body.appendChild(img);\n    e.dataTransfer.setDragImage(img, 0, 0);\n    setTimeout(() => document.body.removeChild(img)); // nuke once drag had a chance to grab this 'image'\n\n    e.stopPropagation();\n    return this;\n  }\n\n  /** @internal */\n  private _getDragOffset(event: DragEvent, el: HTMLElement, parent: HTMLElement): DragOffset {\n\n    // in case ancestor has transform/perspective css properties that change the viewpoint\n    let xformOffsetX = 0;\n    let xformOffsetY = 0;\n    if (parent) {\n      const testEl = document.createElement('div');\n      DDUtils.addElStyles(testEl, {\n        opacity: '0',\n        position: 'fixed',\n        top: 0 + 'px',\n        left: 0 + 'px',\n        width: '1px',\n        height: '1px',\n        zIndex: '-999999',\n      });\n      parent.appendChild(testEl);\n      const testElPosition = testEl.getBoundingClientRect();\n      parent.removeChild(testEl);\n      xformOffsetX = testElPosition.left;\n      xformOffsetY = testElPosition.top;\n      // TODO: scale ?\n    }\n\n    const targetOffset = el.getBoundingClientRect();\n    return {\n      left: targetOffset.left,\n      top: targetOffset.top,\n      offsetLeft: - event.clientX + targetOffset.left - xformOffsetX,\n      offsetTop: - event.clientY + targetOffset.top - xformOffsetY,\n      width: targetOffset.width,\n      height: targetOffset.height\n    };\n  }\n\n  /** @internal TODO: set to public as called by DDDroppable! */\n  public ui = (): DDUIData => {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const offset = this.helper.getBoundingClientRect();\n    return {\n      position: { //Current CSS position of the helper as { top, left } object\n        top: offset.top - containmentRect.top,\n        left: offset.left - containmentRect.left\n      }\n      /* not used by GridStack for now...\n      helper: [this.helper], //The object arr representing the helper that's being dragged.\n      offset: { top: offset.top, left: offset.left } // Current offset position of the helper as { top, left } object.\n      */\n    };\n  }\n}\n\n\n","// dd-droppable.ts 4.0.0\n// (c) 2021 Alain Dumesny - see root license\nimport { DDDraggable } from './dd-draggable';\nimport { DDManager } from './dd-manager';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { DDUtils } from './dd-utils';\n\nexport interface DDDroppableOpt {\n  accept?: string | ((el: HTMLElement) => boolean);\n  drop?: (event: DragEvent, ui) => void;\n  over?: (event: DragEvent, ui) => void;\n  out?: (event: DragEvent, ui) => void;\n}\n\nexport class DDDroppable extends DDBaseImplement implements HTMLElementExtendOpt<DDDroppableOpt> {\n\n  public accept: (el: HTMLElement) => boolean;\n  public el: HTMLElement;\n  public option: DDDroppableOpt;\n\n  /** @internal */\n  private moving: boolean;\n\n  constructor(el: HTMLElement, opts: DDDroppableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._dragEnter = this._dragEnter.bind(this);\n    this._dragOver = this._dragOver.bind(this);\n    this._dragLeave = this._dragLeave.bind(this);\n    this._drop = this._drop.bind(this);\n\n    this.el.classList.add('ui-droppable');\n    this.el.addEventListener('dragenter', this._dragEnter);\n    this._setupAccept();\n  }\n\n  public on(event: 'drop' | 'dropover' | 'dropout', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'drop' | 'dropover' | 'dropout'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (!this.disabled) return;\n    super.enable();\n    this.el.classList.remove('ui-droppable-disabled');\n    this.el.addEventListener('dragenter', this._dragEnter);\n  }\n\n  public disable(forDestroy=false): void {\n    if (this.disabled) return;\n    super.disable();\n    if (!forDestroy) this.el.classList.add('ui-droppable-disabled');\n    this.el.removeEventListener('dragenter', this._dragEnter);\n  }\n\n  public destroy(): void {\n    if (this.moving) {\n      this._removeLeaveCallbacks();\n    } \n    this.disable(true);\n    this.el.classList.remove('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    delete this.moving;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDroppableOpt): DDDroppable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    this._setupAccept();\n    return this;\n  }\n\n  /** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */\n  private _dragEnter(event: DragEvent): void {\n    if (!this._canDrop()) return;\n    event.preventDefault();\n\n    if (this.moving) return; // ignore multiple 'dragenter' as we go over existing items\n    this.moving = true;\n\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'dropover' });\n    if (this.option.over) {\n      this.option.over(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropover', ev);\n    this.el.addEventListener('dragover', this._dragOver);\n    this.el.addEventListener('drop', this._drop);\n    this.el.addEventListener('dragleave', this._dragLeave);\n    this.el.classList.add('ui-droppable-over');\n  }\n\n  /** @internal called when an moving to drop item is being dragged over - do nothing but eat the event */\n  private _dragOver(event: DragEvent): void {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** @internal called when the item is leaving our area, stop tracking if we had moving item */\n  private _dragLeave(event: DragEvent): void {\n    if (this.el.contains(event.relatedTarget as HTMLElement)) return;\n    this._removeLeaveCallbacks();\n    if (this.moving) {\n      event.preventDefault();\n      const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'dropout' });\n      if (this.option.out) {\n        this.option.out(ev, this._ui(DDManager.dragElement))\n      }\n      this.triggerEvent('dropout', ev);\n    }\n    delete this.moving;\n  }\n\n  /** @internal item is being dropped on us - call the client drop event */\n  private _drop(event: DragEvent): void {\n    if (!this.moving) return; // should not have received event...\n    event.preventDefault();\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'drop' });\n    if (this.option.drop) {\n      this.option.drop(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('drop', ev);\n    this._removeLeaveCallbacks();\n    delete this.moving;\n  }\n\n  /** @internal called to remove callbacks when leaving or dropping */\n  private _removeLeaveCallbacks() {\n    this.el.removeEventListener('dragleave', this._dragLeave);\n    this.el.classList.remove('ui-droppable-over');\n    if (this.moving) {\n      this.el.removeEventListener('dragover', this._dragOver);\n      this.el.removeEventListener('drop', this._drop);\n    }\n    // Note: this.moving is reset by callee of this routine to control the flow\n  }\n\n  /** @internal */\n  private _canDrop(): boolean {\n    return DDManager.dragElement && (!this.accept || this.accept(DDManager.dragElement.el));\n  }\n\n  /** @internal */\n  private _setupAccept(): DDDroppable {\n    if (this.option.accept && typeof this.option.accept === 'string') {\n      this.accept = (el: HTMLElement) => {\n        return el.matches(this.option.accept as string)\n      }\n    } else {\n      this.accept = this.option.accept as ((el: HTMLElement) => boolean);\n    }\n    return this;\n  }\n\n  /** @internal */\n  private _ui(drag: DDDraggable) {\n    return {\n      draggable: drag.el,\n      ...drag.ui()\n    };\n  }\n}\n\n","// dd-elements.ts 4.0.0\n// (c) 2021 Alain Dumesny - see root license\nimport { DDResizable, DDResizableOpt } from './dd-resizable';\nimport { GridItemHTMLElement } from './../types';\nimport { DDDraggable, DDDraggableOpt } from './dd-draggable';\nimport { DDDroppable, DDDroppableOpt } from './dd-droppable';\n\nexport interface DDElementHost extends GridItemHTMLElement {\n  ddElement?: DDElement;\n}\n\nexport class DDElement {\n\n  static init(el: DDElementHost): DDElement {\n    if (!el.ddElement) { el.ddElement = new DDElement(el); }\n    return el.ddElement;\n  }\n\n  public el: DDElementHost;\n  public ddDraggable?: DDDraggable;\n  public ddDroppable?: DDDroppable;\n  public ddResizable?: DDResizable;\n\n  constructor(el: DDElementHost) {\n    this.el = el;\n  }\n\n  public on(eventName: string, callback: (event: MouseEvent) => void): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.on(eventName as 'drag' | 'dragstart' | 'dragstop', callback);\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.on(eventName as 'drop' | 'dropover' | 'dropout', callback);\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.on(eventName as 'resizestart' | 'resize' | 'resizestop', callback);\n    }\n    return this;\n  }\n\n  public off(eventName: string): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.off(eventName as 'drag' | 'dragstart' | 'dragstop');\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.off(eventName as 'drop' | 'dropover' | 'dropout');\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.off(eventName as 'resizestart' | 'resize' | 'resizestop');\n    }\n    return this;\n  }\n\n  public setupDraggable(opts: DDDraggableOpt): DDElement {\n    if (!this.ddDraggable) {\n      this.ddDraggable = new DDDraggable(this.el, opts);\n    } else {\n      this.ddDraggable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDraggable(): DDElement {\n    if (this.ddDraggable) {\n      this.ddDraggable.destroy();\n      delete this.ddDraggable;\n    }\n    return this;\n  }\n\n  public setupResizable(opts: DDResizableOpt): DDElement {\n    if (!this.ddResizable) {\n      this.ddResizable = new DDResizable(this.el, opts);\n    } else {\n      this.ddResizable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanResizable(): DDElement {\n    if (this.ddResizable) {\n      this.ddResizable.destroy();\n      delete this.ddResizable;\n    }\n    return this;\n  }\n\n  public setupDroppable(opts: DDDroppableOpt): DDElement {\n    if (!this.ddDroppable) {\n      this.ddDroppable = new DDDroppable(this.el, opts);\n    } else {\n      this.ddDroppable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDroppable(): DDElement {\n    if (this.ddDroppable) {\n      this.ddDroppable.destroy();\n      delete this.ddDroppable;\n    }\n    return this;\n  }\n}\n","// dd-manager.ts 4.0.0\n// (c) 2021 Alain Dumesny - see root license\nimport { DDDraggable } from './dd-draggable';\n\nexport class DDManager {\n  static dragElement: DDDraggable;\n}\n","// dd-resizable-handle.ts 4.0.0\n// (c) 2021 Alain Dumesny - see root license\nexport interface DDResizableHandleOpt {\n  start?: (event) => void;\n  move?: (event) => void;\n  stop?: (event) => void;\n}\n\nexport class DDResizableHandle {\n  /** @internal */\n  private el: HTMLElement;\n  /** @internal */\n  private host: HTMLElement;\n  /** @internal */\n  private option: DDResizableHandleOpt;\n  /** @internal */\n  private dir: string;\n  /** @internal true after we've moved enough pixels to start a resize */\n  private moving = false;\n  /** @internal */\n  private mouseDownEvent: MouseEvent;\n  /** @internal */\n  private static prefix = 'ui-resizable-';\n\n  constructor(host: HTMLElement, direction: string, option: DDResizableHandleOpt) {\n    this.host = host;\n    this.dir = direction;\n    this.option = option;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n\n    this._init();\n  }\n\n  /** @internal */\n  private _init(): DDResizableHandle {\n    const el = document.createElement('div');\n    el.classList.add('ui-resizable-handle');\n    el.classList.add(`${DDResizableHandle.prefix}${this.dir}`);\n    el.style.zIndex = '100';\n    el.style.userSelect = 'none';\n    this.el = el;\n    this.host.appendChild(this.el);\n    this.el.addEventListener('mousedown', this._mouseDown);\n    return this;\n  }\n\n  /** call this when resize handle needs to be removed and cleaned up */\n  public destroy(): DDResizableHandle {\n    if (this.moving) this._mouseUp(this.mouseDownEvent);\n    this.el.removeEventListener('mousedown', this._mouseDown);\n    this.host.removeChild(this.el);\n    delete this.el;\n    delete this.host;\n    return this;\n  }\n\n  /** @internal called on mouse down on us: capture move on the entire document (mouse might not stay on us) until we release the mouse */\n  private _mouseDown(e: MouseEvent): void {\n    e.preventDefault();\n    this.mouseDownEvent = e;\n    document.addEventListener('mousemove', this._mouseMove, true); // capture, not bubble\n    document.addEventListener('mouseup', this._mouseUp);\n  }\n\n  /** @internal */\n  private _mouseMove(e: MouseEvent): void {\n    let s = this.mouseDownEvent;\n    // don't start unless we've moved at least 3 pixels\n    if (!this.moving && Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 2) {\n      this.moving = true;\n      this._triggerEvent('start', this.mouseDownEvent);\n    } else if (this.moving) {\n      this._triggerEvent('move', e);\n    }\n  }\n\n  /** @internal */\n  private _mouseUp(e: MouseEvent): void {\n    if (this.moving) {\n      this._triggerEvent('stop', e);\n    }\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp);\n    delete this.moving;\n    delete this.mouseDownEvent;\n  }\n\n  /** @internal */\n  private _triggerEvent(name: string, event: MouseEvent): DDResizableHandle {\n    if (this.option[name]) this.option[name](event);\n    return this;\n  }\n}\n","// dd-resizable.ts 4.0.0\n// (c) 2021 Alain Dumesny - see root license\nimport { DDResizableHandle } from './dd-resizable-handle';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { DDUtils } from './dd-utils';\nimport { Utils } from '../utils';\nimport { DDUIData, Rect, Size } from '../types';\n\n// TODO: merge with DDDragOpt\nexport interface DDResizableOpt {\n  autoHide?: boolean;\n  handles?: string;\n  maxHeight?: number;\n  maxWidth?: number;\n  minHeight?: number;\n  minWidth?: number;\n  basePosition?: 'fixed' | 'absolute';\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  resize?: (event: Event, ui: DDUIData) => void;\n}\n\nexport class DDResizable extends DDBaseImplement implements HTMLElementExtendOpt<DDResizableOpt> {\n\n  // have to be public else complains for HTMLElementExtendOpt ?\n  public el: HTMLElement;\n  public option: DDResizableOpt;\n\n  /** @internal */\n  private handlers: DDResizableHandle[];\n  /** @internal */\n  private originalRect: Rect;\n  /** @internal */\n  private temporalRect: Rect;\n  /** @internal */\n  private scrollY: number;\n  /** @internal */\n  private scrolled: number;\n  /** @internal */\n  private scrollEl: HTMLElement;\n  /** @internal */\n  private startEvent: MouseEvent;\n  /** @internal value saved in the same order as _originStyleProp[] */\n  private elOriginStyleVal: string[];\n  /** @internal */\n  private parentOriginStylePosition: string;\n  /** @internal */\n  private static _originStyleProp = ['width', 'height', 'position', 'left', 'top', 'opacity', 'zIndex'];\n\n  constructor(el: HTMLElement, opts: DDResizableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    this.enable();\n    this._setupAutoHide();\n    this._setupHandlers();\n  }\n\n  public on(event: 'resizestart' | 'resize' | 'resizestop', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'resizestart' | 'resize' | 'resizestop'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    super.enable();\n    this.el.classList.add('ui-resizable');\n    this.el.classList.remove('ui-resizable-disabled');\n  }\n\n  public disable(): void {\n    super.disable();\n    this.el.classList.add('ui-resizable-disabled');\n    this.el.classList.remove('ui-resizable');\n  }\n\n  public destroy(): void {\n    this._removeHandlers();\n    if (this.option.autoHide) {\n      this.el.removeEventListener('mouseover', this._showHandlers);\n      this.el.removeEventListener('mouseout', this._hideHandlers);\n    }\n    this.el.classList.remove('ui-resizable');\n    delete this.el;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDResizableOpt): DDResizable {\n    let updateHandles = (opts.handles && opts.handles !== this.option.handles);\n    let updateAutoHide = (opts.autoHide && opts.autoHide !== this.option.autoHide);\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    if (updateHandles) {\n      this._removeHandlers();\n      this._setupHandlers();\n    }\n    if (updateAutoHide) {\n      this._setupAutoHide();\n    }\n    return this;\n  }\n\n  /** @internal */\n  private _setupAutoHide(): DDResizable {\n    if (this.option.autoHide) {\n      this.el.classList.add('ui-resizable-autohide');\n      // use mouseover/mouseout instead of mouseenter/mouseleave to get better performance;\n      this.el.addEventListener('mouseover', this._showHandlers);\n      this.el.addEventListener('mouseout', this._hideHandlers);\n    } else {\n      this.el.classList.remove('ui-resizable-autohide');\n      this.el.removeEventListener('mouseover', this._showHandlers);\n      this.el.removeEventListener('mouseout', this._hideHandlers);\n    }\n    return this;\n  }\n\n  /** @internal */\n  private _showHandlers = () => {\n    this.el.classList.remove('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  private _hideHandlers = () => {\n    this.el.classList.add('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  private _setupHandlers(): DDResizable {\n    let handlerDirection = this.option.handles || 'e,s,se';\n    if (handlerDirection === 'all') {\n      handlerDirection = 'n,e,s,w,se,sw,ne,nw';\n    }\n    this.handlers = handlerDirection.split(',')\n      .map(dir => dir.trim())\n      .map(dir => new DDResizableHandle(this.el, dir, {\n        start: (event: MouseEvent) => {\n          this._resizeStart(event);\n        },\n        stop: (event: MouseEvent) => {\n          this._resizeStop(event);\n        },\n        move: (event: MouseEvent) => {\n          this._resizing(event, dir);\n        }\n      }));\n    return this;\n  }\n\n  /** @internal */\n  private _resizeStart(event: MouseEvent): DDResizable {\n    this.originalRect = this.el.getBoundingClientRect();\n    this.scrollEl = Utils.getScrollParent(this.el);\n    this.scrollY = this.scrollEl.scrollTop;\n    this.startEvent = event;\n    this._setupHelper();\n    this._applyChange();\n    const ev = DDUtils.initEvent<MouseEvent>(event, { type: 'resizestart', target: this.el });\n    if (this.option.start) {\n      this.option.start(ev, this._ui());\n    }\n    this.el.classList.add('ui-resizable-resizing');\n    this.triggerEvent('resizestart', ev);\n    return this;\n  }\n\n  /** @internal */\n  private _resizing(event: MouseEvent, dir: string): DDResizable {\n    this.scrolled = this.scrollEl.scrollTop - this.scrollY;\n    this.temporalRect = this._getChange(event, dir);\n    this._applyChange();\n    const ev = DDUtils.initEvent<MouseEvent>(event, { type: 'resize', target: this.el });\n    if (this.option.resize) {\n      this.option.resize(ev, this._ui());\n    }\n    this.triggerEvent('resize', ev);\n    return this;\n  }\n\n  /** @internal */\n  private _resizeStop(event: MouseEvent): DDResizable {\n    const ev = DDUtils.initEvent<MouseEvent>(event, { type: 'resizestop', target: this.el });\n    if (this.option.stop) {\n      this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\n    }\n    this.el.classList.remove('ui-resizable-resizing');\n    this.triggerEvent('resizestop', ev);\n    this._cleanHelper();\n    delete this.startEvent;\n    delete this.originalRect;\n    delete this.temporalRect;\n    delete this.scrollY;\n    delete this.scrolled;\n    return this;\n  }\n\n  /** @internal */\n  private _setupHelper(): DDResizable {\n    this.elOriginStyleVal = DDResizable._originStyleProp.map(prop => this.el.style[prop]);\n    this.parentOriginStylePosition = this.el.parentElement.style.position;\n    if (window.getComputedStyle(this.el.parentElement).position.match(/static/)) {\n      this.el.parentElement.style.position = 'relative';\n    }\n    this.el.style.position = this.option.basePosition || 'absolute'; // or 'fixed'\n    this.el.style.opacity = '0.8';\n    this.el.style.zIndex = '1000';\n    return this;\n  }\n\n  /** @internal */\n  private _cleanHelper(): DDResizable {\n    DDResizable._originStyleProp.forEach((prop, i) => {\n      this.el.style[prop] = this.elOriginStyleVal[i] || null;\n    });\n    this.el.parentElement.style.position = this.parentOriginStylePosition || null;\n    return this;\n  }\n\n  /** @internal */\n  private _getChange(event: MouseEvent, dir: string): Rect {\n    const oEvent = this.startEvent;\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n    \n    const offsetX = event.clientX - oEvent.clientX;\n    const offsetY = event.clientY - oEvent.clientY;\n\n    if (dir.indexOf('e') > -1) {\n      newRect.width += event.clientX - oEvent.clientX;\n    }\n    if (dir.indexOf('s') > -1) {\n      newRect.height += event.clientY - oEvent.clientY;\n    }\n    if (dir.indexOf('w') > -1) {\n      newRect.width -= offsetX;\n      newRect.left += offsetX;\n    }\n    if (dir.indexOf('n') > -1) {\n      newRect.height -= offsetY;\n      newRect.top += offsetY\n    }\n    const reshape = this._getReShapeSize(newRect.width, newRect.height);\n    if (newRect.width !== reshape.width) {\n      if (dir.indexOf('w') > -1) {\n        newRect.left += newRect.width - reshape.width;\n      }\n      newRect.width = reshape.width;\n    }\n    if (newRect.height !== reshape.height) {\n      if (dir.indexOf('n') > -1) {\n        newRect.top += newRect.height - reshape.height;\n      }\n      newRect.height = reshape.height;\n    }\n    return newRect;\n  }\n\n  /** @internal */\n  private _getReShapeSize(oWidth: number, oHeight: number): Size {\n    const maxWidth = this.option.maxWidth || Number.MAX_SAFE_INTEGER;\n    const minWidth = this.option.minWidth || oWidth;\n    const maxHeight = this.option.maxHeight || Number.MAX_SAFE_INTEGER;\n    const minHeight = this.option.minHeight || oHeight;\n    const width = Math.min(maxWidth, Math.max(minWidth, oWidth));\n    const height = Math.min(maxHeight, Math.max(minHeight, oHeight));\n    return { width, height };\n  }\n\n  /** @internal */\n  private _applyChange(): DDResizable {\n    let containmentRect = { left: 0, top: 0, width: 0, height: 0 };\n    if (this.el.style.position === 'absolute') {\n      const containmentEl = this.el.parentElement;\n      const { left, top } = containmentEl.getBoundingClientRect();\n      containmentRect = { left, top, width: 0, height: 0 };\n    }\n    if (!this.temporalRect) return this;\n    Object.keys(this.temporalRect).forEach(key => {\n      const value = this.temporalRect[key];\n      this.el.style[key] = value - containmentRect[key] + 'px';\n    });\n    return this;\n  }\n\n  /** @internal */\n  private _removeHandlers(): DDResizable {\n    this.handlers.forEach(handle => handle.destroy());\n    delete this.handlers;\n    return this;\n  }\n\n  /** @internal */\n  private _ui = (): DDUIData => {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n    const rect = this.temporalRect || newRect;\n    return {\n      position: {\n        left: rect.left - containmentRect.left,\n        top: rect.top - containmentRect.top\n      },\n      size: {\n        width: rect.width,\n        height: rect.height\n      }\n      /* Gridstack ONLY needs position set above... keep around in case.\n      element: [this.el], // The object representing the element to be resized\n      helper: [], // TODO: not support yet - The object representing the helper that's being resized\n      originalElement: [this.el],// we don't wrap here, so simplify as this.el //The object representing the original element before it is wrapped\n      originalPosition: { // The position represented as { left, top } before the resizable is resized\n        left: this.originalRect.left - containmentRect.left,\n        top: this.originalRect.top - containmentRect.top\n      },\n      originalSize: { // The size represented as { width, height } before the resizable is resized\n        width: this.originalRect.width,\n        height: this.originalRect.height\n      }\n      */\n    };\n  }\n}\n","// dd-utils.ts 4.0.0\n// (c) 2021 Alain Dumesny - see root license\nexport class DDUtils {\n\n  public static isEventSupportPassiveOption = ((() => {\n    let supportsPassive = false;\n    let passiveTest = () => {\n      // do nothing\n    };\n    document.addEventListener('test', passiveTest, {\n      get passive() {\n        supportsPassive = true;\n        return true;\n      }\n    });\n    document.removeEventListener('test', passiveTest);\n    return supportsPassive;\n  })());\n\n  public static clone(el: HTMLElement): HTMLElement {\n    const node = el.cloneNode(true) as HTMLElement;\n    node.removeAttribute('id');\n    return node;\n  }\n\n  public static appendTo(el: HTMLElement, parent: string | HTMLElement | Node): void {\n    let parentNode: HTMLElement;\n    if (typeof parent === 'string') {\n      parentNode = document.querySelector(parent as string);\n    } else {\n      parentNode = parent as HTMLElement;\n    }\n    if (parentNode) {\n      parentNode.appendChild(el);\n    }\n  }\n\n  public static setPositionRelative(el: HTMLElement): void {\n    if (!(/^(?:r|a|f)/).test(window.getComputedStyle(el).position)) {\n      el.style.position = \"relative\";\n    }\n  }\n\n  public static addElStyles(el: HTMLElement, styles: { [prop: string]: string | string[] }): void {\n    if (styles instanceof Object) {\n      for (const s in styles) {\n        if (styles.hasOwnProperty(s)) {\n          if (Array.isArray(styles[s])) {\n            // support fallback value\n            (styles[s] as string[]).forEach(val => {\n              el.style[s] = val;\n            });\n          } else {\n            el.style[s] = styles[s];\n          }\n        }\n      }\n    }\n  }\n\n  public static initEvent<T>(e: DragEvent | MouseEvent, info: { type: string; target?: EventTarget }): T {\n    const evt = { type: info.type };\n    const obj = {\n      button: 0,\n      which: 0,\n      buttons: 1,\n      bubbles: true,\n      cancelable: true,\n      target: info.target ? info.target : e.target\n    };\n    // don't check for `instanceof DragEvent` as Safari use MouseEvent #1540\n    if ((e as DragEvent).dataTransfer) {\n      evt['dataTransfer'] = (e as DragEvent).dataTransfer; // workaround 'readonly' field.\n    }\n    ['altKey','ctrlKey','metaKey','shiftKey'].forEach(p => evt[p] = e[p]); // keys\n    ['pageX','pageY','clientX','clientY','screenX','screenY'].forEach(p => evt[p] = e[p]); // point info\n    return {...evt, ...obj} as unknown as T;\n  }\n}","// gridstack-dd-native.ts 4.0.0\n// (c) 2021 Alain Dumesny - see root license\nimport { DDManager } from './dd-manager';\nimport { DDElement, DDElementHost } from './dd-element';\n\nimport { GridStackElement } from '../gridstack';\nimport { GridStackDD, DDOpts, DDKey, DDDropOpt, DDCallback, DDValue } from '../gridstack-dd';\nimport { GridItemHTMLElement, DDDragInOpt } from '../types';\nimport { Utils } from '../utils';\n\n// export our base class (what user should use) and all associated types\nexport * from '../gridstack-dd';\n\n/**\n * HTML 5 Native DragDrop based drag'n'drop plugin.\n */\nexport class GridStackDDNative extends GridStackDD {\n\n  public resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDDNative {\n    this._getDDElements(el).forEach(dEl => {\n      if (opts === 'disable' || opts === 'enable') {\n        dEl.ddResizable && dEl.ddResizable[opts](); // can't create DD as it requires options for setupResizable()\n      } else if (opts === 'destroy') {\n        dEl.ddResizable && dEl.cleanResizable();\n      } else if (opts === 'option') {\n        dEl.setupResizable({ [key]: value });\n      } else {\n        const grid = dEl.el.gridstackNode.grid;\n        let handles = dEl.el.getAttribute('gs-resize-handles') ? dEl.el.getAttribute('gs-resize-handles') : grid.opts.resizable.handles;\n        dEl.setupResizable({\n          ...grid.opts.resizable,\n          ...{ handles: handles },\n          ...{\n            start: opts.start,\n            stop: opts.stop,\n            resize: opts.resize\n          }\n        });\n      }\n    });\n    return this;\n  }\n\n  public draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDDNative {\n    this._getDDElements(el).forEach(dEl => {\n      if (opts === 'disable' || opts === 'enable') {\n        dEl.ddDraggable && dEl.ddDraggable[opts](); // can't create DD as it requires options for setupDraggable()\n      } else if (opts === 'destroy') {\n        dEl.ddDraggable && dEl.cleanDraggable();\n      } else if (opts === 'option') {\n        dEl.setupDraggable({ [key]: value });\n      } else {\n        const grid = dEl.el.gridstackNode.grid;\n        dEl.setupDraggable({\n          ...grid.opts.draggable,\n          ...{\n            containment: (grid.opts._isNested && !grid.opts.dragOut)\n              ? grid.el.parentElement\n              : (grid.opts.draggable.containment || null),\n            start: opts.start,\n            stop: opts.stop,\n            drag: opts.drag\n          }\n        });\n      }\n    });\n    return this;\n  }\n\n  public dragIn(el: GridStackElement, opts: DDDragInOpt): GridStackDDNative {\n    this._getDDElements(el).forEach(dEl => dEl.setupDraggable(opts));\n    return this;\n  }\n\n  public droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): GridStackDDNative {\n    if (typeof opts.accept === 'function' && !opts._accept) {\n      opts._accept = opts.accept;\n      opts.accept = (el) => opts._accept(el);\n    }\n    this._getDDElements(el).forEach(dEl => {\n      if (opts === 'disable' || opts === 'enable') {\n        dEl.ddDroppable && dEl.ddDroppable[opts]();\n      } else if (opts === 'destroy') {\n        if (dEl.ddDroppable) { // error to call destroy if not there\n          dEl.cleanDroppable();\n        }\n      } else if (opts === 'option') {\n        dEl.setupDroppable({ [key]: value });\n      } else {\n        dEl.setupDroppable(opts);\n      }\n    });\n    return this;\n  }\n\n  /** true if element is droppable */\n  public isDroppable(el: DDElementHost): boolean {\n    return el && el.ddElement && el.ddElement.ddDroppable && !el.ddElement.ddDroppable.disabled;\n  }\n\n  /** true if element is draggable */\n  public isDraggable(el: DDElementHost): boolean {\n    return el && el.ddElement && el.ddElement.ddDraggable && !el.ddElement.ddDraggable.disabled;\n  }\n\n  /** true if element is draggable */\n  public isResizable(el: DDElementHost): boolean {\n    return el && el.ddElement && el.ddElement.ddResizable && !el.ddElement.ddResizable.disabled;\n  }\n\n  public on(el: GridItemHTMLElement, name: string, callback: DDCallback): GridStackDDNative {\n    this._getDDElements(el).forEach(dEl =>\n      dEl.on(name, (event: Event) => {\n        callback(\n          event,\n          DDManager.dragElement ? DDManager.dragElement.el : event.target as GridItemHTMLElement,\n          DDManager.dragElement ? DDManager.dragElement.helper : null)\n      })\n    );\n    return this;\n  }\n\n  public off(el: GridItemHTMLElement, name: string): GridStackDD {\n    this._getDDElements(el).forEach(dEl => dEl.off(name));\n    return this;\n  }\n\n  /** @internal returns a list of DD elements, creating them on the fly by default */\n  private _getDDElements(els: GridStackElement, create = true): DDElement[] {\n    let hosts = Utils.getElements(els) as DDElementHost[];\n    if (!hosts.length) return [];\n    let list = hosts.map(e => e.ddElement || (create ? DDElement.init(e) : null));\n    if (!create) { list.filter(d => d); } // remove nulls\n    return list;\n  }\n}\n\n// finally register ourself\nGridStackDD.registerPlugin(GridStackDDNative);\n","// index.html5.ts 4.0.0 - everything you need for a Grid that uses HTML5 native drag&drop (work in progress)\r\n// (c) 2021 Alain Dumesny - see root license\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\nexport * from './gridstack-ddi';\r\nexport * from './gridstack';\r\n\r\nexport * from './h5/gridstack-dd-native';\r\n\r\n// declare module 'gridstack'; for umd ?\r\n","// utils.ts 4.0.0\r\n// (c) 2021 Alain Dumesny - see root license\r\n\r\nimport { GridStackElement, GridStackNode, GridStackOptions, numberOrString, GridStackPosition } from './types';\r\n\r\nexport interface HeightData {\r\n  h: number;\r\n  unit: string;\r\n}\r\n\r\n/** checks for obsolete method names */\r\n// eslint-disable-next-line\r\nexport function obsolete(self, f, oldName: string, newName: string, rev: string): (...args: any[]) => any {\r\n  let wrapper = (...args) => {\r\n    console.warn('gridstack.js: Function `' + oldName + '` is deprecated in ' + rev + ' and has been replaced ' +\r\n    'with `' + newName + '`. It will be **completely** removed in v1.0');\r\n    return f.apply(self, args);\r\n  }\r\n  wrapper.prototype = f.prototype;\r\n  return wrapper;\r\n}\r\n\r\n/** checks for obsolete grid options (can be used for any fields, but msg is about options) */\r\nexport function obsoleteOpts(opts: GridStackOptions, oldName: string, newName: string, rev: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    opts[newName] = opts[oldName];\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **completely** removed in v1.0');\r\n  }\r\n}\r\n\r\n/** checks for obsolete grid options which are gone */\r\nexport function obsoleteOptsDel(opts: GridStackOptions, oldName: string, rev: string, info: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + info);\r\n  }\r\n}\r\n\r\n/** checks for obsolete Jquery element attributes */\r\nexport function obsoleteAttr(el: HTMLElement, oldName: string, newName: string, rev: string): void {\r\n  let oldAttr = el.getAttribute(oldName);\r\n  if (oldAttr !== null) {\r\n    el.setAttribute(newName, oldAttr);\r\n    console.warn('gridstack.js: attribute `' + oldName + '`=' + oldAttr + ' is deprecated on this object in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **completely** removed in v1.0');\r\n  }\r\n}\r\n\r\n/**\r\n * Utility methods\r\n */\r\nexport class Utils {\r\n\r\n  /** convert a potential selector into actual list of html elements */\r\n  static getElements(els: GridStackElement): HTMLElement[] {\r\n    if (typeof els === 'string') {\r\n      let list = document.querySelectorAll(els);\r\n      if (!list.length && els[0] !== '.' && els[0] !== '#') {\r\n        list = document.querySelectorAll('.' + els);\r\n        if (!list.length) { list = document.querySelectorAll('#' + els) }\r\n      }\r\n      return Array.from(list) as HTMLElement[];\r\n    }\r\n    return [els];\r\n  }\r\n\r\n  /** convert a potential selector into actual single element */\r\n  static getElement(els: GridStackElement): HTMLElement {\r\n    if (typeof els === 'string') {\r\n      if (!els.length) return null;\r\n      if (els[0] === '#') {\r\n        return document.getElementById(els.substring(1));\r\n      }\r\n      if (els[0] === '.' || els[0] === '[') {\r\n        return document.querySelector(els);\r\n      }\r\n\r\n      // if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS\r\n      if(!isNaN(+els[0])) { // start with digit\r\n        return document.getElementById(els);\r\n      }\r\n\r\n      // finally try string, then id then class\r\n      let el = document.querySelector(els);\r\n      if (!el) { el = document.getElementById(els) }\r\n      if (!el) { el = document.querySelector('.' + els) }\r\n      return el as HTMLElement;\r\n    }\r\n    return els;\r\n  }\r\n\r\n  /** returns true if a and b overlap */\r\n  static isIntercepted(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return !(a.y >= b.y + b.h || a.y + a.h <= b.y || a.x + a.w <= b.x || a.x >= b.x + b.w);\r\n  }\r\n\r\n  /** returns true if a and b touch edges or corners */\r\n  static isTouching(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return Utils.isIntercepted(a, {x: b.x-0.5, y: b.y-0.5, w: b.w+1, h: b.h+1})\r\n  }\r\n  /**\r\n   * Sorts array of nodes\r\n   * @param nodes array to sort\r\n   * @param dir 1 for asc, -1 for desc (optional)\r\n   * @param width width of the grid. If undefined the width will be calculated automatically (optional).\r\n   **/\r\n  static sort(nodes: GridStackNode[], dir?: -1 | 1, column?: number): GridStackNode[] {\r\n    column = column || nodes.reduce((col, n) => Math.max(n.x + n.w, col), 0) || 12;\r\n    if (dir === -1)\r\n      return nodes.sort((a, b) => (b.x + b.y * column)-(a.x + a.y * column));\r\n    else\r\n      return nodes.sort((b, a) => (b.x + b.y * column)-(a.x + a.y * column));\r\n  }\r\n\r\n  /**\r\n   * creates a style sheet with style id under given parent\r\n   * @param id will set the 'gs-style-id' attribute to that id\r\n   * @param parent to insert the stylesheet as first child,\r\n   * if none supplied it will be appended to the document head instead.\r\n   */\r\n  static createStylesheet(id: string, parent?: HTMLElement): CSSStyleSheet {\r\n    let style: HTMLStyleElement = document.createElement('style');\r\n    style.setAttribute('type', 'text/css');\r\n    style.setAttribute('gs-style-id', id);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if ((style as any).styleSheet) { // TODO: only CSSImportRule have that and different beast ??\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (style as any).styleSheet.cssText = '';\r\n    } else {\r\n      style.appendChild(document.createTextNode('')); // WebKit hack\r\n    }\r\n    if (!parent) {\r\n      // default to head\r\n      parent = document.getElementsByTagName('head')[0];\r\n      parent.appendChild(style);\r\n    } else {\r\n      parent.insertBefore(style, parent.firstChild);\r\n    }\r\n    return style.sheet as CSSStyleSheet;\r\n  }\r\n\r\n  /** removed the given stylesheet id */\r\n  static removeStylesheet(id: string): void {\r\n    let el = document.querySelector('STYLE[gs-style-id=' + id + ']');\r\n    if (el && el.parentNode) el.remove();\r\n  }\r\n\r\n  /** inserts a CSS rule */\r\n  static addCSSRule(sheet: CSSStyleSheet, selector: string, rules: string): void {\r\n    if (typeof sheet.addRule === 'function') {\r\n      sheet.addRule(selector, rules);\r\n    } else if (typeof sheet.insertRule === 'function') {\r\n      sheet.insertRule(`${selector}{${rules}}`);\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  static toBool(v: unknown): boolean {\r\n    if (typeof v === 'boolean') {\r\n      return v;\r\n    }\r\n    if (typeof v === 'string') {\r\n      v = v.toLowerCase();\r\n      return !(v === '' || v === 'no' || v === 'false' || v === '0');\r\n    }\r\n    return Boolean(v);\r\n  }\r\n\r\n  static toNumber(value: null | string): number {\r\n    return (value === null || value.length === 0) ? undefined : Number(value);\r\n  }\r\n\r\n  static parseHeight(val: numberOrString): HeightData {\r\n    let h: number;\r\n    let unit = 'px';\r\n    if (typeof val === 'string') {\r\n      let match = val.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);\r\n      if (!match) {\r\n        throw new Error('Invalid height');\r\n      }\r\n      unit = match[2] || 'px';\r\n      h = parseFloat(match[1]);\r\n    } else {\r\n      h = val;\r\n    }\r\n    return { h, unit };\r\n  }\r\n\r\n  /** copies unset fields in target to use the given default sources values */\r\n  // eslint-disable-next-line\r\n  static defaults(target, ...sources): {} {\r\n\r\n    sources.forEach(source => {\r\n      for (const key in source) {\r\n        if (!source.hasOwnProperty(key)) return;\r\n        if (target[key] === null || target[key] === undefined) {\r\n          target[key] = source[key];\r\n        } else if (typeof source[key] === 'object' && typeof target[key] === 'object') {\r\n          // property is an object, recursively add it's field over... #1373\r\n          this.defaults(target[key], source[key]);\r\n        }\r\n      }\r\n    });\r\n\r\n    return target;\r\n  }\r\n\r\n  /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */\r\n  static same(a: unknown, b: unknown): boolean {\r\n    if (typeof a !== 'object')  return a == b;\r\n    if (typeof a !== typeof b) return false;\r\n    // else we have object, check just 1 level deep for being same things...\r\n    if (Object.keys(a).length !== Object.keys(b).length) return false;\r\n    for (const key in a) {\r\n      if (a[key] !== b[key]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /* copies over b size & position */\r\n  static copyPos(a: GridStackPosition, b: GridStackPosition): GridStackPosition {\r\n    a.x = b.x;\r\n    a.y = b.y;\r\n    a.w = b.w;\r\n    a.h = b.h;\r\n    return a;\r\n  }\r\n\r\n  /* true if a and b has same size & position */\r\n  static samePos(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return a && b && a.x === b.x && a.y === b.y && a.w === b.w && a.h === b.h;\r\n  }\r\n\r\n  /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */\r\n  static removeInternalAndSame(a: unknown, b: unknown):void {\r\n    if (typeof a !== 'object' || typeof b !== 'object') return;\r\n    for (let key in a) {\r\n      let val = a[key];\r\n      if (val && typeof val === 'object') {\r\n        for (let i in val) {\r\n          if (val[i] === b[key][i] || i[0] === '_') { delete val[i] }\r\n        }\r\n        if (!Object.keys(val).length) { delete a[key] }\r\n      } else if (val === b[key] || key[0] === '_') { delete a[key] }\r\n    }\r\n  }\r\n\r\n  /** return the closest parent matching the given class */\r\n  static closestByClass(el: HTMLElement, name: string): HTMLElement {\r\n\r\n    while(el = el.parentElement) {\r\n      if (el.classList.contains(name)) return el;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** delay calling the given function for given delay, preventing new calls from happening while waiting */\r\n  static throttle(func: () => void, delay: number): () => void {\r\n    let isWaiting = false;\r\n    return (...args) => {\r\n      if (!isWaiting) {\r\n        isWaiting = true;\r\n        setTimeout(() => { func(...args); isWaiting = false; }, delay);\r\n      }\r\n    }\r\n  }\r\n\r\n  static removePositioningStyles(el: HTMLElement): void {\r\n    let style = el.style;\r\n    if (style.position) {\r\n      style.removeProperty('position');\r\n    }\r\n    if (style.left) {\r\n      style.removeProperty('left');\r\n    }\r\n    if (style.top) {\r\n      style.removeProperty('top');\r\n    }\r\n    if (style.width) {\r\n      style.removeProperty('width');\r\n    }\r\n    if (style.height) {\r\n      style.removeProperty('height');\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  static getScrollParent(el: HTMLElement): HTMLElement {\r\n    if (el === null) return document.documentElement;\r\n    const style = getComputedStyle(el);\r\n    const overflowRegex = /(auto|scroll)/;\r\n\r\n    if (overflowRegex.test(style.overflow + style.overflowY)) {\r\n      return el;\r\n    } else {\r\n      return this.getScrollParent(el.parentElement);\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  static updateScrollPosition(el: HTMLElement, position: {top: number}, distance: number): void {\r\n    // is widget in view?\r\n    let rect = el.getBoundingClientRect();\r\n    let innerHeightOrClientHeight = (window.innerHeight || document.documentElement.clientHeight);\r\n    if (rect.top < 0 ||\r\n      rect.bottom > innerHeightOrClientHeight\r\n    ) {\r\n      // set scrollTop of first parent that scrolls\r\n      // if parent is larger than el, set as low as possible\r\n      // to get entire widget on screen\r\n      let offsetDiffDown = rect.bottom - innerHeightOrClientHeight;\r\n      let offsetDiffUp = rect.top;\r\n      let scrollEl = this.getScrollParent(el);\r\n      if (scrollEl !== null) {\r\n        let prevScroll = scrollEl.scrollTop;\r\n        if (rect.top < 0 && distance < 0) {\r\n          // moving up\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;\r\n          }\r\n        } else if (distance > 0) {\r\n          // moving down\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;\r\n          }\r\n        }\r\n        // move widget y by amount scrolled\r\n        position.top += scrollEl.scrollTop - prevScroll;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal Function used to scroll the page.\r\n   *\r\n   * @param event `MouseEvent` that triggers the resize\r\n   * @param el `HTMLElement` that's being resized\r\n   * @param distance Distance from the V edges to start scrolling\r\n   */\r\n  static updateScrollResize(event: MouseEvent, el: HTMLElement, distance: number): void {\r\n    const scrollEl = this.getScrollParent(el);\r\n    const height = scrollEl.clientHeight;\r\n\r\n    const top = event.clientY < distance;\r\n    const bottom = event.clientY > height - distance;\r\n\r\n    if (top) {\r\n      // This also can be done with a timeout to keep scrolling while the mouse is\r\n      // in the scrolling zone. (will have smoother behavior)\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: event.clientY - distance});\r\n    } else if (bottom) {\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: distance - (height - event.clientY)});\r\n    }\r\n  }\r\n}\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(117);\n"],"sourceRoot":""}