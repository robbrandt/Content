{"version":3,"sources":["webpack://GridStack/webpack/universalModuleDefinition","webpack://GridStack/./src/gridstack-dd.ts","webpack://GridStack/./src/gridstack-ddi.ts","webpack://GridStack/./src/gridstack-engine.ts","webpack://GridStack/./src/gridstack-h5.ts","webpack://GridStack/./src/gridstack.ts","webpack://GridStack/./src/h5/dd-base-impl.ts","webpack://GridStack/./src/h5/dd-draggable.ts","webpack://GridStack/./src/h5/dd-droppable.ts","webpack://GridStack/./src/h5/dd-element.ts","webpack://GridStack/./src/h5/dd-manager.ts","webpack://GridStack/./src/h5/dd-resizable-handle.ts","webpack://GridStack/./src/h5/dd-resizable.ts","webpack://GridStack/./src/h5/dd-utils.ts","webpack://GridStack/./src/h5/gridstack-dd-native.ts","webpack://GridStack/./src/utils.ts","webpack://GridStack/webpack/bootstrap","webpack://GridStack/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","GridStackDD","GridStackDDI","get","el","this","draggable","resizable","gridstackNode","_initDD","GridStack","prototype","_setupAcceptWidget","opts","staticGrid","gridPos","cellHeight","cellWidth","onDrag","event","helper","node","rec","getBoundingClientRect","left","top","ui","position","_temporaryRemoved","x","Math","max","round","y","autoPosition","engine","nodeBoundFix","willItFit","off","_willFitPos","Utils","copyPos","_onStartMoving","_dragOrResize","droppable","accept","grid","acceptWidgets","canAccept","selector","matches","maxRow","n","w","h","minW","minH","on","_leave","box","document","documentElement","scrollTop","getCellHeight","_readAttr","_isExternal","offsetWidth","offsetHeight","_gridstackNodeOrig","cleanupNode","wasAdded","placeholder","parentElement","remove","origNode","oGrid","removedNodes","push","_triggerRemoveEvent","cloneNode","removePositioningStyles","_writeAttr","appendChild","_updateContainerHeight","addedNodes","_triggerAddEvent","_triggerChangeEvent","endUpdate","_gsEventHandler","type","undefined","window","setTimeout","_prepareDragDropByNode","removeNode","_setupRemoveDrop","removable","trashEl","querySelector","isDroppable","removableOptions","_isAboutToRemove","classList","add","setupDragIn","_dragIn","_dragInOptions","dragIn","dragInOptions","revert","handle","scroll","appendTo","dd","getElements","forEach","isDraggable","locked","noMove","disableDrag","noResize","disableResize","onStartMoving","target","dragOrResize","onEndMoving","_moving","_lastTried","gridToNotify","_orig","_writePosAttr","addNode","_extraDragRow","start","stop","drag","resize","cleanNodes","beginUpdate","_lastUiPosition","_prevYPix","cacheRects","marginTop","marginRight","marginBottom","marginLeft","maxW","maxH","dropoutEvent","restoreInitial","resizing","p","distance","updateScrollPosition","prev","collide","row","getRow","extra","updateScrollResize","size","width","height","rect","moveNodeCheck","_skipDown","subGrid","onParentResize","movable","els","val","disable","enableMove","enableResize","_triggerEvent","enable","doEnable","nodes","pluginClass","ddi","registerPlugin","GridStackEngine","column","onChange","_float","float","batchMode","_prevFloat","saveInitial","_packNodes","_notify","nn","_hasLocked","opt","_sortNodes","nested","swap","area","_useEntireRowArea","skip","didMove","newOpt","pack","moved","moveNode","skip2","find","isIntercepted","filter","o","collides","_rect","r0","r","r2","yOver","Number","MAX_VALUE","xOver","overMax","over","min","right","bottom","a","b","_doSwap","_dirty","touching","isTouching","t","length","batchUpdate","copyNodes","commit","dir","sort","_updating","newY","i","_id","_idSeq","defaults","isNaN","verify","samePos","removeDOM","dirtyNodes","Array","isArray","concat","getDirtyNodes","some","triggerAddEvent","dup","prepareNode","_removeDOM","floor","_fixCollisions","triggerEvent","_layouts","changedPosConstrain","clonedNode","clone","map","canMove","c","content","prevPos","collideAll","needToMove","collideCoverage","reduce","saveElement","widgets","key","_ignoreLayoutsNodeChange","layout","l","ratio","oldColumn","cacheLayout","cacheNodes","lastIndex","cacheNode","j","findIndex","newNodes","splice","move","scale","clear","copy","prop","GridDefaults","minRow","itemClass","placeholderClass","placeholderText","handleClass","styleInHead","cellHeightThrottle","margin","auto","minWidth","animate","alwaysShowResizeHandle","autoHide","handles","rtl","marginUnit","cellHeightUnit","disableOneColumnMode","oneColumnModeDomSort","rowAttr","toNumber","getAttribute","toBool","_styleSheetClass","random","toFixed","initMargin","_widthOrContainer","_prevColumn","style","direction","parentGridItemEl","closestByClass","_isNested","_isAutoCellHeight","_setStaticClass","cbNodes","_updateStyles","elements","getGridItems","parseInt","e","_prepareElement","setAnimation","_updateWindowResizeEvent","options","elOrString","getGridElement","gridstack","console","error","grids","getGridElements","parent","contains","doc","implementation","createHTMLDocument","body","innerHTML","class","children","init","load","_placeholder","placeholderChild","createElement","className","arguments","warn","id","addWidget","domAttr","_insertNotAppend","prepend","saveContent","saveGridOpt","list","save","sub","removeInternalAndSame","addAndRemove","items","removed","removeWidget","item","update","addGrid","forcePixel","marginDiff","data","parseHeight","unit","clientWidth","innerWidth","compact","domNodes","updateNodeWidths","from","setStatic","parentNode","removeChild","removeAll","_removeStylesheet","useDocRelative","containerPos","offsetTop","offsetLeft","relativeLeft","relativeTop","columnWidth","rowHeight","isAreaEmpty","getElement","name","callback","indexOf","split","noData","detail","addEventListener","log","removeEventListener","doAnimate","m","keys","k","changed","ddChanged","value","layoutsNodesChange","CustomEvent","bubbles","Event","dispatchEvent","_styles","removeStylesheet","forceUpdate","prefix","styleLocation","createStylesheet","_max","addCSSRule","getHeight","rows","cssMinHeight","getComputedStyle","setAttribute","String","removeProperty","same","attrs","resizeHandles","removeAttribute","hasOwnProperty","classes","oneColumn","changedOneColumn","_oneColumnMode","_cellHeightThrottle","throttle","forceRemove","workTodo","_windowResizeBind","bind","margins","Engine","_disabled","_eventRegister","eventName","disabled","DDDraggable","DDBaseImplement","option","super","dragging","containmentRect","offset","substring","dragEl","_dragStart","_drag","_dragEnd","forDestroy","destroy","Object","DDManager","dragElement","_createHelper","_setupHelperContainmentStyle","dragOffset","_getDragOffset","helperContainment","ev","DDUtils","initEvent","_setupDragFollowNodeNotifyStart","dragFollowTimer","_cancelDragGhost","_setupHelperStyle","dragEventListenerOption","preventDefault","_dragFollow","clearTimeout","paintTimer","cancelAnimationFrame","parentOriginStylePosition","_removeHelperStyle","dragElementOriginStyle","originStyleProp","pointerEvents","willChange","transition","basePosition","zIndex","requestAnimationFrame","clientX","clientY","match","img","dataTransfer","setDragImage","stopPropagation","xformOffsetX","xformOffsetY","testEl","addElStyles","opacity","testElPosition","targetOffset","DDDroppable","_dragEnter","_dragOver","_dragLeave","_drop","_setupAccept","moving","_removeLeaveCallbacks","_canDrop","_ui","relatedTarget","out","drop","DDElement","ddElement","ddDraggable","ddDroppable","ddResizable","updateOption","DDResizable","DDResizableHandle","host","_mouseDown","_mouseMove","_mouseUp","_init","userSelect","mouseDownEvent","s","abs","_showHandlers","_hideHandlers","newRect","originalRect","scrolled","temporalRect","_setupAutoHide","_setupHandlers","_removeHandlers","updateHandles","updateAutoHide","handlerDirection","handlers","trim","_resizeStart","_resizeStop","_resizing","scrollEl","getScrollParent","scrollY","startEvent","_setupHelper","_applyChange","_getChange","_cleanHelper","elOriginStyleVal","_originStyleProp","oEvent","offsetX","offsetY","reshape","_getReShapeSize","oWidth","oHeight","maxWidth","MAX_SAFE_INTEGER","maxHeight","minHeight","containmentEl","test","styles","info","evt","obj","button","which","buttons","cancelable","isEventSupportPassiveOption","supportsPassive","passiveTest","GridStackDDNative","_getDDElements","dEl","cleanResizable","setupResizable","cleanDraggable","setupDraggable","containment","dragOut","_accept","cleanDroppable","setupDroppable","create","hosts","d","f","oldName","newName","rev","wrapper","args","apply","oldAttr","querySelectorAll","getElementById","col","styleSheet","cssText","createTextNode","insertBefore","firstChild","getElementsByTagName","sheet","rules","addRule","insertRule","v","toLowerCase","Boolean","Error","parseFloat","sources","source","minMax","func","delay","isWaiting","overflow","overflowY","innerHeightOrClientHeight","innerHeight","clientHeight","offsetDiffDown","offsetDiffUp","prevScroll","scrollBy","behavior","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__"],"mappings":"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","file":"gridstack-h5.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GridStack\"] = factory();\n\telse\n\t\troot[\"GridStack\"] = factory();\n})(self, function() {\nreturn ","/**\r\n * gridstack-dd.ts 4.1.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { GridStackDDI } from './gridstack-ddi';\r\nimport { GridItemHTMLElement, GridStackNode, GridStackElement, DDUIData, DDDragInOpt, GridStackPosition } from './types';\r\nimport { GridStack, MousePosition } from './gridstack';\r\nimport { Utils } from './utils';\r\n\r\n/** Drag&Drop drop options */\r\nexport type DDDropOpt = {\r\n  /** function or class type that this grid will accept as dropped items (see GridStackOptions.acceptWidgets) */\r\n  accept?: (el: GridItemHTMLElement) => boolean;\r\n}\r\n\r\n/** drag&drop options currently called from the main code, but others can be passed in grid options */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type DDOpts = 'enable' | 'disable' | 'destroy' | 'option' | string | any;\r\nexport type DDKey = 'minWidth' | 'minHeight' | 'maxWidth' | 'maxHeight';\r\nexport type DDValue = number | string;\r\n\r\n/** drag&drop events callbacks */\r\nexport type DDCallback = (event: Event, arg2: GridItemHTMLElement, helper?: GridItemHTMLElement) => void;\r\n\r\n/**\r\n * Base class implementing common Grid drag'n'drop functionality, with domain specific subclass (h5 vs jq subclasses)\r\n */\r\nexport abstract class GridStackDD extends GridStackDDI {\r\n\r\n  /** override to cast to correct type */\r\n  static get(): GridStackDD {\r\n    return GridStackDDI.get() as GridStackDD;\r\n  }\r\n\r\n  /** removes any drag&drop present (called during destroy) */\r\n  public remove(el: GridItemHTMLElement): GridStackDD {\r\n    this.draggable(el, 'destroy').resizable(el, 'destroy');\r\n    if (el.gridstackNode) {\r\n      delete el.gridstackNode._initDD; // reset our DD init flag\r\n    }\r\n    return this;\r\n  }\r\n\r\n  // APIs that must be implemented by subclasses to do actual darg/drop/resize called by GridStack code below\r\n\r\n  public abstract resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDD;\r\n\r\n  public abstract isResizable(el: HTMLElement): boolean;\r\n\r\n  public abstract draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDD;\r\n\r\n  public abstract dragIn(el: GridStackElement, opts: DDDragInOpt): GridStackDD;\r\n\r\n  public abstract isDraggable(el: HTMLElement): boolean;\r\n\r\n  public abstract droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): GridStackDD;\r\n\r\n  public abstract isDroppable(el: HTMLElement): boolean;\r\n\r\n  public abstract on(el: GridItemHTMLElement, eventName: string, callback: DDCallback): GridStackDD;\r\n\r\n  public abstract off(el: GridItemHTMLElement, eventName: string): GridStackDD;\r\n}\r\n\r\n/********************************************************************************\r\n * GridStack code that is doing drag&drop extracted here so main class is smaller\r\n * for static grid that don't do any of this work anyway. Saves about 10k.\r\n * TODO: no code hint in code below as this is <any> so look at alternatives ?\r\n * https://www.typescriptlang.org/docs/handbook/declaration-merging.html\r\n * https://www.typescriptlang.org/docs/handbook/mixins.html\r\n ********************************************************************************/\r\n\r\n/** @internal called to add drag over to support widgets being added externally */\r\nGridStack.prototype._setupAcceptWidget = function(): GridStack {\r\n  if (this.opts.staticGrid) return this;\r\n\r\n  // vars shared across all methods\r\n  let gridPos: MousePosition;\r\n  let cellHeight: number, cellWidth: number;\r\n\r\n  let onDrag = (event: DragEvent, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n\r\n    helper = helper || el;\r\n    let rec = helper.getBoundingClientRect();\r\n    let left = rec.left - gridPos.left;\r\n    let top = rec.top - gridPos.top;\r\n    let ui: DDUIData = {position: {top, left}};\r\n\r\n    if (node._temporaryRemoved) {\r\n      node.x = Math.max(0, Math.round(left / cellWidth));\r\n      node.y = Math.max(0, Math.round(top / cellHeight));\r\n      delete node.autoPosition;\r\n      this.engine.nodeBoundFix(node);\r\n\r\n      // don't accept *initial* location if doesn't fit #1419 (locked drop region, or can't grow), but maybe try if it will go somewhere\r\n      if (!this.engine.willItFit(node)) {\r\n        node.autoPosition = true; // ignore x,y and try for any slot...\r\n        if (!this.engine.willItFit(node)) {\r\n          GridStackDD.get().off(el, 'drag'); // stop calling us\r\n          return; // full grid or can't grow\r\n        }\r\n        if (node._willFitPos) {\r\n          // use the auto position instead #1687\r\n          Utils.copyPos(node, node._willFitPos);\r\n          delete node._willFitPos;\r\n        }\r\n      }\r\n\r\n      // re-use the existing node dragging method\r\n      this._onStartMoving(helper, event, ui, node, cellWidth, cellHeight);\r\n    } else {\r\n      // re-use the existing node dragging that does so much of the collision detection\r\n      this._dragOrResize(helper, event, ui, node, cellWidth, cellHeight);\r\n    }\r\n  }\r\n\r\n  GridStackDD.get()\r\n    .droppable(this.el, {\r\n      accept: (el: GridItemHTMLElement) => {\r\n        let node: GridStackNode = el.gridstackNode;\r\n        // set accept drop to true on ourself (which we ignore) so we don't get \"can't drop\" icon in HTML5 mode while moving\r\n        if (node && node.grid === this) return true;\r\n        if (!this.opts.acceptWidgets) return false;\r\n        // check for accept method or class matching\r\n        let canAccept = true;\r\n        if (typeof this.opts.acceptWidgets === 'function') {\r\n          canAccept = this.opts.acceptWidgets(el);\r\n        } else {\r\n          let selector = (this.opts.acceptWidgets === true ? '.grid-stack-item' : this.opts.acceptWidgets as string);\r\n          canAccept = el.matches(selector);\r\n        }\r\n        // finally check to make sure we actually have space left #1571\r\n        if (canAccept && node && this.opts.maxRow) {\r\n          let n = {w: node.w, h: node.h, minW: node.minW, minH: node.minH}; // only width/height matters and autoPosition\r\n          canAccept = this.engine.willItFit(n);\r\n        }\r\n        return canAccept;\r\n      }\r\n    })\r\n    /**\r\n     * entering our grid area\r\n     */\r\n    .on(this.el, 'dropover', (event: Event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      // ignore drop enter on ourself (unless we temporarily removed) which happens on a simple drag of our item\r\n      if (node && node.grid === this && !node._temporaryRemoved) {\r\n        // delete node._added; // reset this to track placeholder again in case we were over other grid #1484 (dropout doesn't always clear)\r\n        return false; // prevent parent from receiving msg (which may be a grid as well)\r\n      }\r\n\r\n      // fix #1578 when dragging fast, we may not get a leave on the previous grid so force one now\r\n      if (node && node.grid && node.grid !== this && !node._temporaryRemoved) {\r\n        // TEST console.log('dropover without leave');\r\n        let otherGrid = node.grid;\r\n        otherGrid._leave(el.gridstackNode, el, helper, true); // MATCH line 222\r\n      }\r\n\r\n      // get grid screen coordinates and cell dimensions\r\n      let box = this.el.getBoundingClientRect();\r\n      gridPos = {top: box.top + document.documentElement.scrollTop, left: box.left};\r\n      cellWidth = this.cellWidth();\r\n      cellHeight = this.getCellHeight(true);\r\n\r\n      // load any element attributes if we don't have a node\r\n      if (!node) {\r\n        node = this._readAttr(el);\r\n      }\r\n      if (!node.grid) {\r\n        node._isExternal = true;\r\n        el.gridstackNode = node;\r\n      }\r\n\r\n      // calculate the grid size based on element outer size\r\n      helper = helper || el;\r\n      let w = node.w || Math.round(helper.offsetWidth / cellWidth) || 1;\r\n      let h = node.h || Math.round(helper.offsetHeight / cellHeight) || 1;\r\n\r\n      // if the item came from another grid, make a copy and save the original info in case we go back there\r\n      if (node.grid && node.grid !== this) {\r\n        // copy the node original values (min/max/id/etc...) but override width/height/other flags which are this grid specific\r\n        // TEST console.log('dropover cloning node');\r\n        if (!el._gridstackNodeOrig) el._gridstackNodeOrig = node; // shouldn't have multiple nested!\r\n        el.gridstackNode = node = {...node, w, h, grid: this};\r\n        this.engine.cleanupNode(node)\r\n          .nodeBoundFix(node);\r\n        // restore some internal fields we need after clearing them all\r\n        node._initDD =\r\n        node._isExternal =  // DOM needs to be re-parented on a drop\r\n        node._temporaryRemoved = true; // so it can be inserted onDrag below\r\n      } else {\r\n        node.w = w; node.h = h;\r\n        node._temporaryRemoved = true; // so we can insert it\r\n      }\r\n\r\n      GridStackDD.get().on(el, 'drag', onDrag);\r\n      // make sure this is called at least once when going fast #1578\r\n      onDrag(event as DragEvent, el, helper);\r\n      return false; // prevent parent from receiving msg (which may be a grid as well)\r\n    })\r\n    /**\r\n     * Leaving our grid area...\r\n     */\r\n    .on(this.el, 'dropout', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      // fix #1578 when dragging fast, we might get leave after other grid gets enter (which calls us to clean)\r\n      // so skip this one if we're not the active grid really..\r\n      if (!node.grid || node.grid === this) {\r\n        this._leave(node, el, helper, true); // MATCH line 166\r\n      }\r\n      return false; // prevent parent from receiving msg (which may be grid as well)\r\n    })\r\n    /**\r\n     * end - releasing the mouse\r\n     */\r\n    .on(this.el, 'drop', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      // ignore drop on ourself from ourself that didn't come from the outside - dragend will handle the simple move instead\r\n      if (node && node.grid === this && !node._isExternal) return false;\r\n\r\n      let wasAdded = !!this.placeholder.parentElement; // skip items not actually added to us because of constrains, but do cleanup #1419\r\n      this.placeholder.remove();\r\n\r\n      // notify previous grid of removal\r\n      // TEST console.log('drop delete _gridstackNodeOrig')\r\n      let origNode = el._gridstackNodeOrig;\r\n      delete el._gridstackNodeOrig;\r\n      if (wasAdded && origNode && origNode.grid && origNode.grid !== this) {\r\n        let oGrid = origNode.grid;\r\n        oGrid.engine.removedNodes.push(origNode);\r\n        oGrid._triggerRemoveEvent();\r\n      }\r\n\r\n      if (!node) return false;\r\n\r\n      // use existing placeholder node as it's already in our list with drop location\r\n      if (wasAdded) {\r\n        this.engine.cleanupNode(node); // removes all internal _xyz values\r\n        node.grid = this;\r\n      }\r\n      GridStackDD.get().off(el, 'drag');\r\n      // if we made a copy ('helper' which is temp) of the original node then insert a copy, else we move the original node (#1102)\r\n      // as the helper will be nuked by jquery-ui otherwise\r\n      if (helper !== el) {\r\n        helper.remove();\r\n        el.gridstackNode = origNode; // original item (left behind) is re-stored to pre dragging as the node now has drop info\r\n        if (wasAdded) {\r\n          el = el.cloneNode(true) as GridItemHTMLElement;\r\n        }\r\n      } else {\r\n        el.remove(); // reduce flicker as we change depth here, and size further down\r\n        GridStackDD.get().remove(el);\r\n      }\r\n      if (!wasAdded) return false;\r\n      el.gridstackNode = node;\r\n      node.el = el;\r\n\r\n      Utils.copyPos(node, this._readAttr(this.placeholder)); // placeholder values as moving VERY fast can throw things off #1578\r\n      Utils.removePositioningStyles(el);\r\n      this._writeAttr(el, node);\r\n      this.el.appendChild(el);\r\n      this._updateContainerHeight();\r\n      this.engine.addedNodes.push(node);\r\n      this._triggerAddEvent();\r\n      this._triggerChangeEvent();\r\n\r\n      this.engine.endUpdate();\r\n      if (this._gsEventHandler['dropped']) {\r\n        this._gsEventHandler['dropped']({type: 'dropped'}, origNode && origNode.grid ? origNode : undefined, node);\r\n      }\r\n\r\n      // wait till we return out of the drag callback to set the new drag&resize handler or they may get messed up\r\n      window.setTimeout(() => {\r\n        // IFF we are still there (some application will use as placeholder and insert their real widget instead and better call makeWidget())\r\n        if (node.el && node.el.parentElement) {\r\n          this._prepareDragDropByNode(node);\r\n        } else {\r\n          this.engine.removeNode(node);\r\n        }\r\n      });\r\n\r\n      return false; // prevent parent from receiving msg (which may be grid as well)\r\n    });\r\n  return this;\r\n}\r\n\r\n/** @internal called to setup a trash drop zone if the user specifies it */\r\nGridStack.prototype._setupRemoveDrop = function(): GridStack {\r\n  if (!this.opts.staticGrid && typeof this.opts.removable === 'string') {\r\n    let trashEl = document.querySelector(this.opts.removable) as HTMLElement;\r\n    if (!trashEl) return this;\r\n    // only register ONE drop-over/dropout callback for the 'trash', and it will\r\n    // update the passed in item and parent grid because the 'trash' is a shared resource anyway,\r\n    // and Native DD only has 1 event CB (having a list and technically a per grid removableOptions complicates things greatly)\r\n    if (!GridStackDD.get().isDroppable(trashEl)) {\r\n      GridStackDD.get().droppable(trashEl, this.opts.removableOptions)\r\n        .on(trashEl, 'dropover', function(event, el) { // don't use => notation to avoid using 'this' as grid by mistake...\r\n          let node = el.gridstackNode;\r\n          if (!node || !node.grid) return;\r\n          node._isAboutToRemove = true;\r\n          el.classList.add('grid-stack-item-removing');\r\n        })\r\n        .on(trashEl, 'dropout', function(event, el) { // same\r\n          let node = el.gridstackNode;\r\n          if (!node || !node.grid) return;\r\n          delete node._isAboutToRemove;\r\n          el.classList.remove('grid-stack-item-removing');\r\n        });\r\n    }\r\n  }\r\n  return this;\r\n}\r\n\r\n/**\r\n * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n * Called during GridStack.init() as options, but can also be called directly (last param are cached) in case the toolbar\r\n * is dynamically create and needs to change later.\r\n **/\r\nGridStack.setupDragIn = function(_dragIn?: string, _dragInOptions?: DDDragInOpt) {\r\n  let dragIn: string;\r\n  let dragInOptions: DDDragInOpt;\r\n  const dragInDefaultOptions: DDDragInOpt = {\r\n    revert: 'invalid',\r\n    handle: '.grid-stack-item-content',\r\n    scroll: false,\r\n    appendTo: 'body'\r\n  };\r\n\r\n  // cache in the passed in values (form grid init?) so they don't have to resend them each time\r\n  if (_dragIn) {\r\n    dragIn = _dragIn;\r\n    dragInOptions = {...dragInDefaultOptions, ...(_dragInOptions || {})};\r\n  }\r\n  if (typeof dragIn !== 'string') return;\r\n  let dd = GridStackDD.get();\r\n  Utils.getElements(dragIn).forEach(el => {\r\n    if (!dd.isDraggable(el)) dd.dragIn(el, dragInOptions);\r\n  });\r\n}\r\n\r\n/** @internal prepares the element for drag&drop **/\r\nGridStack.prototype._prepareDragDropByNode = function(node: GridStackNode): GridStack {\r\n  let el = node.el;\r\n  let dd = GridStackDD.get();\r\n\r\n  // check for disabled grid first\r\n  if (this.opts.staticGrid || node.locked ||\r\n    ((node.noMove || this.opts.disableDrag) && (node.noResize || this.opts.disableResize))) {\r\n    if (node._initDD) {\r\n      dd.remove(el); // nukes everything instead of just disable, will add some styles back next\r\n      delete node._initDD;\r\n    }\r\n    el.classList.add('ui-draggable-disabled', 'ui-resizable-disabled'); // add styles one might depend on #1435\r\n    return this;\r\n  }\r\n\r\n  if (!node._initDD) {\r\n    // variables used/cashed between the 3 start/move/end methods, in addition to node passed above\r\n    let cellWidth: number;\r\n    let cellHeight: number;\r\n\r\n    /** called when item starts moving/resizing */\r\n    let onStartMoving = (event: Event, ui: DDUIData) => {\r\n      // trigger any 'dragstart' / 'resizestart' manually\r\n      if (this._gsEventHandler[event.type]) {\r\n        this._gsEventHandler[event.type](event, event.target);\r\n      }\r\n      cellWidth = this.cellWidth();\r\n      cellHeight = this.getCellHeight(true); // force pixels for calculations\r\n\r\n      this._onStartMoving(el, event, ui, node, cellWidth, cellHeight);\r\n    }\r\n\r\n    /** called when item is being dragged/resized */\r\n    let dragOrResize = (event: Event, ui: DDUIData) => {\r\n      this._dragOrResize(el, event, ui, node, cellWidth, cellHeight);\r\n    }\r\n\r\n    /** called when the item stops moving/resizing */\r\n    let onEndMoving = (event: Event) => {\r\n      this.placeholder.remove();\r\n      delete node._moving;\r\n      delete node._lastTried;\r\n\r\n      // if the item has moved to another grid, we're done here\r\n      let target: GridItemHTMLElement = event.target as GridItemHTMLElement;\r\n      if (!target.gridstackNode || target.gridstackNode.grid !== this) return;\r\n\r\n      node.el = target;\r\n\r\n      if (node._isAboutToRemove) {\r\n        let gridToNotify = el.gridstackNode.grid;\r\n        if (gridToNotify._gsEventHandler[event.type]) {\r\n          gridToNotify._gsEventHandler[event.type](event, target);\r\n        }\r\n        dd.remove(el);\r\n        gridToNotify.engine.removedNodes.push(node);\r\n        gridToNotify._triggerRemoveEvent();\r\n        // break circular links and remove DOM\r\n        delete el.gridstackNode;\r\n        delete node.el;\r\n        el.remove();\r\n      } else {\r\n        if (!node._temporaryRemoved) {\r\n          // move to new placeholder location\r\n          Utils.removePositioningStyles(target);\r\n          this._writePosAttr(target, node);\r\n        } else {\r\n          // got removed - restore item back to before dragging position\r\n          Utils.removePositioningStyles(target);\r\n          Utils.copyPos(node, node._orig);\r\n          this._writePosAttr(target, node);\r\n          this.engine.addNode(node);\r\n        }\r\n        if (this._gsEventHandler[event.type]) {\r\n          this._gsEventHandler[event.type](event, target);\r\n        }\r\n      }\r\n\r\n      this._extraDragRow = 0;\r\n      this._updateContainerHeight();\r\n      this._triggerChangeEvent();\r\n\r\n      this.engine.endUpdate();\r\n    }\r\n\r\n    dd.draggable(el, {\r\n      start: onStartMoving,\r\n      stop: onEndMoving,\r\n      drag: dragOrResize\r\n    }).resizable(el, {\r\n      start: onStartMoving,\r\n      stop: onEndMoving,\r\n      resize: dragOrResize\r\n    });\r\n    node._initDD = true; // we've set DD support now\r\n  }\r\n\r\n  // finally fine tune move vs resize by disabling any part...\r\n  if (node.noMove || this.opts.disableDrag) {\r\n    dd.draggable(el, 'disable');\r\n    el.classList.add('ui-draggable-disabled');\r\n  } else {\r\n    dd.draggable(el, 'enable');\r\n    el.classList.remove('ui-draggable-disabled');\r\n  }\r\n  if (node.noResize || this.opts.disableResize) {\r\n    dd.resizable(el, 'disable');\r\n    el.classList.add('ui-resizable-disabled');\r\n  } else {\r\n    dd.resizable(el, 'enable');\r\n    el.classList.remove('ui-resizable-disabled');\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n/** @internal called when item is starting a drag/resize */\r\nGridStack.prototype._onStartMoving = function(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number) {\r\n  this.engine.cleanNodes()\r\n    .beginUpdate(node);\r\n\r\n  this._writePosAttr(this.placeholder, node)\r\n  this.el.appendChild(this.placeholder);\r\n  // TEST console.log('_onStartMoving placeholder')\r\n\r\n  node.el = this.placeholder;\r\n  node._lastUiPosition = ui.position;\r\n  node._prevYPix = ui.position.top;\r\n  node._moving = (event.type === 'dragstart'); // 'dropover' are not initially moving so they can go exactly where they enter (will push stuff out of the way)\r\n  delete node._lastTried;\r\n\r\n  if (event.type === 'dropover' && node._temporaryRemoved) {\r\n    // TEST console.log('engine.addNode x=' + node.x);\r\n    this.engine.addNode(node); // will add, fix collisions, update attr and clear _temporaryRemoved\r\n    node._moving = true; // AFTER, mark as moving object (wanted fix location before)\r\n  }\r\n\r\n  // set the min/max resize info\r\n  this.engine.cacheRects(cellWidth, cellHeight, this.opts.marginTop, this.opts.marginRight, this.opts.marginBottom, this.opts.marginLeft);\r\n  if (event.type === 'resizestart') {\r\n    let dd = GridStackDD.get()\r\n      .resizable(el, 'option', 'minWidth', cellWidth * (node.minW || 1))\r\n      .resizable(el, 'option', 'minHeight', cellHeight * (node.minH || 1));\r\n    if (node.maxW) { dd.resizable(el, 'option', 'maxWidth', cellWidth * node.maxW); }\r\n    if (node.maxH) { dd.resizable(el, 'option', 'maxHeight', cellHeight * node.maxH); }\r\n  }\r\n}\r\n\r\n/** @internal called when item leaving our area by either cursor dropout event\r\n * or shape is outside our boundaries. remove it from us, and mark temporary if this was\r\n * our item to start with else restore prev node values from prev grid it came from.\r\n **/\r\nGridStack.prototype._leave = function(node: GridStackNode, el: GridItemHTMLElement, helper?: GridItemHTMLElement, dropoutEvent = false)  {\r\n  if (!node) return;\r\n\r\n  if (dropoutEvent) {\r\n    GridStackDD.get().off(el, 'drag'); // no need to track while being outside\r\n  }\r\n\r\n  // this gets called when cursor leaves and shape is outside, so only do this once\r\n  if (node._temporaryRemoved) return;\r\n  node._temporaryRemoved = true;\r\n\r\n  this.engine.removeNode(node); // remove placeholder as well, otherwise it's a sign node is not in our list, which is a bigger issue\r\n  node.el = node._isExternal && helper ? helper : el; // point back to real item being dragged\r\n\r\n  // finally if item originally came from another grid, but left us, restore things back to prev info\r\n  if (el._gridstackNodeOrig) {\r\n    // TEST console.log('leave delete _gridstackNodeOrig')\r\n    el.gridstackNode = el._gridstackNodeOrig;\r\n    delete el._gridstackNodeOrig;\r\n  } else if (node._isExternal) {\r\n    // item came from outside (like a toolbar) so nuke any node info\r\n    delete node.el;\r\n    delete el.gridstackNode;\r\n    // and restore all nodes back to original\r\n    this.engine.restoreInitial();\r\n  }\r\n}\r\n\r\n/** @internal called when item is being dragged/resized */\r\nGridStack.prototype._dragOrResize = function(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number)  {\r\n  let p = {...node._orig}; // could be undefined (_isExternal) which is ok (drag only set x,y and w,h will default to node value)\r\n  let resizing: boolean;\r\n\r\n  if (event.type === 'drag') {\r\n    if (node._temporaryRemoved) return; // handled by dropover\r\n    let distance = ui.position.top - node._prevYPix;\r\n    node._prevYPix = ui.position.top;\r\n    Utils.updateScrollPosition(el, ui.position, distance);\r\n\r\n    // get new position taking into account the margin in the direction we are moving! (need to pass mid point by margin)\r\n    let left = ui.position.left + (ui.position.left > node._lastUiPosition.left  ? -this.opts.marginRight : this.opts.marginLeft);\r\n    let top = ui.position.top + (ui.position.top > node._lastUiPosition.top  ? -this.opts.marginBottom : this.opts.marginTop);\r\n    p.x = Math.round(left / cellWidth);\r\n    p.y = Math.round(top / cellHeight);\r\n\r\n    // if we're at the bottom hitting something else, grow the grid so cursor doesn't leave when trying to place below others\r\n    let prev = this._extraDragRow;\r\n    if (this.engine.collide(node, p)) {\r\n      let row = this.getRow();\r\n      let extra = Math.max(0, (p.y + node.h) - row);\r\n      if (this.opts.maxRow && row + extra > this.opts.maxRow) {\r\n        extra = Math.max(0, this.opts.maxRow - row);\r\n      }\r\n      this._extraDragRow = extra;\r\n    } else this._extraDragRow = 0;\r\n    if (this._extraDragRow !== prev) this._updateContainerHeight();\r\n\r\n    if (node.x === p.x && node.y === p.y) return; // skip same\r\n    // DON'T skip one we tried as we might have failed because of coverage <50% before\r\n    // if (node._lastTried && node._lastTried.x === x && node._lastTried.y === y) return;\r\n  } else if (event.type === 'resize')  {\r\n    if (p.x < 0) return;\r\n    // Scrolling page if needed\r\n    Utils.updateScrollResize(event as MouseEvent, el, cellHeight);\r\n\r\n    // get new size\r\n    p.w = Math.round((ui.size.width - this.opts.marginLeft) / cellWidth);\r\n    p.h = Math.round((ui.size.height - this.opts.marginTop) / cellHeight);\r\n    if (node.w === p.w && node.h === p.h) return;\r\n    if (node._lastTried && node._lastTried.w === p.w && node._lastTried.h === p.h) return; // skip one we tried (but failed)\r\n\r\n    // if we changed sizing on left side, move the item as well. Note: we don't support TOP resizing\r\n    if (Math.round(ui.position.left) < Math.round(node._orig.x * cellWidth)) { // use round or we can get slightly off compare\r\n      p.x = node._orig.x + node._orig.w - p.w;\r\n    }\r\n    resizing = true;\r\n  }\r\n\r\n  node._lastTried = p; // set as last tried (will nuke if we go there)\r\n  let rect: GridStackPosition = { // screen pix of the dragged box\r\n    x: ui.position.left + this.opts.marginLeft,\r\n    y: ui.position.top + this.opts.marginTop,\r\n    w: (ui.size ? ui.size.width : node.w * cellWidth) - this.opts.marginLeft - this.opts.marginRight,\r\n    h: (ui.size ? ui.size.height : node.h * cellHeight) - this.opts.marginTop - this.opts.marginBottom\r\n  };\r\n  if (this.engine.moveNodeCheck(node, {...p, cellWidth, cellHeight, rect})) {\r\n    node._lastUiPosition = ui.position;\r\n    this.engine.cacheRects(cellWidth, cellHeight, this.opts.marginTop, this.opts.marginRight, this.opts.marginBottom, this.opts.marginLeft);\r\n    delete node._skipDown;\r\n    if (resizing && node.subGrid) { (node.subGrid as GridStack).onParentResize(); }\r\n    this._extraDragRow = 0;\r\n    this._updateContainerHeight();\r\n\r\n    let target = event.target as GridItemHTMLElement;\r\n    this._writePosAttr(target, node);\r\n    if (this._gsEventHandler[event.type]) {\r\n      this._gsEventHandler[event.type](event, target);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Enables/Disables moving.\r\n * @param els widget or selector to modify.\r\n * @param val if true widget will be draggable.\r\n */\r\nGridStack.prototype.movable = function(els: GridStackElement, val: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't move a static grid!\r\n  GridStack.getElements(els).forEach(el => {\r\n    let node = el.gridstackNode;\r\n    if (!node || node.locked) return;\r\n    if (val) delete node.noMove; else node.noMove = true;\r\n    this._prepareDragDropByNode(node); // init DD if need be, and adjust\r\n  });\r\n  return this;\r\n}\r\n\r\n/**\r\n * Enables/Disables resizing.\r\n * @param els  widget or selector to modify\r\n * @param val  if true widget will be resizable.\r\n */\r\nGridStack.prototype.resizable = function(els: GridStackElement, val: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't resize a static grid!\r\n  GridStack.getElements(els).forEach(el => {\r\n    let node = el.gridstackNode;\r\n    if (!node || node.locked) return;\r\n    if (val) delete node.noResize; else node.noResize = true;\r\n    this._prepareDragDropByNode(node); // init DD if need be, and adjust\r\n  });\r\n  return this;\r\n}\r\n\r\n\r\n/**\r\n  * Temporarily disables widgets moving/resizing.\r\n  * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n  * Note: no-op for static grid\r\n  * This is a shortcut for:\r\n  * @example\r\n  *  grid.enableMove(false);\r\n  *  grid.enableResize(false);\r\n  */\r\nGridStack.prototype.disable = function(): GridStack {\r\n  if (this.opts.staticGrid) return;\r\n  this.enableMove(false);\r\n  this.enableResize(false);\r\n  this._triggerEvent('disable');\r\n  return this;\r\n}\r\n\r\n/**\r\n  * Re-enables widgets moving/resizing - see disable().\r\n  * Note: no-op for static grid.\r\n  * This is a shortcut for:\r\n  * @example\r\n  *  grid.enableMove(true);\r\n  *  grid.enableResize(true);\r\n  */\r\nGridStack.prototype.enable = function(): GridStack {\r\n  if (this.opts.staticGrid) return;\r\n  this.enableMove(true);\r\n  this.enableResize(true);\r\n  this._triggerEvent('enable');\r\n  return this;\r\n}\r\n\r\n/** Enables/disables widget moving. No-op for static grids. */\r\nGridStack.prototype.enableMove = function(doEnable: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't move a static grid!\r\n  this.opts.disableDrag = !doEnable; // FIRST before we update children as grid overrides #1658\r\n  this.engine.nodes.forEach(n => this.movable(n.el, doEnable));\r\n  return this;\r\n}\r\n\r\n/** Enables/disables widget resizing. No-op for static grids. */\r\nGridStack.prototype.enableResize = function(doEnable: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't size a static grid!\r\n  this.opts.disableResize = !doEnable; // FIRST before we update children as grid overrides #1658\r\n  this.engine.nodes.forEach(n => this.resizable(n.el, doEnable));\r\n  return this;\r\n}\r\n","/**\r\n * gridstack-ddi.ts 4.1.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridItemHTMLElement } from './types';\r\n\r\n/**\r\n * Abstract Partial Interface API for drag'n'drop plugin - look at GridStackDD and HTML5 / Jquery implementation versions\r\n */\r\nexport class GridStackDDI {\r\n\r\n  protected static ddi: GridStackDDI;\r\n\r\n  /** call this method to register your plugin instead of the default no-op one */\r\n  static registerPlugin(pluginClass: typeof GridStackDDI): GridStackDDI {\r\n    GridStackDDI.ddi = new pluginClass();\r\n    return GridStackDDI.ddi;\r\n  }\r\n\r\n  /** get the current registered plugin to use */\r\n  static get(): GridStackDDI {\r\n    return GridStackDDI.ddi || GridStackDDI.registerPlugin(GridStackDDI);\r\n  }\r\n\r\n  /** removes any drag&drop present (called during destroy) */\r\n  /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\r\n  public remove(el: GridItemHTMLElement): GridStackDDI {\r\n    return this; // no-op for static grids\r\n  }\r\n}\r\n","/**\r\n * gridstack-engine.ts 4.1.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { Utils } from './utils';\r\nimport { GridStackNode, ColumnOptions, GridStackPosition, GridStackMoveOpts } from './types';\r\n\r\nexport type onChangeCB = (nodes: GridStackNode[], removeDOM?: boolean) => void;\r\n/** options used for creations - similar to GridStackOptions */\r\nexport interface GridStackEngineOptions {\r\n  column?: number;\r\n  maxRow?: number;\r\n  float?: boolean;\r\n  nodes?: GridStackNode[];\r\n  onChange?: onChangeCB;\r\n}\r\n\r\n/**\r\n * Defines the GridStack engine that does most no DOM grid manipulation.\r\n * See GridStack methods and vars for descriptions.\r\n *\r\n * NOTE: values should not be modified directly - call the main GridStack API instead\r\n */\r\nexport class GridStackEngine {\r\n  public column: number;\r\n  public maxRow: number;\r\n  public nodes: GridStackNode[];\r\n  public onChange: onChangeCB;\r\n  public addedNodes: GridStackNode[] = [];\r\n  public removedNodes: GridStackNode[] = [];\r\n  public batchMode: boolean;\r\n  /** @internal */\r\n  private _float: boolean;\r\n  /** @internal */\r\n  private _prevFloat: boolean;\r\n  /** @internal */\r\n  private _layouts?: Layout[][]; // maps column # to array of values nodes\r\n  /** @internal */\r\n  private _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal true if we have some items locked */\r\n  private _hasLocked: boolean;\r\n  /** @internal unique global internal _id counter NOT starting at 0 */\r\n  private static _idSeq = 1;\r\n\r\n  public constructor(opts: GridStackEngineOptions = {}) {\r\n    this.column = opts.column || 12;\r\n    this.onChange = opts.onChange;\r\n    this._float = opts.float;\r\n    this.maxRow = opts.maxRow;\r\n    this.nodes = opts.nodes || [];\r\n  }\r\n\r\n  public batchUpdate(): GridStackEngine {\r\n    if (this.batchMode) return this;\r\n    this.batchMode = true;\r\n    this._prevFloat = this._float;\r\n    this._float = true; // let things go anywhere for now... commit() will restore and possibly reposition\r\n    this.saveInitial(); // since begin update (which is called multiple times) won't do this\r\n    return this;\r\n  }\r\n\r\n  public commit(): GridStackEngine {\r\n    if (!this.batchMode) return this;\r\n    this.batchMode = false;\r\n    this._float = this._prevFloat;\r\n    delete this._prevFloat;\r\n    return this._packNodes()\r\n      ._notify();\r\n  }\r\n\r\n  // use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip\r\n  private _useEntireRowArea(node: GridStackNode, nn: GridStackPosition): boolean {\r\n    return !this.float && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);\r\n  }\r\n\r\n  /** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.\r\n   * return true if we moved. */\r\n  private _fixCollisions(node: GridStackNode, nn = node, collide?: GridStackNode, opt: GridStackMoveOpts = {}): boolean {\r\n    this._sortNodes(-1); // from last to first, so recursive collision move items in the right order\r\n\r\n    collide = collide || this.collide(node, nn); // REAL area collide for swap and skip if none...\r\n    if (!collide) return false;\r\n\r\n    // swap check: if we're actively moving in gravity mode, see if we collide with an object the same size\r\n    if (node._moving && !opt.nested && !this.float) {\r\n      if (this.swap(node, collide)) return true;\r\n    }\r\n\r\n    // during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)\r\n    let area = nn;\r\n    if (this._useEntireRowArea(node, nn)) {\r\n      area = {x: 0, w: this.column, y: nn.y, h: nn.h};\r\n      collide = this.collide(node, area, opt.skip); // force new hit\r\n    }\r\n\r\n    let didMove = false;\r\n    let newOpt: GridStackMoveOpts = {nested: true, pack: false};\r\n    while (collide = collide || this.collide(node, area, opt.skip)) { // could collide with more than 1 item... so repeat for each\r\n      let moved: boolean;\r\n      // if colliding with a locked item OR moving down with top gravity (and collide could move up) -> skip past the collide,\r\n      // but remember that skip down so we only do this once (and push others otherwise).\r\n      if (collide.locked || node._moving && !node._skipDown && nn.y > node.y && !this.float &&\r\n        // can take space we had, or before where we're going\r\n        (!this.collide(collide, {...collide, y: node.y}, node) || !this.collide(collide, {...collide, y: nn.y - collide.h}, node))) {\r\n        node._skipDown = (node._skipDown || nn.y > node.y);\r\n        moved = this.moveNode(node, {...nn, y: collide.y + collide.h, ...newOpt});\r\n        if (collide.locked && moved) {\r\n          Utils.copyPos(nn, node); // moving after lock become our new desired location\r\n        } else if (!collide.locked && moved && opt.pack) {\r\n          // we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way\r\n          this._packNodes();\r\n          nn.y = collide.y + collide.h;\r\n          Utils.copyPos(node, nn);\r\n        }\r\n        didMove = didMove || moved;\r\n      } else {\r\n        // move collide down *after* where we will be, ignoring where we are now (don't collide with us)\r\n        moved = this.moveNode(collide, {...collide, y: nn.y + nn.h, skip: node, ...newOpt});\r\n      }\r\n      if (!moved) { return didMove; } // break inf loop if we couldn't move after all (ex: maxRow, fixed)\r\n      collide = undefined;\r\n    }\r\n    return didMove;\r\n  }\r\n\r\n  /** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */\r\n  public collide(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode {\r\n    return this.nodes.find(n => n !== skip && n !== skip2 && Utils.isIntercepted(n, area));\r\n  }\r\n  public collideAll(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode[] {\r\n    return this.nodes.filter(n => n !== skip && n !== skip2 && Utils.isIntercepted(n, area));\r\n  }\r\n\r\n  /** does a pixel coverage collision, returning the node that has the most coverage that is >50% mid line */\r\n  public collideCoverage(node: GridStackNode, o: GridStackMoveOpts, collides: GridStackNode[]): GridStackNode {\r\n    if (!o.rect || !node._rect) return;\r\n    let r0 = node._rect; // where started\r\n    let r = {...o.rect}; // where we are\r\n\r\n    // update dragged rect to show where it's coming from (above or below, etc...)\r\n    if (r.y > r0.y) {\r\n      r.h += r.y - r0.y;\r\n      r.y = r0.y;\r\n    } else {\r\n      r.h += r0.y - r.y;\r\n    }\r\n    if (r.x > r0.x) {\r\n      r.w += r.x - r0.x;\r\n      r.x = r0.x;\r\n    } else {\r\n      r.w += r0.x - r.x;\r\n    }\r\n\r\n    let collide: GridStackNode;\r\n    collides.forEach(n => {\r\n      if (n.locked || !n._rect) return;\r\n      let r2 = n._rect; // overlapping target\r\n      let yOver = Number.MAX_VALUE, xOver = Number.MAX_VALUE, overMax = 0.5; // need >50%\r\n      // depending on which side we started from, compute the overlap % of coverage\r\n      // (ex: from above/below we only compute the max horizontal line coverage)\r\n      if (r0.y < r2.y) { // from above\r\n        yOver = ((r.y + r.h) - r2.y) / r2.h;\r\n      } else if (r0.y+r0.h > r2.y+r2.h) { // from below\r\n        yOver = ((r2.y + r2.h) - r.y) / r2.h;\r\n      }\r\n      if (r0.x < r2.x) { // from the left\r\n        xOver = ((r.x + r.w) - r2.x) / r2.w;\r\n      } else if (r0.x+r0.w > r2.x+r2.w) { // from the right\r\n        xOver = ((r2.x + r2.w) - r.x) / r2.w;\r\n      }\r\n      let over = Math.min(xOver, yOver);\r\n      if (over > overMax) {\r\n        overMax = over;\r\n        collide = n;\r\n      }\r\n    });\r\n    return collide;\r\n  }\r\n\r\n  /** called to cache the nodes pixel rectangles used for collision detection during drag */\r\n  public cacheRects(w: number, h: number, top: number, right: number, bottom: number, left: number): GridStackEngine\r\n  {\r\n    this.nodes.forEach(n =>\r\n      n._rect = {\r\n        y: n.y * h + top,\r\n        x: n.x * w + left,\r\n        w: n.w * w - left - right,\r\n        h: n.h * h - top - bottom\r\n      }\r\n    );\r\n    return this;\r\n  }\r\n\r\n  /** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */\r\n  public swap(a: GridStackNode, b: GridStackNode): boolean {\r\n    if (!b || b.locked || !a || a.locked) return false;\r\n\r\n    function _doSwap(): true { // assumes a is before b IFF they have different height (put after rather than exact swap)\r\n      let x = b.x, y = b.y;\r\n      b.x = a.x; b.y = a.y; // b -> a position\r\n      if (a.h != b.h) {\r\n        a.x = x; a.y = b.y + b.h; // a -> goes after b\r\n      } else {\r\n        a.x = x; a.y = y; // a -> old b position\r\n      }\r\n      a._dirty = b._dirty = true;\r\n      return true;\r\n    }\r\n    let touching: boolean; // remember if we called it (vs undefined)\r\n\r\n    // same size and same row or column, and touching\r\n    if (a.w === b.w && a.h === b.h && (a.x === b.x || a.y === b.y) && (touching = Utils.isTouching(a, b)))\r\n      return _doSwap();\r\n    if (touching === false) return; // ran test and fail, bail out\r\n\r\n    // check for taking same columns (but different height) and touching\r\n    if (a.w === b.w && a.x === b.x && (touching || Utils.isTouching(a, b))) {\r\n      if (b.y < a.y) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\r\n      return _doSwap();\r\n    }\r\n\r\n    /* different X will be weird (expect vertical swap) and different height overlap, so too complex. user regular layout instead\r\n    // else check if swapping would not collide with anything else (requiring a re-layout)\r\n    if (!this.collide(a, {x: a.x, y: a.y, w: b.w, h: b.h}, b) &&\r\n        !this.collide(a, {x: b.x, y: b.y, w: a.w, h: a.h}, b))\r\n      return _doSwap(); */\r\n    return false;\r\n  }\r\n\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    let nn: GridStackNode = {x: x || 0, y: y || 0, w: w || 1, h: h || 1};\r\n    return !this.collide(nn);\r\n  }\r\n\r\n  /** re-layout grid items to reclaim any empty space */\r\n  public compact(): GridStackEngine {\r\n    if (this.nodes.length === 0) return this;\r\n    this.batchUpdate()\r\n      ._sortNodes();\r\n    let copyNodes = this.nodes;\r\n    this.nodes = []; // pretend we have no nodes to conflict layout to start with...\r\n    copyNodes.forEach(node => {\r\n      if (!node.locked) {\r\n        node.autoPosition = true;\r\n      }\r\n      this.addNode(node, false); // 'false' for add event trigger\r\n      node._dirty = true; // will force attr update\r\n    });\r\n    return this.commit();\r\n  }\r\n\r\n  /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\r\n  public set float(val: boolean) {\r\n    if (this._float === val) return;\r\n    this._float = val || false;\r\n    if (!val) {\r\n      this._packNodes()._notify();\r\n    }\r\n  }\r\n\r\n  /** float getter method */\r\n  public get float(): boolean { return this._float || false; }\r\n\r\n  /** @internal */\r\n  private _sortNodes(dir?: -1 | 1): GridStackEngine {\r\n    this.nodes = Utils.sort(this.nodes, dir, this.column);\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */\r\n  private _packNodes(): GridStackEngine {\r\n    this._sortNodes(); // first to last\r\n\r\n    if (this.float) {\r\n      // restore original Y pos\r\n      this.nodes.forEach(n => {\r\n        if (n._updating || n._orig === undefined || n.y === n._orig.y) return;\r\n        let newY = n.y;\r\n        while (newY > n._orig.y) {\r\n          --newY;\r\n          let collide = this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\r\n          if (!collide) {\r\n            n._dirty = true;\r\n            n.y = newY;\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      // top gravity pack\r\n      this.nodes.forEach((n, i) => {\r\n        if (n.locked) return;\r\n        while (n.y > 0) {\r\n          let newY = i === 0 ? 0 : n.y - 1;\r\n          let canBeMoved = i === 0 || !this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\r\n          if (!canBeMoved) break;\r\n          // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\r\n          // and move items back. The user 'change' CB should detect changes from the original\r\n          // starting position instead.\r\n          n._dirty = (n.y !== newY);\r\n          n.y = newY;\r\n        }\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * given a random node, makes sure it's coordinates/values are valid in the current grid\r\n   * @param node to adjust\r\n   * @param resizing if out of bound, resize down or move into the grid to fit ?\r\n   */\r\n  public prepareNode(node: GridStackNode, resizing?: boolean): GridStackNode {\r\n    node = node || {};\r\n    node._id = node._id || GridStackEngine._idSeq++;\r\n\r\n    // if we're missing position, have the grid position us automatically (before we set them to 0,0)\r\n    if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\r\n      node.autoPosition = true;\r\n    }\r\n\r\n    // assign defaults for missing required fields\r\n    let defaults: GridStackNode = { x: 0, y: 0, w: 1, h: 1};\r\n    Utils.defaults(node, defaults);\r\n\r\n    if (!node.autoPosition) { delete node.autoPosition; }\r\n    if (!node.noResize) { delete node.noResize; }\r\n    if (!node.noMove) { delete node.noMove; }\r\n\r\n    // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\r\n    if (typeof node.x == 'string')      { node.x = Number(node.x); }\r\n    if (typeof node.y == 'string')      { node.y = Number(node.y); }\r\n    if (typeof node.w == 'string')  { node.w = Number(node.w); }\r\n    if (typeof node.h == 'string') { node.h = Number(node.h); }\r\n    if (isNaN(node.x))      { node.x = defaults.x; node.autoPosition = true; }\r\n    if (isNaN(node.y))      { node.y = defaults.y; node.autoPosition = true; }\r\n    if (isNaN(node.w))  { node.w = defaults.w; }\r\n    if (isNaN(node.h)) { node.h = defaults.h; }\r\n\r\n    return this.nodeBoundFix(node, resizing);\r\n  }\r\n\r\n  /** part2 of preparing a node to fit inside our grid - checks  for x,y from grid dimensions */\r\n  public nodeBoundFix(node: GridStackNode, resizing?: boolean): GridStackNode {\r\n\r\n    if (node.maxW) { node.w = Math.min(node.w, node.maxW); }\r\n    if (node.maxH) { node.h = Math.min(node.h, node.maxH); }\r\n    if (node.minW) { node.w = Math.max(node.w, node.minW); }\r\n    if (node.minH) { node.h = Math.max(node.h, node.minH); }\r\n\r\n    if (node.w > this.column) {\r\n      node.w = this.column;\r\n    } else if (node.w < 1) {\r\n      node.w = 1;\r\n    }\r\n\r\n    if (this.maxRow && node.h > this.maxRow) {\r\n      node.h = this.maxRow;\r\n    } else if (node.h < 1) {\r\n      node.h = 1;\r\n    }\r\n\r\n    if (node.x < 0) {\r\n      node.x = 0;\r\n    }\r\n    if (node.y < 0) {\r\n      node.y = 0;\r\n    }\r\n\r\n    if (node.x + node.w > this.column) {\r\n      if (resizing) {\r\n        node.w = this.column - node.x;\r\n      } else {\r\n        node.x = this.column - node.w;\r\n      }\r\n    }\r\n    if (this.maxRow && node.y + node.h > this.maxRow) {\r\n      if (resizing) {\r\n        node.h = this.maxRow - node.y;\r\n      } else {\r\n        node.y = this.maxRow - node.h;\r\n      }\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  public getDirtyNodes(verify?: boolean): GridStackNode[] {\r\n    // compare original x,y,w,h instead as _dirty can be a temporary state\r\n    if (verify) {\r\n      return this.nodes.filter(n => n._dirty && !Utils.samePos(n, n._orig));\r\n    }\r\n    return this.nodes.filter(n => n._dirty);\r\n  }\r\n\r\n  /** @internal call this to call onChange CB with dirty nodes */\r\n  private _notify(nodes?: GridStackNode | GridStackNode[], removeDOM = true): GridStackEngine {\r\n    if (this.batchMode) return this;\r\n    nodes = (nodes === undefined ? [] : (Array.isArray(nodes) ? nodes : [nodes]) );\r\n    let dirtyNodes = nodes.concat(this.getDirtyNodes());\r\n    this.onChange && this.onChange(dirtyNodes, removeDOM);\r\n    return this;\r\n  }\r\n\r\n  /** @internal remove dirty and last tried info */\r\n  public cleanNodes(): GridStackEngine {\r\n    if (this.batchMode) return this;\r\n    this.nodes.forEach(n => {\r\n      delete n._dirty;\r\n      delete n._lastTried;\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to save initial position/size to track real dirty state.\r\n   * Note: should be called right after we call change event (so next API is can detect changes)\r\n   * as well as right before we start move/resize/enter (so we can restore items to prev values) */\r\n  public saveInitial(): GridStackEngine {\r\n    this.nodes.forEach(n => {\r\n      n._orig = Utils.copyPos({}, n);\r\n      delete n._dirty;\r\n    });\r\n    this._hasLocked = this.nodes.some(n => n.locked);\r\n    return this;\r\n  }\r\n\r\n  /** @internal restore all the nodes back to initial values (called when we leave) */\r\n  public restoreInitial(): GridStackEngine {\r\n    this.nodes.forEach(n => {\r\n      if (Utils.samePos(n, n._orig)) return;\r\n      Utils.copyPos(n, n._orig);\r\n      n._dirty = true;\r\n    });\r\n    this._notify();\r\n    return this;\r\n  }\r\n\r\n  /** call to add the given node to our list, fixing collision and re-packing */\r\n  public addNode(node: GridStackNode, triggerAddEvent = false): GridStackNode {\r\n    let dup: GridStackNode;\r\n    if (dup = this.nodes.find(n => n._id === node._id)) return dup; // prevent inserting twice! return it instead.\r\n\r\n    node = this.prepareNode(node);\r\n    delete node._temporaryRemoved;\r\n    delete node._removeDOM;\r\n\r\n    if (node.autoPosition) {\r\n      this._sortNodes();\r\n\r\n      for (let i = 0;; ++i) {\r\n        let x = i % this.column;\r\n        let y = Math.floor(i / this.column);\r\n        if (x + node.w > this.column) {\r\n          continue;\r\n        }\r\n        let box = {x, y, w: node.w, h: node.h};\r\n        if (!this.nodes.find(n => Utils.isIntercepted(box, n))) {\r\n          node.x = x;\r\n          node.y = y;\r\n          delete node.autoPosition; // found our slot\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.nodes.push(node);\r\n    triggerAddEvent && this.addedNodes.push(node);\r\n\r\n    this._fixCollisions(node);\r\n    this._packNodes()\r\n      ._notify();\r\n    return node;\r\n  }\r\n\r\n  public removeNode(node: GridStackNode, removeDOM = true, triggerEvent = false): GridStackEngine {\r\n    if (!this.nodes.find(n => n === node)) {\r\n      // TEST console.log(`Error: GridStackEngine.removeNode() node._id=${node._id} not found!`)\r\n      return this;\r\n    }\r\n    if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)\r\n      this.removedNodes.push(node);\r\n    }\r\n    if (removeDOM) node._removeDOM = true; // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\r\n    // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\r\n    this.nodes = this.nodes.filter(n => n !== node);\r\n    return this._packNodes()\r\n      ._notify(node, removeDOM);\r\n  }\r\n\r\n  public removeAll(removeDOM = true): GridStackEngine {\r\n    delete this._layouts;\r\n    if (this.nodes.length === 0) return this;\r\n    removeDOM && this.nodes.forEach(n => n._removeDOM = true); // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\r\n    this.removedNodes = this.nodes;\r\n    this.nodes = [];\r\n    return this._notify(this.removedNodes, removeDOM);\r\n  }\r\n\r\n  /** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.\r\n   * In more complicated cases (maxRow) it will attempt at moving the item and fixing\r\n   * others in a clone first, then apply those changes if still within specs. */\r\n  public moveNodeCheck(node: GridStackNode, o: GridStackMoveOpts): boolean {\r\n    if (node.locked) return false;\r\n    if (!this.changedPosConstrain(node, o)) return false;\r\n    o.pack = true;\r\n\r\n    // simpler case: move item directly...\r\n    if (!this.maxRow/* && !this._hasLocked*/) {\r\n      return this.moveNode(node, o);\r\n    }\r\n\r\n    // complex case: create a clone with NO maxRow (will check for out of bounds at the end)\r\n    let clonedNode: GridStackNode;\r\n    let clone = new GridStackEngine({\r\n      column: this.column,\r\n      float: this.float,\r\n      nodes: this.nodes.map(n => {\r\n        if (n === node) {\r\n          clonedNode = {...n};\r\n          return clonedNode;\r\n        }\r\n        return {...n};\r\n      })\r\n    });\r\n    if (!clonedNode) return false;\r\n\r\n    let canMove = clone.moveNode(clonedNode, o);\r\n    // if maxRow make sure we are still valid size\r\n    if (this.maxRow && canMove) {\r\n      canMove = (clone.getRow() <= this.maxRow);\r\n      // turns out we can't grow, then see if we can swap instead (ex: full grid)\r\n      if (!canMove) {\r\n        let collide = this.collide(node, o);\r\n        if (collide && this.swap(node, collide)) {\r\n          this._notify();\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    if (!canMove) return false;\r\n\r\n    // if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!\r\n    // Note: we can't use the list directly as elements and other parts point to actual node, so copy content\r\n    clone.nodes.filter(n => n._dirty).forEach(c => {\r\n      let n = this.nodes.find(a => a._id === c._id);\r\n      if (!n) return;\r\n      Utils.copyPos(n, c);\r\n      n._dirty = true;\r\n    });\r\n    this._notify();\r\n    return true;\r\n  }\r\n\r\n  /** return true if can fit in grid height constrain only (always true if no maxRow) */\r\n  public willItFit(node: GridStackNode): boolean {\r\n    delete node._willFitPos;\r\n    if (!this.maxRow) return true;\r\n    // create a clone with NO maxRow and check if still within size\r\n    let clone = new GridStackEngine({\r\n      column: this.column,\r\n      float: this.float,\r\n      nodes: this.nodes.map(n => {return {...n}})\r\n    });\r\n    let n = {...node}; // clone node so we don't mod any settings on it but have full autoPosition and min/max as well! #1687\r\n    this.cleanupNode(n);\r\n    delete n.el; delete n._id; delete n.content; delete n.grid;\r\n    clone.addNode(n);\r\n    if (clone.getRow() <= this.maxRow) {\r\n      node._willFitPos = Utils.copyPos({}, n);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** true if x,y or w,h are different after clamping to min/max */\r\n  public changedPosConstrain(node: GridStackNode, p: GridStackPosition): boolean {\r\n    // make sure w,h are set\r\n    p.w = p.w || node.w;\r\n    p.h = p.h || node.h;\r\n    if (node.x !== p.x || node.y !== p.y) return true;\r\n    // check constrained w,h\r\n    if (node.maxW) { p.w = Math.min(p.w, node.maxW); }\r\n    if (node.maxH) { p.h = Math.min(p.h, node.maxH); }\r\n    if (node.minW) { p.w = Math.max(p.w, node.minW); }\r\n    if (node.minH) { p.h = Math.max(p.h, node.minH); }\r\n    return (node.w !== p.w || node.h !== p.h);\r\n  }\r\n\r\n  /** return true if the passed in node was actually moved (checks for no-op and locked) */\r\n  public moveNode(node: GridStackNode, o: GridStackMoveOpts): boolean {\r\n    if (!node || node.locked || !o) return false;\r\n    if (o.pack === undefined) o.pack = true;\r\n\r\n    // constrain the passed in values and check if we're still changing our node\r\n    if (typeof o.x !== 'number') { o.x = node.x; }\r\n    if (typeof o.y !== 'number') { o.y = node.y; }\r\n    if (typeof o.w !== 'number') { o.w = node.w; }\r\n    if (typeof o.h !== 'number') { o.h = node.h; }\r\n    let resizing = (node.w !== o.w || node.h !== o.h);\r\n    let nn: GridStackNode = Utils.copyPos({}, node, true); // get min/max out first, then opt positions next\r\n    Utils.copyPos(nn, o);\r\n    nn = this.nodeBoundFix(nn, resizing);\r\n    Utils.copyPos(o, nn);\r\n\r\n    if (Utils.samePos(node, o)) return false;\r\n    let prevPos: GridStackPosition = Utils.copyPos({}, node);\r\n\r\n    // during while() collisions make sure to check entire row so larger items don't leap frog small ones (push them all down)\r\n    let area = nn;\r\n    // if (this._useEntireRowArea(node, nn)) {\r\n    //   area = {x: 0, w: this.column, y: nn.y, h: nn.h};\r\n    // }\r\n\r\n    // check if we will need to fix collision at our new location\r\n    let collides = this.collideAll(node, area, o.skip);\r\n    let needToMove = true;\r\n    if (collides.length) {\r\n      // now check to make sure we actually collided over 50% surface area while dragging\r\n      let collide = node._moving && !o.nested ? this.collideCoverage(node, o, collides) : collides[0];\r\n      if (collide) {\r\n        needToMove = !this._fixCollisions(node, nn, collide, o); // check if already moved...\r\n      } else {\r\n        needToMove = false; // we didn't cover >50% for a move, skip...\r\n      }\r\n    }\r\n\r\n    // now move (to the original ask vs the collision version which might differ) and repack things\r\n    if (needToMove) {\r\n      node._dirty = true;\r\n      Utils.copyPos(node, nn);\r\n    }\r\n    if (o.pack) {\r\n      this._packNodes()\r\n        ._notify();\r\n    }\r\n    return !Utils.samePos(node, prevPos); // pack might have moved things back\r\n  }\r\n\r\n  public getRow(): number {\r\n    return this.nodes.reduce((row, n) => Math.max(row, n.y + n.h), 0);\r\n  }\r\n\r\n  public beginUpdate(node: GridStackNode): GridStackEngine {\r\n    if (!node._updating) {\r\n      node._updating = true;\r\n      delete node._skipDown;\r\n      if (!this.batchMode) this.saveInitial();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public endUpdate(): GridStackEngine {\r\n    let n = this.nodes.find(n => n._updating);\r\n    if (n) {\r\n      delete n._updating;\r\n      delete n._skipDown;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** saves the current layout returning a list of widgets for serialization */\r\n  public save(saveElement = true): GridStackNode[] {\r\n    let widgets: GridStackNode[] = [];\r\n    this._sortNodes();\r\n    this.nodes.forEach(n => {\r\n      let w: GridStackNode = {};\r\n      for (let key in n) { if (key[0] !== '_' && n[key] !== null && n[key] !== undefined ) w[key] = n[key]; }\r\n      // delete other internals\r\n      if (!saveElement) delete w.el;\r\n      delete w.grid;\r\n      // delete default values (will be re-created on read)\r\n      if (!w.autoPosition) delete w.autoPosition;\r\n      if (!w.noResize) delete w.noResize;\r\n      if (!w.noMove) delete w.noMove;\r\n      if (!w.locked) delete w.locked;\r\n      widgets.push(w);\r\n    });\r\n    return widgets;\r\n  }\r\n\r\n  /** @internal called whenever a node is added or moved - updates the cached layouts */\r\n  public layoutsNodesChange(nodes: GridStackNode[]): GridStackEngine {\r\n    if (!this._layouts || this._ignoreLayoutsNodeChange) return this;\r\n    // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\r\n    this._layouts.forEach((layout, column) => {\r\n      if (!layout || column === this.column) return this;\r\n      if (column < this.column) {\r\n        this._layouts[column] = undefined;\r\n      }\r\n      else {\r\n        // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\r\n        // Note: we don't need to check against out of bound scaling/moving as that will be done when using those cache values.\r\n        nodes.forEach(node => {\r\n          let n = layout.find(l => l._id === node._id);\r\n          if (!n) return this; // no cache for new nodes. Will use those values.\r\n          let ratio = column / this.column;\r\n          // Y changed, push down same amount\r\n          // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\r\n          if (node.y !== node._orig.y) {\r\n            n.y += (node.y - node._orig.y);\r\n          }\r\n          // X changed, scale from new position\r\n          if (node.x !== node._orig.x) {\r\n            n.x = Math.round(node.x * ratio);\r\n          }\r\n          // width changed, scale from new width\r\n          if (node.w !== node._orig.w) {\r\n            n.w = Math.round(node.w * ratio);\r\n          }\r\n          // ...height always carries over from cache\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @internal Called to scale the widget width & position up/down based on the column change.\r\n   * Note we store previous layouts (especially original ones) to make it possible to go\r\n   * from say 12 -> 1 -> 12 and get back to where we were.\r\n   *\r\n   * @param oldColumn previous number of columns\r\n   * @param column  new column number\r\n   * @param nodes different sorted list (ex: DOM order) instead of current list\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n   */\r\n  public updateNodeWidths(oldColumn: number, column: number, nodes: GridStackNode[], layout: ColumnOptions = 'moveScale'): GridStackEngine {\r\n    if (!this.nodes.length || oldColumn === column) return this;\r\n\r\n    // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data\r\n    this.cacheLayout(this.nodes, oldColumn);\r\n\r\n    // if we're going to 1 column and using DOM order rather than default sorting, then generate that layout\r\n    if (column === 1 && nodes && nodes.length) {\r\n      let top = 0;\r\n      nodes.forEach(n => {\r\n        n.x = 0;\r\n        n.w = 1;\r\n        n.y = Math.max(n.y, top);\r\n        top = n.y + n.h;\r\n      });\r\n    } else {\r\n      nodes = Utils.sort(this.nodes, -1, oldColumn); // current column reverse sorting so we can insert last to front (limit collision)\r\n    }\r\n\r\n    // see if we have cached previous layout.\r\n    let cacheNodes = this._layouts[column] || [];\r\n    // if not AND we are going up in size start with the largest layout as down-scaling is more accurate\r\n    let lastIndex = this._layouts.length - 1;\r\n    if (cacheNodes.length === 0 && column > oldColumn && column < lastIndex) {\r\n      cacheNodes = this._layouts[lastIndex] || [];\r\n      if (cacheNodes.length) {\r\n        // pretend we came from that larger column by assigning those values as starting point\r\n        oldColumn = lastIndex;\r\n        cacheNodes.forEach(cacheNode => {\r\n          let j = nodes.findIndex(n => n._id === cacheNode._id);\r\n          if (j !== -1) {\r\n            // still current, use cache info positions\r\n            nodes[j].x = cacheNode.x;\r\n            nodes[j].y = cacheNode.y;\r\n            nodes[j].w = cacheNode.w;\r\n          }\r\n        });\r\n        cacheNodes = []; // we still don't have new column cached data... will generate from larger one.\r\n      }\r\n    }\r\n\r\n    // if we found cache re-use those nodes that are still current\r\n    let newNodes: GridStackNode[] = [];\r\n    cacheNodes.forEach(cacheNode => {\r\n      let j = nodes.findIndex(n => n._id === cacheNode._id);\r\n      if (j !== -1) {\r\n        // still current, use cache info positions\r\n        nodes[j].x = cacheNode.x;\r\n        nodes[j].y = cacheNode.y;\r\n        nodes[j].w = cacheNode.w;\r\n        newNodes.push(nodes[j]);\r\n        nodes.splice(j, 1);\r\n      }\r\n    });\r\n    // ...and add any extra non-cached ones\r\n    if (nodes.length) {\r\n      if (typeof layout === 'function') {\r\n        layout(column, oldColumn, newNodes, nodes);\r\n      } else {\r\n        let ratio = column / oldColumn;\r\n        let move = (layout === 'move' || layout === 'moveScale');\r\n        let scale = (layout === 'scale' || layout === 'moveScale');\r\n        nodes.forEach(node => {\r\n          node.x = (column === 1 ? 0 : (move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1)));\r\n          node.w = ((column === 1 || oldColumn === 1) ? 1 :\r\n            scale ? (Math.round(node.w * ratio) || 1) : (Math.min(node.w, column)));\r\n          newNodes.push(node);\r\n        });\r\n        nodes = [];\r\n      }\r\n    }\r\n\r\n    // finally re-layout them in reverse order (to get correct placement)\r\n    newNodes = Utils.sort(newNodes, -1, column);\r\n    this._ignoreLayoutsNodeChange = true;\r\n    this.batchUpdate();\r\n    this.nodes = []; // pretend we have no nodes to start with (we use same structures) to simplify layout\r\n    newNodes.forEach(node => {\r\n      this.addNode(node, false); // 'false' for add event trigger\r\n      node._dirty = true; // force attr update\r\n    }, this);\r\n    this.commit();\r\n    delete this._ignoreLayoutsNodeChange;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * call to cache the given layout internally to the given location so we can restore back when column changes size\r\n   * @param nodes list of nodes\r\n   * @param column corresponding column index to save it under\r\n   * @param clear if true, will force other caches to be removed (default false)\r\n   */\r\n  public cacheLayout(nodes: GridStackNode[], column: number, clear = false): GridStackEngine {\r\n    let copy: Layout[] = [];\r\n    nodes.forEach((n, i) => {\r\n      n._id = n._id || GridStackEngine._idSeq++; // make sure we have an id in case this is new layout, else re-use id already set\r\n      copy[i] = {x: n.x, y: n.y, w: n.w, _id: n._id} // only thing we change is x,y,w and id to find it back\r\n    });\r\n    this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\r\n    this._layouts[column] = copy;\r\n    return this;\r\n  }\r\n\r\n\r\n  /** called to remove all internal values but the _id */\r\n  public cleanupNode(node: GridStackNode): GridStackEngine {\r\n    for (let prop in node) {\r\n      if (prop[0] === '_' && prop !== '_id') delete node[prop];\r\n    }\r\n    return this;\r\n  }\r\n}\r\n\r\n/** @internal class to store per column layout bare minimal info (subset of GridStackWidget) */\r\ninterface Layout {\r\n  x: number;\r\n  y: number;\r\n  w: number;\r\n  _id: number; // so we can find full node back\r\n}\r\n","/**\r\n * index-h5.ts 4.1.0 - everything you need for a Grid that uses HTML5 native drag&drop\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\nexport * from './gridstack-ddi';\r\nexport * from './gridstack';\r\n\r\nexport * from './h5/gridstack-dd-native';\r\n\r\n// declare module 'gridstack'; for umd ?\r\n","/*!\r\n * GridStack 4.1.0\r\n * https://gridstackjs.com/\r\n *\r\n * Copyright (c) 2021 Alain Dumesny\r\n * see root license https://github.com/gridstack/gridstack.js/tree/master/LICENSE\r\n */\r\n\r\nimport { GridStackEngine } from './gridstack-engine';\r\nimport { Utils, HeightData } from './utils';\r\nimport { ColumnOptions, GridItemHTMLElement, GridStackElement, GridStackEventHandlerCallback,\r\n  GridStackNode, GridStackOptions, GridStackWidget, numberOrString, DDUIData, DDDragInOpt, GridStackPosition } from './types';\r\nimport { GridStackDDI } from './gridstack-ddi';\r\n\r\n// export all dependent file as well to make it easier for users to just import the main file\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\nexport * from './gridstack-ddi';\r\n\r\nexport interface GridHTMLElement extends HTMLElement {\r\n  gridstack?: GridStack; // grid's parent DOM element points back to grid class\r\n}\r\nexport type GridStackEvent = 'added' | 'change' | 'disable' | 'drag' | 'dragstart' | 'dragstop' | 'dropped' |\r\n  'enable' | 'removed' | 'resize' | 'resizestart' | 'resizestop';\r\n\r\n/** Defines the coordinates of an object */\r\nexport interface MousePosition {\r\n  top: number;\r\n  left: number;\r\n}\r\n\r\n/** Defines the position of a cell inside the grid*/\r\nexport interface CellPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface GridCSSStyleSheet extends CSSStyleSheet {\r\n  _id?: string; // random id we will use to style us\r\n  _max?: number; // internal tracker of the max # of rows we created\\\r\n}\r\n\r\n// default values for grid options - used during init and when saving out\r\nconst GridDefaults: GridStackOptions = {\r\n  column: 12,\r\n  minRow: 0,\r\n  maxRow: 0,\r\n  itemClass: 'grid-stack-item',\r\n  placeholderClass: 'grid-stack-placeholder',\r\n  placeholderText: '',\r\n  handle: '.grid-stack-item-content',\r\n  handleClass: null,\r\n  styleInHead: false,\r\n  cellHeight: 'auto',\r\n  cellHeightThrottle: 100,\r\n  margin: 10,\r\n  auto: true,\r\n  minWidth: 768,\r\n  float: false,\r\n  staticGrid: false,\r\n  animate: true,\r\n  alwaysShowResizeHandle: false,\r\n  resizable: {\r\n    autoHide: true,\r\n    handles: 'se'\r\n  },\r\n  draggable: {\r\n    handle: '.grid-stack-item-content',\r\n    scroll: false,\r\n    appendTo: 'body'\r\n  },\r\n  disableDrag: false,\r\n  disableResize: false,\r\n  rtl: 'auto',\r\n  removable: false,\r\n  removableOptions: {\r\n    accept: '.grid-stack-item'\r\n  },\r\n  marginUnit: 'px',\r\n  cellHeightUnit: 'px',\r\n  disableOneColumnMode: false,\r\n  oneColumnModeDomSort: false\r\n};\r\n\r\n/**\r\n * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.\r\n * Note: your grid elements MUST have the following classes for the CSS layout to work:\r\n * @example\r\n * <div class=\"grid-stack\">\r\n *   <div class=\"grid-stack-item\">\r\n *     <div class=\"grid-stack-item-content\">Item 1</div>\r\n *   </div>\r\n * </div>\r\n */\r\nexport class GridStack {\r\n\r\n  /**\r\n   * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will\r\n   * simply return the existing instance (ignore any passed options). There is also an initAll() version that support\r\n   * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.\r\n   * @param options grid options (optional)\r\n   * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   *\r\n   * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\r\n   * let grid = document.querySelector('.grid-stack').gridstack;\r\n   */\r\n  public static init(options: GridStackOptions = {}, elOrString: GridStackElement = '.grid-stack'): GridStack {\r\n    let el = GridStack.getGridElement(elOrString);\r\n    if (!el) {\r\n      if (typeof elOrString === 'string') {\r\n        console.error('GridStack.initAll() no grid was found with selector \"' + elOrString + '\" - element missing or wrong selector ?' +\r\n        '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n      } else {\r\n        console.error('GridStack.init() no grid element was passed.');\r\n      }\r\n      return null;\r\n    }\r\n    if (!el.gridstack) {\r\n      el.gridstack = new GridStack(el, {...options});\r\n    }\r\n    return el.gridstack\r\n  }\r\n\r\n  /**\r\n   * Will initialize a list of elements (given a selector) and return an array of grids.\r\n   * @param options grid options (optional)\r\n   * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grids = GridStack.initAll();\r\n   * grids.forEach(...)\r\n   */\r\n  public static initAll(options: GridStackOptions = {}, selector = '.grid-stack'): GridStack[] {\r\n    let grids: GridStack[] = [];\r\n    GridStack.getGridElements(selector).forEach(el => {\r\n      if (!el.gridstack) {\r\n        el.gridstack = new GridStack(el, {...options});\r\n        delete options.dragIn; delete options.dragInOptions; // only need to be done once (really a static global thing, not per grid)\r\n      }\r\n      grids.push(el.gridstack);\r\n    });\r\n    if (grids.length === 0) {\r\n      console.error('GridStack.initAll() no grid was found with selector \"' + selector + '\" - element missing or wrong selector ?' +\r\n      '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n    }\r\n    return grids;\r\n  }\r\n\r\n  /**\r\n   * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then\r\n   * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from\r\n   * JSON serialized data, including options.\r\n   * @param parent HTML element parent to the grid\r\n   * @param opt grids options used to initialize the grid, and list of children\r\n   */\r\n  public static addGrid(parent: HTMLElement, opt: GridStackOptions = {}): GridStack {\r\n    if (!parent) return null;\r\n\r\n    // create the grid element, but check if the passed 'parent' already has grid styling and should be used instead\r\n    let el = parent;\r\n    if (!parent.classList.contains('grid-stack')) {\r\n      let doc = document.implementation.createHTMLDocument();\r\n      doc.body.innerHTML = `<div class=\"grid-stack ${opt.class || ''}\"></div>`;\r\n      el = doc.body.children[0] as HTMLElement;\r\n      parent.appendChild(el);\r\n    }\r\n\r\n    // create grid class and load any children\r\n    let grid = GridStack.init(opt, el);\r\n    if (grid.opts.children) {\r\n      let children = grid.opts.children;\r\n      delete grid.opts.children;\r\n      grid.load(children);\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  /** scoping so users can call GridStack.Utils.sort() for example */\r\n  public static Utils = Utils;\r\n\r\n  /** scoping so users can call new GridStack.Engine(12) for example */\r\n  public static Engine = GridStackEngine;\r\n\r\n  /** the HTML element tied to this grid after it's been initialized */\r\n  public el: GridHTMLElement;\r\n\r\n  /** engine used to implement non DOM grid functionality */\r\n  public engine: GridStackEngine;\r\n\r\n  /** grid options - public for classes to access, but use methods to modify! */\r\n  public opts: GridStackOptions;\r\n\r\n  /** @internal create placeholder DIV as needed */\r\n  public get placeholder(): HTMLElement {\r\n    if (!this._placeholder) {\r\n      let placeholderChild = document.createElement('div'); // child so padding match item-content\r\n      placeholderChild.className = 'placeholder-content';\r\n      if (this.opts.placeholderText) {\r\n        placeholderChild.innerHTML = this.opts.placeholderText;\r\n      }\r\n      this._placeholder = document.createElement('div');\r\n      this._placeholder.classList.add(this.opts.placeholderClass, GridDefaults.itemClass, this.opts.itemClass);\r\n      this.placeholder.appendChild(placeholderChild);\r\n    }\r\n    return this._placeholder;\r\n  }\r\n  /** @internal */\r\n  private _placeholder: HTMLElement;\r\n  /** @internal */\r\n  private _oneColumnMode: boolean;\r\n  /** @internal */\r\n  private _prevColumn: number;\r\n  /** @internal */\r\n  private _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal */\r\n  public _gsEventHandler = {};\r\n  /** @internal */\r\n  private _styles: GridCSSStyleSheet;\r\n  /** @internal flag to keep cells square during resize */\r\n  private _isAutoCellHeight: boolean;\r\n  /** @internal track event binding to window resize so we can remove */\r\n  private _windowResizeBind: () => void;\r\n  /** @internal limit auto cell resizing method */\r\n  private _cellHeightThrottle: () => void;\r\n  /** @internal true when loading items to insert first rather than append */\r\n  private _insertNotAppend: boolean;\r\n  /** @internal extra row added when dragging at the bottom of the grid */\r\n  private _extraDragRow = 0;\r\n\r\n  /**\r\n   * Construct a grid item from the given element and options\r\n   * @param el\r\n   * @param opts\r\n   */\r\n  public constructor(el: GridHTMLElement, opts: GridStackOptions = {}) {\r\n    this.el = el; // exposed HTML element to the user\r\n    opts = opts || {}; // handles null/undefined/0\r\n\r\n    // if row property exists, replace minRow and maxRow instead\r\n    if (opts.row) {\r\n      opts.minRow = opts.maxRow = opts.row;\r\n      delete opts.row;\r\n    }\r\n    let rowAttr = Utils.toNumber(el.getAttribute('gs-row'));\r\n\r\n    // elements attributes override any passed options (like CSS style) - merge the two together\r\n    let defaults: GridStackOptions = {...GridDefaults,\r\n      column: Utils.toNumber(el.getAttribute('gs-column')) || 12,\r\n      minRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-min-row')) || 0,\r\n      maxRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-max-row')) || 0,\r\n      staticGrid: Utils.toBool(el.getAttribute('gs-static')) || false,\r\n      _styleSheetClass: 'grid-stack-instance-' + (Math.random() * 10000).toFixed(0),\r\n      alwaysShowResizeHandle: opts.alwaysShowResizeHandle || false,\r\n      resizable: {\r\n        autoHide: !(opts.alwaysShowResizeHandle || false),\r\n        handles: 'se'\r\n      },\r\n      draggable: {\r\n        handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) || '.grid-stack-item-content',\r\n        scroll: false,\r\n        appendTo: 'body'\r\n      },\r\n      removableOptions: {\r\n        accept: '.' + (opts.itemClass || 'grid-stack-item')\r\n      },\r\n    };\r\n    if (el.getAttribute('gs-animate')) { // default to true, but if set to false use that instead\r\n      defaults.animate = Utils.toBool(el.getAttribute('gs-animate'))\r\n    }\r\n\r\n    this.opts = Utils.defaults(opts, defaults);\r\n    opts = null; // make sure we use this.opts instead\r\n    this.initMargin(); // part of settings defaults...\r\n\r\n    // Now check if we're loading into 1 column mode FIRST so we don't do un-necessary work (like cellHeight = width / 12 then go 1 column)\r\n    if (this.opts.column !== 1 && !this.opts.disableOneColumnMode && this._widthOrContainer() <= this.opts.minWidth) {\r\n      this._prevColumn = this.opts.column;\r\n      this.opts.column = 1;\r\n    }\r\n\r\n    if (this.opts.rtl === 'auto') {\r\n      this.opts.rtl = (el.style.direction === 'rtl');\r\n    }\r\n\r\n    if (this.opts.rtl) {\r\n      this.el.classList.add('grid-stack-rtl');\r\n    }\r\n\r\n    // check if we're been nested, and if so update our style and keep pointer around (used during save)\r\n    let parentGridItemEl = Utils.closestByClass(this.el, GridDefaults.itemClass) as GridItemHTMLElement;\r\n    if (parentGridItemEl && parentGridItemEl.gridstackNode) {\r\n      this.opts._isNested = parentGridItemEl.gridstackNode;\r\n      this.opts._isNested.subGrid = this;\r\n      this.el.classList.add('grid-stack-nested');\r\n    }\r\n\r\n    this._isAutoCellHeight = (this.opts.cellHeight === 'auto');\r\n    if (this._isAutoCellHeight || this.opts.cellHeight === 'initial') {\r\n      // make the cell content square initially (will use resize/column event to keep it square)\r\n      this.cellHeight(undefined, false);\r\n    } else {\r\n      this.cellHeight(this.opts.cellHeight, false);\r\n    }\r\n\r\n    this.el.classList.add(this.opts._styleSheetClass);\r\n\r\n    this._setStaticClass();\r\n\r\n    this.engine = new GridStackEngine({\r\n      column: this.opts.column,\r\n      float: this.opts.float,\r\n      maxRow: this.opts.maxRow,\r\n      onChange: (cbNodes, removeDOM = true) => {\r\n        let maxH = 0;\r\n        this.engine.nodes.forEach(n => { maxH = Math.max(maxH, n.y + n.h) });\r\n        cbNodes.forEach(n => {\r\n          let el = n.el;\r\n          if (removeDOM && n._removeDOM) { // TODO: do we need to pass 'removeDOM' ?\r\n            if (el) el.remove();\r\n            delete n._removeDOM;\r\n          } else {\r\n            this._writePosAttr(el, n);\r\n          }\r\n        });\r\n        this._updateStyles(false, maxH); // false = don't recreate, just append if need be\r\n      }\r\n    });\r\n\r\n    if (this.opts.auto) {\r\n      this.batchUpdate(); // prevent in between re-layout #1535 TODO: this only set float=true, need to prevent collision check...\r\n      let elements: {el: HTMLElement; i: number}[] = [];\r\n      this.getGridItems().forEach(el => { // get dom elements (not nodes yet)\r\n        let x = parseInt(el.getAttribute('gs-x'));\r\n        let y = parseInt(el.getAttribute('gs-y'));\r\n        elements.push({\r\n          el,\r\n          // if x,y are missing (autoPosition) add them to end of list - but keep their respective DOM order\r\n          i: (Number.isNaN(x) ? 1000 : x) + (Number.isNaN(y) ? 1000 : y) * this.opts.column\r\n        });\r\n      });\r\n      elements.sort((a, b) => a.i - b.i).forEach(e => this._prepareElement(e.el));\r\n      this.commit();\r\n    }\r\n\r\n    this.setAnimation(this.opts.animate);\r\n\r\n    this._updateStyles();\r\n    if (this.opts.column != 12) {\r\n      this.el.classList.add('grid-stack-' + this.opts.column);\r\n    }\r\n\r\n    // legacy support to appear 'per grid` options when really global.\r\n    if (this.opts.dragIn) GridStack.setupDragIn(this.opts.dragIn, this.opts.dragInOptions);\r\n    delete this.opts.dragIn;\r\n    delete this.opts.dragInOptions;\r\n\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this._updateWindowResizeEvent();\r\n  }\r\n\r\n  /**\r\n   * add a new widget and returns it.\r\n   *\r\n   * Widget will be always placed even if result height is more than actual grid height.\r\n   * You need to use `willItFit()` before calling addWidget for additional check.\r\n   * See also `makeWidget()`.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.addWidget({w: 3, content: 'hello'});\r\n   * grid.addWidget('<div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">hello</div></div>', {w: 3});\r\n   *\r\n   * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add\r\n   * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget\r\n   */\r\n  public addWidget(els?: GridStackWidget | GridStackElement, options?: GridStackWidget): GridItemHTMLElement {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `addWidget(el, x, y, width...)` is deprecated. Use `addWidget({x, y, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1,\r\n        opt: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++],\r\n          minW:a[i++], maxW:a[i++], minH:a[i++], maxH:a[i++], id:a[i++] };\r\n      return this.addWidget(els, opt);\r\n    }\r\n\r\n    function isGridStackWidget(w: GridStackWidget): w is GridStackWidget { // https://medium.com/ovrsea/checking-the-type-of-an-object-in-typescript-the-type-guards-24d98d9119b0\r\n      return w.x !== undefined || w.y !== undefined || w.w !== undefined || w.h !== undefined || w.content !== undefined ? true : false;\r\n    }\r\n\r\n    let el: HTMLElement;\r\n    if (typeof els === 'string') {\r\n      let doc = document.implementation.createHTMLDocument();\r\n      doc.body.innerHTML = els;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else if (arguments.length === 0 || arguments.length === 1 && isGridStackWidget(els)) {\r\n      let content = els ? (els as GridStackWidget).content || '' : '';\r\n      options = els;\r\n      let doc = document.implementation.createHTMLDocument();\r\n      doc.body.innerHTML = `<div class=\"grid-stack-item ${this.opts.itemClass || ''}\"><div class=\"grid-stack-item-content\">${content}</div></div>`;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else {\r\n      el = els as HTMLElement;\r\n    }\r\n\r\n    // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos\r\n    // as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz) before adding the node.\r\n    // So make sure we load any DOM attributes that are not specified in passed in options (which override)\r\n    let domAttr = this._readAttr(el);\r\n    options = {...(options || {})};  // make a copy before we modify in case caller re-uses it\r\n    Utils.defaults(options, domAttr);\r\n    this.engine.prepareNode(options);\r\n    this._writeAttr(el, options);\r\n\r\n    if (this._insertNotAppend) {\r\n      this.el.prepend(el);\r\n    } else {\r\n      this.el.appendChild(el);\r\n    }\r\n\r\n    // similar to makeWidget() that doesn't read attr again and worse re-create a new node and loose any _id\r\n    this._prepareElement(el, true, options);\r\n    this._updateContainerHeight();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * saves the current layout returning a list of widgets for serialization (with default to save content), which might include any nested grids.\r\n   * Optionally you can also save the grid with options itself, so you can call the new GridStack.addGrid()\r\n   * to recreate everything from scratch. GridStackOptions.children would then contain the widget list.\r\n   */\r\n  public save(saveContent = true, saveGridOpt = false): GridStackWidget[] | GridStackOptions {\r\n    // return copied nodes we can modify at will...\r\n    let list = this.engine.save(saveContent);\r\n\r\n    // check for HTML content as well\r\n    if (saveContent) {\r\n      list.forEach(n => {\r\n        if (n.el && !n.subGrid) { // sub-grid are saved differently, not plain content\r\n          let sub = n.el.querySelector('.grid-stack-item-content');\r\n          n.content = sub ? sub.innerHTML : undefined;\r\n          if (!n.content) delete n.content;\r\n          delete n.el;\r\n        }\r\n      });\r\n    }\r\n\r\n    // check if save entire grid options (needed for recursive) + children...\r\n    if (saveGridOpt) {\r\n\r\n      // check for nested grid\r\n      list.forEach(n => {\r\n        if (n.subGrid) {\r\n          n.subGrid = (n.subGrid as GridStack).save(saveContent, saveGridOpt) as GridStackOptions;\r\n        }\r\n      })\r\n\r\n      let o: GridStackOptions = {...this.opts};\r\n      // delete default values that will be recreated on launch\r\n      if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {\r\n        o.margin = o.marginTop;\r\n        delete o.marginTop; delete o.marginRight; delete o.marginBottom; delete o.marginLeft;\r\n      }\r\n      if (o.rtl === (this.el.style.direction === 'rtl')) { o.rtl = 'auto' }\r\n      if (this._isAutoCellHeight) { o.cellHeight = 'auto' }\r\n      Utils.removeInternalAndSame(o, GridDefaults);\r\n      o.children = list;\r\n      return o;\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  /**\r\n   * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.\r\n   *\r\n   * @param layout list of widgets definition to update/create\r\n   * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving\r\n   * the user control of insertion.\r\n   *\r\n   * @example\r\n   * see http://gridstackjs.com/demo/serialization.html\r\n   **/\r\n  public load(layout: GridStackWidget[], addAndRemove: boolean | ((g: GridStack, w: GridStackWidget, add: boolean) => GridItemHTMLElement)  = true): GridStack {\r\n    let items = GridStack.Utils.sort(layout, -1, this._prevColumn || this.opts.column);\r\n    this._insertNotAppend = true; // since create in reverse order...\r\n\r\n    // if we're loading a layout into 1 column (_prevColumn is set only when going to 1) and items don't fit, make sure to save\r\n    // the original wanted layout so we can scale back up correctly #1471\r\n    if (this._prevColumn && this._prevColumn !== this.opts.column && items.some(n => (n.x + n.w) > this.opts.column)) {\r\n      this._ignoreLayoutsNodeChange = true; // skip layout update\r\n      this.engine.cacheLayout(items, this._prevColumn, true);\r\n    }\r\n\r\n    let removed: GridStackNode[] = [];\r\n    this.batchUpdate();\r\n\r\n    // see if any items are missing from new layout and need to be removed first\r\n    if (addAndRemove) {\r\n      let copyNodes = [...this.engine.nodes]; // don't loop through array you modify\r\n      copyNodes.forEach(n => {\r\n        let item = items.find(w => n.id === w.id);\r\n        if (!item) {\r\n          if (typeof(addAndRemove) === 'function') {\r\n            addAndRemove(this, n, false);\r\n          } else {\r\n            removed.push(n); // batch keep track\r\n            this.removeWidget(n.el, true, false);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // now add/update the widgets\r\n    items.forEach(w => {\r\n      let item = (w.id || w.id === 0) ? this.engine.nodes.find(n => n.id === w.id) : undefined;\r\n      if (item) {\r\n        this.update(item.el, w);\r\n        if (w.subGrid && (w.subGrid as GridStackOptions).children) { // update any sub grid as well\r\n          let sub = item.el.querySelector('.grid-stack') as GridHTMLElement;\r\n          if (sub && sub.gridstack) {\r\n            sub.gridstack.load((w.subGrid as GridStackOptions).children); // TODO: support updating grid options ?\r\n            this._insertNotAppend = true; // got reset by above call\r\n          }\r\n        }\r\n      } else if (addAndRemove) {\r\n        if (typeof(addAndRemove) === 'function') {\r\n          w = addAndRemove(this, w, true).gridstackNode;\r\n        } else {\r\n          w = this.addWidget(w).gridstackNode;\r\n        }\r\n        if (w.subGrid) { // see if there is a sub-grid to create too\r\n          let content = w.el.querySelector('.grid-stack-item-content') as HTMLElement;\r\n          w.subGrid = GridStack.addGrid(content, w.subGrid as GridStackOptions);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.engine.removedNodes = removed;\r\n    this.commit();\r\n\r\n    // after commit, clear that flag\r\n    delete this._ignoreLayoutsNodeChange;\r\n    delete this._insertNotAppend;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Initializes batch updates. You will see no changes until `commit()` method is called.\r\n   */\r\n  public batchUpdate(): GridStack {\r\n    this.engine.batchUpdate();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets current cell height.\r\n   */\r\n  public getCellHeight(forcePixel = false): number {\r\n    if (this.opts.cellHeight && this.opts.cellHeight !== 'auto' &&\r\n       (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === 'px')) {\r\n      return this.opts.cellHeight as number;\r\n    }\r\n    // else do entire grid and # of rows\r\n    // or get first cell height ?\r\n    // let el = this.el.querySelector('.' + this.opts.itemClass) as HTMLElement;\r\n    // let height = Utils.toNumber(el.getAttribute('gs-h'));\r\n    // return Math.round(el.offsetHeight / height);\r\n    return Math.round(this.el.getBoundingClientRect().height) / parseInt(this.el.getAttribute('gs-current-row'));\r\n  }\r\n\r\n  /**\r\n   * Update current cell height - see `GridStackOptions.cellHeight` for format.\r\n   * This method rebuilds an internal CSS style sheet.\r\n   * Note: You can expect performance issues if call this method too often.\r\n   *\r\n   * @param val the cell height. If not passed (undefined), cells content will be made square (match width minus margin),\r\n   * if pass 0 the CSS will be generated by the application instead.\r\n   * @param update (Optional) if false, styles will not be updated\r\n   *\r\n   * @example\r\n   * grid.cellHeight(100); // same as 100px\r\n   * grid.cellHeight('70px');\r\n   * grid.cellHeight(grid.cellWidth() * 1.2);\r\n   */\r\n  public cellHeight(val?: numberOrString, update = true): GridStack {\r\n\r\n    // if not called internally, check if we're changing mode\r\n    if (update && val !== undefined) {\r\n      if (this._isAutoCellHeight !== (val === 'auto')) {\r\n        this._isAutoCellHeight = (val === 'auto');\r\n        this._updateWindowResizeEvent();\r\n      }\r\n    }\r\n    if (val === 'initial' || val === 'auto') { val = undefined; }\r\n\r\n    // make item content be square\r\n    if (val === undefined) {\r\n      let marginDiff = - (this.opts.marginRight as number) - (this.opts.marginLeft as number)\r\n        + (this.opts.marginTop as number) + (this.opts.marginBottom as number);\r\n      val = this.cellWidth() + marginDiff;\r\n    }\r\n\r\n    let data = Utils.parseHeight(val);\r\n    if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {\r\n      return this;\r\n    }\r\n    this.opts.cellHeightUnit = data.unit;\r\n    this.opts.cellHeight = data.h;\r\n\r\n    if (update) {\r\n      this._updateStyles(true, this.getRow()); // true = force re-create, for that # of rows\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** Gets current cell width. */\r\n  public cellWidth(): number {\r\n    return this._widthOrContainer() / this.opts.column;\r\n  }\r\n  /** return our expected width (or parent) for 1 column check */\r\n  private _widthOrContainer(): number {\r\n    // use `offsetWidth` or `clientWidth` (no scrollbar) ?\r\n    // https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively\r\n    return (this.el.clientWidth || this.el.parentElement.clientWidth || window.innerWidth);\r\n  }\r\n\r\n  /**\r\n   * Finishes batch updates. Updates DOM nodes. You must call it after batchUpdate.\r\n   */\r\n  public commit(): GridStack {\r\n    this.engine.commit();\r\n    this._triggerRemoveEvent();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /** re-layout grid items to reclaim any empty space */\r\n  public compact(): GridStack {\r\n    this.engine.compact();\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,\r\n   * as well as cache the original layout so you can revert back to previous positions without loss.\r\n   * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],\r\n   * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)\r\n   * @param column - Integer > 0 (default 12).\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n   */\r\n  public column(column: number, layout: ColumnOptions = 'moveScale'): GridStack {\r\n    if (this.opts.column === column) return this;\r\n    let oldColumn = this.opts.column;\r\n\r\n    // if we go into 1 column mode (which happens if we're sized less than minW unless disableOneColumnMode is on)\r\n    // then remember the original columns so we can restore.\r\n    if (column === 1) {\r\n      this._prevColumn = oldColumn;\r\n    } else {\r\n      delete this._prevColumn;\r\n    }\r\n\r\n    this.el.classList.remove('grid-stack-' + oldColumn);\r\n    this.el.classList.add('grid-stack-' + column);\r\n    this.opts.column = this.engine.column = column;\r\n\r\n    // update the items now - see if the dom order nodes should be passed instead (else default to current list)\r\n    let domNodes: GridStackNode[];\r\n    if (column === 1 && this.opts.oneColumnModeDomSort) {\r\n      domNodes = [];\r\n      this.getGridItems().forEach(el => { // get dom elements in order\r\n        if (el.gridstackNode) { domNodes.push(el.gridstackNode); }\r\n      });\r\n      if (!domNodes.length) { domNodes = undefined; }\r\n    }\r\n    this.engine.updateNodeWidths(oldColumn, column, domNodes, layout);\r\n    if (this._isAutoCellHeight) this.cellHeight();\r\n\r\n    // and trigger our event last...\r\n    this._ignoreLayoutsNodeChange = true; // skip layout update\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the number of columns in the grid (default 12)\r\n   */\r\n  public getColumn(): number {\r\n    return this.opts.column;\r\n  }\r\n\r\n  /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children in DOM order */\r\n  public getGridItems(): GridItemHTMLElement[] {\r\n    return Array.from(this.el.children)\r\n      .filter((el: HTMLElement) => el.matches('.' + this.opts.itemClass) && !el.matches('.' + this.opts.placeholderClass)) as GridItemHTMLElement[];\r\n  }\r\n\r\n  /**\r\n   * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.\r\n   * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).\r\n   */\r\n  public destroy(removeDOM = true): GridStack {\r\n    if (!this.el) return; // prevent multiple calls\r\n    this._updateWindowResizeEvent(true);\r\n    this.setStatic(true); // permanently removes DD\r\n    if (!removeDOM) {\r\n      this.removeAll(removeDOM);\r\n      this.el.classList.remove(this.opts._styleSheetClass);\r\n    } else {\r\n      this.el.parentNode.removeChild(this.el);\r\n    }\r\n    this._removeStylesheet();\r\n    delete this.opts._isNested;\r\n    delete this.opts;\r\n    delete this._placeholder;\r\n    delete this.engine;\r\n    delete this.el.gridstack; // remove circular dependency that would prevent a freeing\r\n    delete this.el;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)\r\n   */\r\n  public float(val: boolean): GridStack {\r\n    this.engine.float = val;\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the current float mode\r\n   */\r\n  public getFloat(): boolean {\r\n    return this.engine.float;\r\n  }\r\n\r\n  /**\r\n   * Get the position of the cell under a pixel on screen.\r\n   * @param position the position of the pixel to resolve in\r\n   * absolute coordinates, as an object with top and left properties\r\n   * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).\r\n   * Useful when grid is within `position: relative` element\r\n   *\r\n   * Returns an object with properties `x` and `y` i.e. the column and row in the grid.\r\n   */\r\n  public getCellFromPixel(position: MousePosition, useDocRelative = false): CellPosition {\r\n    let box = this.el.getBoundingClientRect();\r\n    // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)\r\n    let containerPos: {top: number, left: number};\r\n    if (useDocRelative) {\r\n      containerPos = {top: box.top + document.documentElement.scrollTop, left: box.left};\r\n      // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)\r\n    } else {\r\n      containerPos = {top: this.el.offsetTop, left: this.el.offsetLeft}\r\n      // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)\r\n    }\r\n    let relativeLeft = position.left - containerPos.left;\r\n    let relativeTop = position.top - containerPos.top;\r\n\r\n    let columnWidth = (box.width / this.opts.column);\r\n    let rowHeight = (box.height / parseInt(this.el.getAttribute('gs-current-row')));\r\n\r\n    return {x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight)};\r\n  }\r\n\r\n  /** returns the current number of rows, which will be at least `minRow` if set */\r\n  public getRow(): number {\r\n    return Math.max(this.engine.getRow(), this.opts.minRow);\r\n  }\r\n\r\n  /**\r\n   * Checks if specified area is empty.\r\n   * @param x the position x.\r\n   * @param y the position y.\r\n   * @param w the width of to check\r\n   * @param h the height of to check\r\n   */\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    return this.engine.isAreaEmpty(x, y, w, h);\r\n  }\r\n\r\n  /**\r\n   * If you add elements to your grid by hand, you have to tell gridstack afterwards to make them widgets.\r\n   * If you want gridstack to add the elements for you, use `addWidget()` instead.\r\n   * Makes the given element a widget and returns it.\r\n   * @param els widget or single selector to convert.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.el.appendChild('<div id=\"gsi-1\" gs-w=\"3\"></div>');\r\n   * grid.makeWidget('#gsi-1');\r\n   */\r\n  public makeWidget(els: GridStackElement): GridItemHTMLElement {\r\n    let el = GridStack.getElement(els);\r\n    this._prepareElement(el, true);\r\n    this._updateContainerHeight();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Event handler that extracts our CustomEvent data out automatically for receiving custom\r\n   * notifications (see doc for supported events)\r\n   * @param name of the event (see possible values) or list of names space separated\r\n   * @param callback function called with event and optional second/third param\r\n   * (see README documentation for each signature).\r\n   *\r\n   * @example\r\n   * grid.on('added', function(e, items) { log('added ', items)} );\r\n   * or\r\n   * grid.on('added removed change', function(e, items) { log(e.type, items)} );\r\n   *\r\n   * Note: in some cases it is the same as calling native handler and parsing the event.\r\n   * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );\r\n   *\r\n   */\r\n  public on(name: GridStackEvent, callback: GridStackEventHandlerCallback): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.on(name, callback));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // native CustomEvent handlers - cash the generic handlers so we can easily remove\r\n      let noData = (name === 'enable' || name === 'disable');\r\n      if (noData) {\r\n        this._gsEventHandler[name] = (event: Event) => callback(event);\r\n      } else {\r\n        this._gsEventHandler[name] = (event: CustomEvent) => callback(event, event.detail);\r\n      }\r\n      this.el.addEventListener(name, this._gsEventHandler[name]);\r\n    } else if (name === 'drag' || name === 'dragstart' || name === 'dragstop' || name === 'resizestart' || name === 'resize' || name === 'resizestop' || name === 'dropped') {\r\n      // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.\r\n      // do same for start event to make it easier...\r\n      this._gsEventHandler[name] = callback;\r\n    } else {\r\n      console.log('GridStack.on(' + name + ') event not supported, but you can still use $(\".grid-stack\").on(...) while jquery-ui is still used internally.');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * unsubscribe from the 'on' event below\r\n   * @param name of the event (see possible values)\r\n   */\r\n  public off(name: GridStackEvent): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.off(name));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // remove native CustomEvent handlers\r\n      if (this._gsEventHandler[name]) {\r\n        this.el.removeEventListener(name, this._gsEventHandler[name]);\r\n      }\r\n    }\r\n    delete this._gsEventHandler[name];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes widget from the grid.\r\n   * @param el  widget or selector to modify\r\n   * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).\r\n   * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\r\n   */\r\n  public removeWidget(els: GridStackElement, removeDOM = true, triggerEvent = true): GridStack {\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (el.parentElement !== this.el) return; // not our child!\r\n      let node = el.gridstackNode;\r\n      // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272\r\n      if (!node) {\r\n        node = this.engine.nodes.find(n => el === n.el);\r\n      }\r\n      if (!node) return;\r\n\r\n      // remove our DOM data (circular link) and drag&drop permanently\r\n      delete el.gridstackNode;\r\n      GridStackDDI.get().remove(el);\r\n\r\n      this.engine.removeNode(node, removeDOM, triggerEvent);\r\n\r\n      if (removeDOM && el.parentElement) {\r\n        el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM\r\n      }\r\n    });\r\n    if (triggerEvent) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes all widgets from the grid.\r\n   * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).\r\n   */\r\n  public removeAll(removeDOM = true): GridStack {\r\n    // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently\r\n    this.engine.nodes.forEach(n => {\r\n      delete n.el.gridstackNode;\r\n      GridStackDDI.get().remove(n.el);\r\n    });\r\n    this.engine.removeAll(removeDOM);\r\n    this._triggerRemoveEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.\r\n   * @param doAnimate if true the grid will animate.\r\n   */\r\n  public setAnimation(doAnimate: boolean): GridStack {\r\n    if (doAnimate) {\r\n      this.el.classList.add('grid-stack-animate');\r\n    } else {\r\n      this.el.classList.remove('grid-stack-animate');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.\r\n   * Also toggle the grid-stack-static class.\r\n   * @param val if true the grid become static.\r\n   */\r\n  public setStatic(val: boolean): GridStack {\r\n    if (this.opts.staticGrid === val) return this;\r\n    this.opts.staticGrid = val;\r\n    this.engine.nodes.forEach(n => this._prepareDragDropByNode(n)); // either delete Drag&drop or initialize it\r\n    this._setStaticClass();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.\r\n   * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)\r\n   * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.\r\n   */\r\n  public update(els: GridStackElement, opt: GridStackWidget): GridStack {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update({x, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1;\r\n      opt = { x:a[i++], y:a[i++], w:a[i++], h:a[i++] };\r\n      return this.update(els, opt);\r\n    }\r\n\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (!el || !el.gridstackNode) return;\r\n      let n = el.gridstackNode;\r\n      let w = {...opt}; // make a copy we can modify in case they re-use it or multiple items\r\n      delete w.autoPosition;\r\n\r\n      // move/resize widget if anything changed\r\n      let keys = ['x', 'y', 'w', 'h'];\r\n      let m: GridStackWidget;\r\n      if (keys.some(k => w[k] !== undefined && w[k] !== n[k])) {\r\n        m = {};\r\n        keys.forEach(k => {\r\n          m[k] = (w[k] !== undefined) ? w[k] : n[k];\r\n          delete w[k];\r\n        });\r\n      }\r\n      // for a move as well IFF there is any min/max fields set\r\n      if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {\r\n        m = {}; // will use node position but validate values\r\n      }\r\n\r\n      // check for content changing\r\n      if (w.content) {\r\n        let sub = el.querySelector('.grid-stack-item-content');\r\n        if (sub && sub.innerHTML !== w.content) {\r\n          sub.innerHTML = w.content;\r\n        }\r\n        delete w.content;\r\n      }\r\n\r\n      // any remaining fields are assigned, but check for dragging changes, resize constrain\r\n      let changed = false;\r\n      let ddChanged = false;\r\n      for (const key in w) {\r\n        if (key[0] !== '_' && n[key] !== w[key]) {\r\n          n[key] = w[key];\r\n          changed = true;\r\n          ddChanged = ddChanged || (!this.opts.staticGrid && (key === 'noResize' || key === 'noMove' || key === 'locked'));\r\n        }\r\n      }\r\n\r\n      // finally move the widget\r\n      if (m) {\r\n        this.engine.cleanNodes()\r\n          .beginUpdate(n)\r\n          .moveNode(n, m);\r\n        this._updateContainerHeight();\r\n        this._triggerChangeEvent();\r\n        this.engine.endUpdate();\r\n      }\r\n      if (changed) { // move will only update x,y,w,h so update the rest too\r\n        this._writeAttr(el, n);\r\n      }\r\n      if (ddChanged) {\r\n        this._prepareDragDropByNode(n);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).\r\n   * @param value margin value\r\n   */\r\n  public margin(value: numberOrString): GridStack {\r\n    let isMultiValue = (typeof value === 'string' && value.split(' ').length > 1);\r\n    // check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)\r\n    if (!isMultiValue) {\r\n      let data = Utils.parseHeight(value);\r\n      if (this.opts.marginUnit === data.unit && this.opts.margin === data.h) return;\r\n    }\r\n    // re-use existing margin handling\r\n    this.opts.margin = value;\r\n    this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = undefined;\r\n    this.initMargin();\r\n\r\n    this._updateStyles(true); // true = force re-create\r\n\r\n    return this;\r\n  }\r\n\r\n  /** returns current margin number value (undefined if 4 sides don't match) */\r\n  public getMargin(): number { return this.opts.margin as number; }\r\n\r\n  /**\r\n   * Returns true if the height of the grid will be less than the vertical\r\n   * constraint. Always returns true if grid doesn't have height constraint.\r\n   * @param node contains x,y,w,h,auto-position options\r\n   *\r\n   * @example\r\n   * if (grid.willItFit(newWidget)) {\r\n   *   grid.addWidget(newWidget);\r\n   * } else {\r\n   *   alert('Not enough free space to place the widget');\r\n   * }\r\n   */\r\n  public willItFit(node: GridStackWidget): boolean {\r\n    // support legacy call for now\r\n    if (arguments.length > 1) {\r\n      console.warn('gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 0,\r\n        w: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++] };\r\n      return this.willItFit(w);\r\n    }\r\n    return this.engine.willItFit(node);\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerChangeEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    let elements = this.engine.getDirtyNodes(true); // verify they really changed\r\n    if (elements && elements.length) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(elements);\r\n      }\r\n      this._triggerEvent('change', elements);\r\n    }\r\n    this.engine.saveInitial(); // we called, now reset initial values & dirty flags\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerAddEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.addedNodes && this.engine.addedNodes.length > 0) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(this.engine.addedNodes);\r\n      }\r\n      // prevent added nodes from also triggering 'change' event (which is called next)\r\n      this.engine.addedNodes.forEach(n => { delete n._dirty; });\r\n      this._triggerEvent('added', this.engine.addedNodes);\r\n      this.engine.addedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  public _triggerRemoveEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.removedNodes && this.engine.removedNodes.length > 0) {\r\n      this._triggerEvent('removed', this.engine.removedNodes);\r\n      this.engine.removedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerEvent(name: string, data?: GridStackNode[]): GridStack {\r\n    let event = data ? new CustomEvent(name, {bubbles: false, detail: data}) : new Event(name);\r\n    this.el.dispatchEvent(event);\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to delete the current dynamic style sheet used for our layout */\r\n  private _removeStylesheet(): GridStack {\r\n\r\n    if (this._styles) {\r\n      Utils.removeStylesheet(this._styles._id);\r\n      delete this._styles;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal updated/create the CSS styles for row based layout and initial margin setting */\r\n  private _updateStyles(forceUpdate = false, maxH?: number): GridStack {\r\n    // call to delete existing one if we change cellHeight / margin\r\n    if (forceUpdate) {\r\n      this._removeStylesheet();\r\n    }\r\n\r\n    this._updateContainerHeight();\r\n\r\n    // if user is telling us they will handle the CSS themselves by setting heights to 0. Do we need this opts really ??\r\n    if (this.opts.cellHeight === 0) {\r\n      return this;\r\n    }\r\n\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let cellHeightUnit = this.opts.cellHeightUnit;\r\n    let prefix = `.${this.opts._styleSheetClass} > .${this.opts.itemClass}`;\r\n\r\n    // create one as needed\r\n    if (!this._styles) {\r\n      let id = 'gridstack-style-' + (Math.random() * 100000).toFixed();\r\n      // insert style to parent (instead of 'head' by default) to support WebComponent\r\n      let styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode as HTMLElement;\r\n      this._styles = Utils.createStylesheet(id, styleLocation);\r\n      if (!this._styles) return this;\r\n      this._styles._id = id;\r\n      this._styles._max = 0;\r\n\r\n      // these are done once only\r\n      Utils.addCSSRule(this._styles, prefix, `min-height: ${cellHeight}${cellHeightUnit}`);\r\n      // content margins\r\n      let top: string = this.opts.marginTop + this.opts.marginUnit;\r\n      let bottom: string = this.opts.marginBottom + this.opts.marginUnit;\r\n      let right: string = this.opts.marginRight + this.opts.marginUnit;\r\n      let left: string = this.opts.marginLeft + this.opts.marginUnit;\r\n      let content = `${prefix} > .grid-stack-item-content`;\r\n      let placeholder = `.${this.opts._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;\r\n      Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      // resize handles offset (to match margin)\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);\r\n    }\r\n\r\n    // now update the height specific fields\r\n    maxH = maxH || this._styles._max;\r\n    if (maxH > this._styles._max) {\r\n      let getHeight = (rows: number): string => (cellHeight * rows) + cellHeightUnit;\r\n      for (let i = this._styles._max + 1; i <= maxH; i++) { // start at 1\r\n        let h: string = getHeight(i);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-y=\"${i-1}\"]`,        `top: ${getHeight(i-1)}`); // start at 0\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-h=\"${i}\"]`,     `height: ${h}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-min-h=\"${i}\"]`, `min-height: ${h}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-max-h=\"${i}\"]`, `max-height: ${h}`);\r\n      }\r\n      this._styles._max = maxH;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _updateContainerHeight(): GridStack {\r\n    if (!this.engine || this.engine.batchMode) return this;\r\n    let row = this.getRow() + this._extraDragRow; // checks for minRow already\r\n    // check for css min height\r\n    let cssMinHeight = parseInt(getComputedStyle(this.el)['min-height']);\r\n    if (cssMinHeight > 0) {\r\n      let minRow = Math.round(cssMinHeight / this.getCellHeight(true));\r\n      if (row < minRow) {\r\n        row = minRow;\r\n      }\r\n    }\r\n    this.el.setAttribute('gs-current-row', String(row));\r\n    if (row === 0) {\r\n      this.el.style.removeProperty('height');\r\n      return this;\r\n    }\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let unit = this.opts.cellHeightUnit;\r\n    if (!cellHeight) return this;\r\n    this.el.style.height = row * cellHeight + unit;\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _prepareElement(el: GridItemHTMLElement, triggerAddEvent = false, node?: GridStackNode): GridStack {\r\n    if (!node) {\r\n      el.classList.add(this.opts.itemClass);\r\n      node = this._readAttr(el);\r\n    }\r\n    el.gridstackNode = node;\r\n    node.el = el;\r\n    node.grid = this;\r\n    let copy = {...node};\r\n    node = this.engine.addNode(node, triggerAddEvent);\r\n    // write node attr back in case there was collision or we have to fix bad values during addNode()\r\n    if (!Utils.same(node, copy)) {\r\n      this._writeAttr(el, node);\r\n    }\r\n    this._prepareDragDropByNode(node);\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write position x,y,w,h attributes back to element */\r\n  private _writePosAttr(el: HTMLElement, n: GridStackPosition): GridStack {\r\n    if (n.x !== undefined && n.x !== null) { el.setAttribute('gs-x', String(n.x)); }\r\n    if (n.y !== undefined && n.y !== null) { el.setAttribute('gs-y', String(n.y)); }\r\n    if (n.w) { el.setAttribute('gs-w', String(n.w)); }\r\n    if (n.h) { el.setAttribute('gs-h', String(n.h)); }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write any default attributes back to element */\r\n  private _writeAttr(el: HTMLElement, node: GridStackWidget): GridStack {\r\n    if (!node) return this;\r\n    this._writePosAttr(el, node);\r\n\r\n    let attrs /*: GridStackWidget but strings */ = { // remaining attributes\r\n      autoPosition: 'gs-auto-position',\r\n      minW: 'gs-min-w',\r\n      minH: 'gs-min-h',\r\n      maxW: 'gs-max-w',\r\n      maxH: 'gs-max-h',\r\n      noResize: 'gs-no-resize',\r\n      noMove: 'gs-no-move',\r\n      locked: 'gs-locked',\r\n      id: 'gs-id',\r\n      resizeHandles: 'gs-resize-handles'\r\n    };\r\n    for (const key in attrs) {\r\n      if (node[key]) { // 0 is valid for x,y only but done above already and not in list anyway\r\n        el.setAttribute(attrs[key], String(node[key]));\r\n      } else {\r\n        el.removeAttribute(attrs[key]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to read any default attributes from element */\r\n  private _readAttr(el: HTMLElement): GridStackWidget {\r\n    let node: GridStackNode = {};\r\n    node.x = Utils.toNumber(el.getAttribute('gs-x'));\r\n    node.y = Utils.toNumber(el.getAttribute('gs-y'));\r\n    node.w = Utils.toNumber(el.getAttribute('gs-w'));\r\n    node.h = Utils.toNumber(el.getAttribute('gs-h'));\r\n    node.maxW = Utils.toNumber(el.getAttribute('gs-max-w'));\r\n    node.minW = Utils.toNumber(el.getAttribute('gs-min-w'));\r\n    node.maxH = Utils.toNumber(el.getAttribute('gs-max-h'));\r\n    node.minH = Utils.toNumber(el.getAttribute('gs-min-h'));\r\n    node.autoPosition = Utils.toBool(el.getAttribute('gs-auto-position'));\r\n    node.noResize = Utils.toBool(el.getAttribute('gs-no-resize'));\r\n    node.noMove = Utils.toBool(el.getAttribute('gs-no-move'));\r\n    node.locked = Utils.toBool(el.getAttribute('gs-locked'));\r\n    node.resizeHandles = el.getAttribute('gs-resize-handles');\r\n    node.id = el.getAttribute('gs-id');\r\n\r\n    // remove any key not found (null or false which is default)\r\n    for (const key in node) {\r\n      if (!node.hasOwnProperty(key)) return;\r\n      if (!node[key] && node[key] !== 0) { // 0 can be valid value (x,y only really)\r\n        delete node[key];\r\n      }\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  /** @internal */\r\n  private _setStaticClass(): GridStack {\r\n    let classes = ['grid-stack-static'];\r\n\r\n    if (this.opts.staticGrid) {\r\n      this.el.classList.add(...classes);\r\n      this.el.setAttribute('gs-static', 'true');\r\n    } else {\r\n      this.el.classList.remove(...classes);\r\n      this.el.removeAttribute('gs-static');\r\n\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * called when we are being resized by the window - check if the one Column Mode needs to be turned on/off\r\n   * and remember the prev columns we used, as well as check for auto cell height (square)\r\n   */\r\n  public onParentResize(): GridStack {\r\n    if (!this.el || !this.el.clientWidth) return; // return if we're gone or no size yet (will get called again)\r\n    let oneColumn = !this.opts.disableOneColumnMode && this.el.clientWidth <= this.opts.minWidth;\r\n    let changedOneColumn = false;\r\n\r\n    if (!this._oneColumnMode !== !oneColumn) { // use ! (negate) so we can check undefined == false vs true\r\n      this._oneColumnMode = oneColumn;\r\n      changedOneColumn = true;\r\n      if (this.opts.animate) { this.setAnimation(false); } // 1 <-> 12 is too radical, turn off animation\r\n      this.column(oneColumn ? 1 : this._prevColumn);\r\n      if (this.opts.animate) { this.setAnimation(true); }\r\n    }\r\n\r\n    // make the cells content square again\r\n    if (this._isAutoCellHeight) {\r\n      if (!changedOneColumn && this.opts.cellHeightThrottle) {\r\n        if (!this._cellHeightThrottle) {\r\n          this._cellHeightThrottle = Utils.throttle(() => this.cellHeight(), this.opts.cellHeightThrottle);\r\n        }\r\n        this._cellHeightThrottle();\r\n      } else {\r\n        // immediate update if we've changed to/from oneColumn or have no threshold\r\n        this.cellHeight();\r\n      }\r\n    }\r\n\r\n    // finally update any nested grids\r\n    this.engine.nodes.forEach(n => {\r\n      if (n.subGrid) {(n.subGrid as GridStack).onParentResize()}\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /** add or remove the window size event handler */\r\n  private _updateWindowResizeEvent(forceRemove = false): GridStack {\r\n    // only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting oneColumn (i.e. doing work)\r\n    const workTodo = (this._isAutoCellHeight || !this.opts.disableOneColumnMode) && !this.opts._isNested;\r\n\r\n    if (!forceRemove && workTodo && !this._windowResizeBind) {\r\n      this._windowResizeBind = this.onParentResize.bind(this); // so we can properly remove later\r\n      window.addEventListener('resize', this._windowResizeBind);\r\n    } else if ((forceRemove || !workTodo) && this._windowResizeBind) {\r\n      window.removeEventListener('resize', this._windowResizeBind);\r\n      delete this._windowResizeBind; // remove link to us so we can free\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal convert a potential selector into actual element */\r\n  public static getElement(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement { return Utils.getElement(els) }\r\n  /** @internal */\r\n  public static getElements(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement[] { return Utils.getElements(els) }\r\n  /** @internal */\r\n  public static getGridElement(els: GridStackElement): GridHTMLElement { return GridStack.getElement(els) }\r\n  /** @internal */\r\n  public static getGridElements(els: string): GridHTMLElement[] { return Utils.getElements(els) }\r\n\r\n  /** @internal initialize margin top/bottom/left/right and units */\r\n  private initMargin(): GridStack {\r\n\r\n    let data: HeightData;\r\n    let margin = 0;\r\n\r\n    // support passing multiple values like CSS (ex: '5px 10px 0 20px')\r\n    let margins: string[] = [];\r\n    if (typeof this.opts.margin === 'string') {\r\n      margins = this.opts.margin.split(' ')\r\n    }\r\n    if (margins.length === 2) { // top/bot, left/right like CSS\r\n      this.opts.marginTop = this.opts.marginBottom = margins[0];\r\n      this.opts.marginLeft = this.opts.marginRight = margins[1];\r\n    } else if (margins.length === 4) { // Clockwise like CSS\r\n      this.opts.marginTop = margins[0];\r\n      this.opts.marginRight = margins[1];\r\n      this.opts.marginBottom = margins[2];\r\n      this.opts.marginLeft = margins[3];\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.margin);\r\n      this.opts.marginUnit = data.unit;\r\n      margin = this.opts.margin = data.h;\r\n    }\r\n\r\n    // see if top/bottom/left/right need to be set as well\r\n    if (this.opts.marginTop === undefined) {\r\n      this.opts.marginTop = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginTop);\r\n      this.opts.marginTop = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginBottom === undefined) {\r\n      this.opts.marginBottom = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginBottom);\r\n      this.opts.marginBottom = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginRight === undefined) {\r\n      this.opts.marginRight = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginRight);\r\n      this.opts.marginRight = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginLeft === undefined) {\r\n      this.opts.marginLeft = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginLeft);\r\n      this.opts.marginLeft = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n    this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...\r\n    if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {\r\n      this.opts.margin = this.opts.marginTop; // makes it easier to check for no-ops in setMargin()\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /*\r\n   * drag&drop empty stubs that will be implemented in gridstack-dd.ts for non static grid\r\n   * so we don't incur the load unless needed.\r\n   * NOTE: had to make those methods public in order to define them else as\r\n   *   GridStack.prototype._setupAcceptWidget = function()\r\n   * maybe there is a better way ????\r\n   */\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n\r\n  /**\r\n   * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n   * Called during GridStack.init() as options, but can also be called directly (last param are cached) in case the toolbar\r\n   * is dynamically create and needs to change later.\r\n   * @param dragIn string selector (ex: '.sidebar .grid-stack-item')\r\n   * @param dragInOptions options - see DDDragInOpt. (default: {revert: 'invalid', handle: '.grid-stack-item-content', scroll: false, appendTo: 'body'}\r\n   **/\r\n  public static setupDragIn(dragIn?: string, dragInOptions?: DDDragInOpt): void { /* implemented in gridstack-dd.ts */ }\r\n\r\n  /**\r\n   * Enables/Disables moving of specific grid elements. If you want all items, and have it stay, use enableMove() instead. No-op for static grids.\r\n   * @param els widget or selector to modify.\r\n   * @param val if true widget will be draggable.\r\n   */\r\n  public movable(els: GridStackElement, val: boolean): GridStack { return this }\r\n  /**\r\n   * Enables/Disables resizing of specific grid elements. If you want all items, and have it stay, use enableResize() instead. No-op for static grids.\r\n   * @param els  widget or selector to modify\r\n   * @param val  if true widget will be resizable.\r\n   */\r\n  public resizable(els: GridStackElement, val: boolean): GridStack { return this }\r\n  /**\r\n   * Temporarily disables widgets moving/resizing.\r\n   * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n   * Note: no-op for static grid\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(false);\r\n   *  grid.enableResize(false);\r\n   */\r\n  public disable(): GridStack { return this }\r\n  /**\r\n   * Re-enables widgets moving/resizing - see disable().\r\n   * Note: no-op for static grid.\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(true);\r\n   *  grid.enableResize(true);\r\n   */\r\n  public enable(): GridStack { return this }\r\n  /**\r\n   * Enables/disables widget moving. No-op for static grids.\r\n   */\r\n  public enableMove(doEnable: boolean): GridStack { return this }\r\n  /**\r\n   * Enables/disables widget resizing. No-op for static grids.\r\n   */\r\n  public enableResize(doEnable: boolean): GridStack { return this }\r\n\r\n  /** @internal called to add drag over support to support widgets */\r\n  public _setupAcceptWidget(): GridStack { return this }\r\n  /** @internal called to setup a trash drop zone if the user specifies it */\r\n  public _setupRemoveDrop(): GridStack { return this }\r\n  /** @internal prepares the element for drag&drop **/\r\n  public _prepareDragDropByNode(node: GridStackNode): GridStack { return this }\r\n  /** @internal handles actual drag/resize start **/\r\n  public _onStartMoving(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void { return }\r\n  /** @internal handles actual drag/resize **/\r\n  public _dragOrResize(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void { return }\r\n  /** @internal called when a node leaves our area (mouse out or shape outside) **/\r\n  public _leave(node: GridStackNode, el: GridItemHTMLElement, helper?: GridItemHTMLElement, dropoutEvent = false): void { return }\r\n}\r\n","/**\n * dd-base-impl.ts 4.1.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nexport type EventCallback = (event: Event) => boolean|void;\nexport abstract class DDBaseImplement {\n  /** returns the enable state, but you have to call enable()/disable() to change (as other things need to happen) */\n  public get disabled(): boolean   { return this._disabled; }\n\n  /** @internal */\n  private _disabled = false;\n  /** @internal */\n  private _eventRegister: {\n    [eventName: string]: EventCallback;\n  } = {};\n\n  public on(event: string, callback: EventCallback): void {\n    this._eventRegister[event] = callback;\n  }\n\n  public off(event: string): void {\n    delete this._eventRegister[event];\n  }\n\n  public enable(): void {\n    this._disabled = false;\n  }\n\n  public disable(): void {\n    this._disabled = true;\n  }\n\n  public destroy(): void {\n    delete this._eventRegister;\n  }\n\n  public triggerEvent(eventName: string, event: Event): boolean|void {\n    if (!this.disabled && this._eventRegister && this._eventRegister[eventName])\n      return this._eventRegister[eventName](event);\n  }\n}\n\nexport interface HTMLElementExtendOpt<T> {\n  el: HTMLElement;\n  option: T;\n  updateOption(T): DDBaseImplement;\n}\n","/**\n * dd-draggable.ts 4.1.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\nimport { DDUtils } from './dd-utils';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { GridItemHTMLElement, DDUIData } from '../types';\n\n// TODO: merge with DDDragOpt ?\nexport interface DDDraggableOpt {\n  appendTo?: string | HTMLElement;\n  containment?: string | HTMLElement; // TODO: not implemented yet\n  handle?: string;\n  revert?: string | boolean | unknown; // TODO: not implemented yet\n  scroll?: boolean; // nature support by HTML5 drag drop, can't be switch to off actually\n  helper?: string | HTMLElement | ((event: Event) => HTMLElement);\n  basePosition?: 'fixed' | 'absolute';\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  drag?: (event: Event, ui: DDUIData) => void;\n}\n\ninterface DragOffset {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n  offsetLeft: number;\n  offsetTop: number;\n}\n\nexport class DDDraggable extends DDBaseImplement implements HTMLElementExtendOpt<DDDraggableOpt> {\n  public el: HTMLElement;\n  public option: DDDraggableOpt;\n  public helper: HTMLElement; // used by GridStackDDNative\n\n  /** @internal */\n  private dragOffset: DragOffset;\n  /** @internal */\n  private dragElementOriginStyle: Array<string>;\n  /** @internal */\n  private dragFollowTimer: number;\n  /** @internal */\n  private dragEl: HTMLElement;\n  /** @internal */\n  private dragging = false;\n  /** @internal */\n  private paintTimer: number;\n  /** @internal */\n  private parentOriginStylePosition: string;\n  /** @internal */\n  private helperContainment: HTMLElement;\n  /** @internal */\n  private static basePosition: 'fixed' | 'absolute' = 'absolute';\n  /** @internal #1541 can't have {passive: true} on Safari as otherwise it reverts animate back to old location on drop */\n  private static dragEventListenerOption = true; // DDUtils.isEventSupportPassiveOption ? { capture: true, passive: true } : true;\n  /** @internal */\n  private static originStyleProp = ['transition', 'pointerEvents', 'position',\n    'left', 'top', 'opacity', 'zIndex', 'width', 'height', 'willChange'];\n\n  constructor(el: HTMLElement, option: DDDraggableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = option;\n    // get the element that is actually supposed to be dragged by\n    let className = option.handle.substring(1);\n    this.dragEl = el.classList.contains(className) ? el : el.querySelector(option.handle) || el;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._dragStart = this._dragStart.bind(this);\n    this._drag = this._drag.bind(this);\n    this._dragEnd = this._dragEnd.bind(this);\n    this.enable();\n  }\n\n  public on(event: 'drag' | 'dragstart' | 'dragstop', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'drag' | 'dragstart' | 'dragstop'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    super.enable();\n    this.dragEl.draggable = true;\n    this.dragEl.addEventListener('dragstart', this._dragStart);\n    this.el.classList.remove('ui-draggable-disabled');\n    this.el.classList.add('ui-draggable');\n  }\n\n  public disable(forDestroy = false): void {\n    super.disable();\n    this.dragEl.removeAttribute('draggable');\n    this.dragEl.removeEventListener('dragstart', this._dragStart);\n    this.el.classList.remove('ui-draggable');\n    if (!forDestroy) this.el.classList.add('ui-draggable-disabled');\n  }\n\n  public destroy(): void {\n    if (this.dragging) {\n      // Destroy while dragging should remove dragend listener and manually trigger\n      // dragend, otherwise dragEnd can't perform dragstop because eventRegistry is\n      // destroyed.\n      this._dragEnd({} as DragEvent);\n    }\n    this.disable(true);\n    delete this.el;\n    delete this.helper;\n    delete this.option;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDraggableOpt): DDDraggable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    return this;\n  }\n\n  /** @internal */\n  private _dragStart(event: DragEvent): void {\n    DDManager.dragElement = this;\n    this.helper = this._createHelper(event);\n    this._setupHelperContainmentStyle();\n    this.dragOffset = this._getDragOffset(event, this.el, this.helperContainment);\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'dragstart' });\n    if (this.helper !== this.el) {\n      this._setupDragFollowNodeNotifyStart(ev);\n    } else {\n      this.dragFollowTimer = window.setTimeout(() => {\n        delete this.dragFollowTimer;\n        this._setupDragFollowNodeNotifyStart(ev);\n      }, 0);\n    }\n    this._cancelDragGhost(event);\n  }\n\n  /** @internal */\n  private _setupDragFollowNodeNotifyStart(ev: Event): DDDraggable {\n    this._setupHelperStyle();\n    document.addEventListener('dragover', this._drag, DDDraggable.dragEventListenerOption);\n    this.dragEl.addEventListener('dragend', this._dragEnd);\n    if (this.option.start) {\n      this.option.start(ev, this.ui());\n    }\n    this.dragging = true;\n    this.helper.classList.add('ui-draggable-dragging');\n    this.triggerEvent('dragstart', ev);\n    return this;\n  }\n\n  /** @internal */\n  private _drag(event: DragEvent): void {\n    // Safari: prevent default to allow drop to happen instead of reverting back (with animation) and delaying dragend #1541\n    // https://stackoverflow.com/questions/61760755/how-to-fire-dragend-event-immediately\n    event.preventDefault();\n    this._dragFollow(event);\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'drag' });\n    if (this.option.drag) {\n      this.option.drag(ev, this.ui());\n    }\n    this.triggerEvent('drag', ev);\n  }\n\n  /** @internal */\n  private _dragEnd(event: DragEvent): void {\n    if (this.dragFollowTimer) {\n      clearTimeout(this.dragFollowTimer);\n      delete this.dragFollowTimer;\n      return;\n    } else {\n      if (this.paintTimer) {\n        cancelAnimationFrame(this.paintTimer);\n      }\n      document.removeEventListener('dragover', this._drag, DDDraggable.dragEventListenerOption);\n      this.dragEl.removeEventListener('dragend', this._dragEnd);\n    }\n    this.dragging = false;\n    this.helper.classList.remove('ui-draggable-dragging');\n    this.helperContainment.style.position = this.parentOriginStylePosition || null;\n    if (this.helper === this.el) {\n      this._removeHelperStyle();\n    } else {\n      this.helper.remove();\n    }\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'dragstop' });\n    if (this.option.stop) {\n      this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\n    }\n    this.triggerEvent('dragstop', ev);\n    delete DDManager.dragElement;\n    delete this.helper;\n  }\n\n  /** @internal create a clone copy (or user defined method) of the original drag item if set */\n  private _createHelper(event: DragEvent): HTMLElement {\n    let helper = this.el;\n    if (typeof this.option.helper === 'function') {\n      helper = this.option.helper(event);\n    } else if (this.option.helper === 'clone') {\n      helper = DDUtils.clone(this.el);\n    }\n    if (!document.body.contains(helper)) {\n      DDUtils.appendTo(helper, this.option.appendTo === 'parent' ? this.el.parentNode : this.option.appendTo);\n    }\n    if (helper === this.el) {\n      this.dragElementOriginStyle = DDDraggable.originStyleProp.map(prop => this.el.style[prop]);\n    }\n    return helper;\n  }\n\n  /** @internal */\n  private _setupHelperStyle(): DDDraggable {\n    this.helper.style.pointerEvents = 'none';\n    this.helper.style.width = this.dragOffset.width + 'px';\n    this.helper.style.height = this.dragOffset.height + 'px';\n    this.helper.style.willChange = 'left, top';\n    this.helper.style.transition = 'none'; // show up instantly\n    this.helper.style.position = this.option.basePosition || DDDraggable.basePosition;\n    this.helper.style.zIndex = '1000';\n    setTimeout(() => {\n      if (this.helper) {\n        this.helper.style.transition = null; // recover animation\n      }\n    }, 0);\n    return this;\n  }\n\n  /** @internal */\n  private _removeHelperStyle(): DDDraggable {\n    // don't bother restoring styles if we're gonna remove anyway...\n    let node = this.helper ? (this.helper as GridItemHTMLElement).gridstackNode : undefined;\n    if (!node || !node._isAboutToRemove) {\n      DDDraggable.originStyleProp.forEach(prop => {\n        this.helper.style[prop] = this.dragElementOriginStyle[prop] || null;\n      });\n    }\n    delete this.dragElementOriginStyle;\n    return this;\n  }\n\n  /** @internal */\n  private _dragFollow(event: DragEvent): void {\n    if (this.paintTimer) {\n      cancelAnimationFrame(this.paintTimer);\n    }\n    this.paintTimer = requestAnimationFrame(() => {\n      delete this.paintTimer;\n      const offset = this.dragOffset;\n      let containmentRect = { left: 0, top: 0 };\n      if (this.helper.style.position === 'absolute') {\n        const { left, top } = this.helperContainment.getBoundingClientRect();\n        containmentRect = { left, top };\n      }\n      this.helper.style.left = event.clientX + offset.offsetLeft - containmentRect.left + 'px';\n      this.helper.style.top = event.clientY + offset.offsetTop - containmentRect.top + 'px';\n    });\n  }\n\n  /** @internal */\n  private _setupHelperContainmentStyle(): DDDraggable {\n    this.helperContainment = this.helper.parentElement;\n    if (this.option.basePosition !== 'fixed') {\n      this.parentOriginStylePosition = this.helperContainment.style.position;\n      if (window.getComputedStyle(this.helperContainment).position.match(/static/)) {\n        this.helperContainment.style.position = 'relative';\n      }\n    }\n    return this;\n  }\n\n  /** @internal prevent the default gost image to be created (which has wrongas we move the helper/element instead\n   * (legacy jquery UI code updates the top/left of the item).\n   * TODO: maybe use mouse event instead of HTML5 drag as we have to work around it anyway, or change code to not update\n   * the actual grid-item but move the gost image around (and special case jq version) ?\n   **/\n  private _cancelDragGhost(e: DragEvent): DDDraggable {\n    /* doesn't seem to do anything...\n    let t = e.dataTransfer;\n    t.effectAllowed = 'none';\n    t.dropEffect = 'none';\n    t.setData('text', '');\n    */\n\n    // NOTE: according to spec (and required by Safari see #1540) the image has to be visible in the browser (in dom and not hidden) so make it a 1px div\n    let img = document.createElement('div');\n    img.style.width = '1px';\n    img.style.height = '1px';\n    document.body.appendChild(img);\n    e.dataTransfer.setDragImage(img, 0, 0);\n    setTimeout(() => document.body.removeChild(img)); // nuke once drag had a chance to grab this 'image'\n\n    e.stopPropagation();\n    return this;\n  }\n\n  /** @internal */\n  private _getDragOffset(event: DragEvent, el: HTMLElement, parent: HTMLElement): DragOffset {\n\n    // in case ancestor has transform/perspective css properties that change the viewpoint\n    let xformOffsetX = 0;\n    let xformOffsetY = 0;\n    if (parent) {\n      const testEl = document.createElement('div');\n      DDUtils.addElStyles(testEl, {\n        opacity: '0',\n        position: 'fixed',\n        top: 0 + 'px',\n        left: 0 + 'px',\n        width: '1px',\n        height: '1px',\n        zIndex: '-999999',\n      });\n      parent.appendChild(testEl);\n      const testElPosition = testEl.getBoundingClientRect();\n      parent.removeChild(testEl);\n      xformOffsetX = testElPosition.left;\n      xformOffsetY = testElPosition.top;\n      // TODO: scale ?\n    }\n\n    const targetOffset = el.getBoundingClientRect();\n    return {\n      left: targetOffset.left,\n      top: targetOffset.top,\n      offsetLeft: - event.clientX + targetOffset.left - xformOffsetX,\n      offsetTop: - event.clientY + targetOffset.top - xformOffsetY,\n      width: targetOffset.width,\n      height: targetOffset.height\n    };\n  }\n\n  /** @internal TODO: set to public as called by DDDroppable! */\n  public ui = (): DDUIData => {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const offset = this.helper.getBoundingClientRect();\n    return {\n      position: { //Current CSS position of the helper as { top, left } object\n        top: offset.top - containmentRect.top,\n        left: offset.left - containmentRect.left\n      }\n      /* not used by GridStack for now...\n      helper: [this.helper], //The object arr representing the helper that's being dragged.\n      offset: { top: offset.top, left: offset.left } // Current offset position of the helper as { top, left } object.\n      */\n    };\n  }\n}\n\n\n","/**\n * dd-droppable.ts 4.1.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\nimport { DDManager } from './dd-manager';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { DDUtils } from './dd-utils';\n\nexport interface DDDroppableOpt {\n  accept?: string | ((el: HTMLElement) => boolean);\n  drop?: (event: DragEvent, ui) => void;\n  over?: (event: DragEvent, ui) => void;\n  out?: (event: DragEvent, ui) => void;\n}\n\nexport class DDDroppable extends DDBaseImplement implements HTMLElementExtendOpt<DDDroppableOpt> {\n\n  public accept: (el: HTMLElement) => boolean;\n  public el: HTMLElement;\n  public option: DDDroppableOpt;\n\n  /** @internal */\n  private moving: boolean;\n\n  constructor(el: HTMLElement, opts: DDDroppableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._dragEnter = this._dragEnter.bind(this);\n    this._dragOver = this._dragOver.bind(this);\n    this._dragLeave = this._dragLeave.bind(this);\n    this._drop = this._drop.bind(this);\n\n    this.el.classList.add('ui-droppable');\n    this.el.addEventListener('dragenter', this._dragEnter);\n    this._setupAccept();\n  }\n\n  public on(event: 'drop' | 'dropover' | 'dropout', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'drop' | 'dropover' | 'dropout'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (!this.disabled) return;\n    super.enable();\n    this.el.classList.remove('ui-droppable-disabled');\n    this.el.addEventListener('dragenter', this._dragEnter);\n  }\n\n  public disable(forDestroy=false): void {\n    if (this.disabled) return;\n    super.disable();\n    if (!forDestroy) this.el.classList.add('ui-droppable-disabled');\n    this.el.removeEventListener('dragenter', this._dragEnter);\n  }\n\n  public destroy(): void {\n    if (this.moving) {\n      this._removeLeaveCallbacks();\n    } \n    this.disable(true);\n    this.el.classList.remove('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    delete this.moving;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDroppableOpt): DDDroppable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    this._setupAccept();\n    return this;\n  }\n\n  /** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */\n  private _dragEnter(event: DragEvent): void {\n    if (!this._canDrop()) return;\n    event.preventDefault();\n\n    if (this.moving) return; // ignore multiple 'dragenter' as we go over existing items\n    this.moving = true;\n\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'dropover' });\n    if (this.option.over) {\n      this.option.over(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropover', ev);\n    this.el.addEventListener('dragover', this._dragOver);\n    this.el.addEventListener('drop', this._drop);\n    this.el.addEventListener('dragleave', this._dragLeave);\n    this.el.classList.add('ui-droppable-over');\n  }\n\n  /** @internal called when an moving to drop item is being dragged over - do nothing but eat the event */\n  private _dragOver(event: DragEvent): void {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** @internal called when the item is leaving our area, stop tracking if we had moving item */\n  private _dragLeave(event: DragEvent): void {\n    if (this.el.contains(event.relatedTarget as HTMLElement)) return;\n    this._removeLeaveCallbacks();\n    if (this.moving) {\n      event.preventDefault();\n      const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'dropout' });\n      if (this.option.out) {\n        this.option.out(ev, this._ui(DDManager.dragElement))\n      }\n      this.triggerEvent('dropout', ev);\n    }\n    delete this.moving;\n  }\n\n  /** @internal item is being dropped on us - call the client drop event */\n  private _drop(event: DragEvent): void {\n    if (!this.moving) return; // should not have received event...\n    event.preventDefault();\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'drop' });\n    if (this.option.drop) {\n      this.option.drop(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('drop', ev);\n    this._removeLeaveCallbacks();\n    delete this.moving;\n  }\n\n  /** @internal called to remove callbacks when leaving or dropping */\n  private _removeLeaveCallbacks() {\n    this.el.removeEventListener('dragleave', this._dragLeave);\n    this.el.classList.remove('ui-droppable-over');\n    if (this.moving) {\n      this.el.removeEventListener('dragover', this._dragOver);\n      this.el.removeEventListener('drop', this._drop);\n    }\n    // Note: this.moving is reset by callee of this routine to control the flow\n  }\n\n  /** @internal */\n  private _canDrop(): boolean {\n    return DDManager.dragElement && (!this.accept || this.accept(DDManager.dragElement.el));\n  }\n\n  /** @internal */\n  private _setupAccept(): DDDroppable {\n    if (this.option.accept && typeof this.option.accept === 'string') {\n      this.accept = (el: HTMLElement) => {\n        return el.matches(this.option.accept as string)\n      }\n    } else {\n      this.accept = this.option.accept as ((el: HTMLElement) => boolean);\n    }\n    return this;\n  }\n\n  /** @internal */\n  private _ui(drag: DDDraggable) {\n    return {\n      draggable: drag.el,\n      ...drag.ui()\n    };\n  }\n}\n\n","/**\n * dd-elements.ts 4.1.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizable, DDResizableOpt } from './dd-resizable';\nimport { GridItemHTMLElement } from './../types';\nimport { DDDraggable, DDDraggableOpt } from './dd-draggable';\nimport { DDDroppable, DDDroppableOpt } from './dd-droppable';\n\nexport interface DDElementHost extends GridItemHTMLElement {\n  ddElement?: DDElement;\n}\n\nexport class DDElement {\n\n  static init(el: DDElementHost): DDElement {\n    if (!el.ddElement) { el.ddElement = new DDElement(el); }\n    return el.ddElement;\n  }\n\n  public el: DDElementHost;\n  public ddDraggable?: DDDraggable;\n  public ddDroppable?: DDDroppable;\n  public ddResizable?: DDResizable;\n\n  constructor(el: DDElementHost) {\n    this.el = el;\n  }\n\n  public on(eventName: string, callback: (event: MouseEvent) => void): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.on(eventName as 'drag' | 'dragstart' | 'dragstop', callback);\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.on(eventName as 'drop' | 'dropover' | 'dropout', callback);\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.on(eventName as 'resizestart' | 'resize' | 'resizestop', callback);\n    }\n    return this;\n  }\n\n  public off(eventName: string): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.off(eventName as 'drag' | 'dragstart' | 'dragstop');\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.off(eventName as 'drop' | 'dropover' | 'dropout');\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.off(eventName as 'resizestart' | 'resize' | 'resizestop');\n    }\n    return this;\n  }\n\n  public setupDraggable(opts: DDDraggableOpt): DDElement {\n    if (!this.ddDraggable) {\n      this.ddDraggable = new DDDraggable(this.el, opts);\n    } else {\n      this.ddDraggable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDraggable(): DDElement {\n    if (this.ddDraggable) {\n      this.ddDraggable.destroy();\n      delete this.ddDraggable;\n    }\n    return this;\n  }\n\n  public setupResizable(opts: DDResizableOpt): DDElement {\n    if (!this.ddResizable) {\n      this.ddResizable = new DDResizable(this.el, opts);\n    } else {\n      this.ddResizable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanResizable(): DDElement {\n    if (this.ddResizable) {\n      this.ddResizable.destroy();\n      delete this.ddResizable;\n    }\n    return this;\n  }\n\n  public setupDroppable(opts: DDDroppableOpt): DDElement {\n    if (!this.ddDroppable) {\n      this.ddDroppable = new DDDroppable(this.el, opts);\n    } else {\n      this.ddDroppable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDroppable(): DDElement {\n    if (this.ddDroppable) {\n      this.ddDroppable.destroy();\n      delete this.ddDroppable;\n    }\n    return this;\n  }\n}\n","/**\n * dd-manager.ts 4.1.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\n\nexport class DDManager {\n  static dragElement: DDDraggable;\n}\n","/**\n * dd-resizable-handle.ts 4.1.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nexport interface DDResizableHandleOpt {\n  start?: (event) => void;\n  move?: (event) => void;\n  stop?: (event) => void;\n}\n\nexport class DDResizableHandle {\n  /** @internal */\n  private el: HTMLElement;\n  /** @internal */\n  private host: HTMLElement;\n  /** @internal */\n  private option: DDResizableHandleOpt;\n  /** @internal */\n  private dir: string;\n  /** @internal true after we've moved enough pixels to start a resize */\n  private moving = false;\n  /** @internal */\n  private mouseDownEvent: MouseEvent;\n  /** @internal */\n  private static prefix = 'ui-resizable-';\n\n  constructor(host: HTMLElement, direction: string, option: DDResizableHandleOpt) {\n    this.host = host;\n    this.dir = direction;\n    this.option = option;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n\n    this._init();\n  }\n\n  /** @internal */\n  private _init(): DDResizableHandle {\n    const el = document.createElement('div');\n    el.classList.add('ui-resizable-handle');\n    el.classList.add(`${DDResizableHandle.prefix}${this.dir}`);\n    el.style.zIndex = '100';\n    el.style.userSelect = 'none';\n    this.el = el;\n    this.host.appendChild(this.el);\n    this.el.addEventListener('mousedown', this._mouseDown);\n    return this;\n  }\n\n  /** call this when resize handle needs to be removed and cleaned up */\n  public destroy(): DDResizableHandle {\n    if (this.moving) this._mouseUp(this.mouseDownEvent);\n    this.el.removeEventListener('mousedown', this._mouseDown);\n    this.host.removeChild(this.el);\n    delete this.el;\n    delete this.host;\n    return this;\n  }\n\n  /** @internal called on mouse down on us: capture move on the entire document (mouse might not stay on us) until we release the mouse */\n  private _mouseDown(e: MouseEvent): void {\n    e.preventDefault();\n    this.mouseDownEvent = e;\n    document.addEventListener('mousemove', this._mouseMove, true); // capture, not bubble\n    document.addEventListener('mouseup', this._mouseUp);\n  }\n\n  /** @internal */\n  private _mouseMove(e: MouseEvent): void {\n    let s = this.mouseDownEvent;\n    // don't start unless we've moved at least 3 pixels\n    if (!this.moving && Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 2) {\n      this.moving = true;\n      this._triggerEvent('start', this.mouseDownEvent);\n    } else if (this.moving) {\n      this._triggerEvent('move', e);\n    }\n  }\n\n  /** @internal */\n  private _mouseUp(e: MouseEvent): void {\n    if (this.moving) {\n      this._triggerEvent('stop', e);\n    }\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp);\n    delete this.moving;\n    delete this.mouseDownEvent;\n  }\n\n  /** @internal */\n  private _triggerEvent(name: string, event: MouseEvent): DDResizableHandle {\n    if (this.option[name]) this.option[name](event);\n    return this;\n  }\n}\n","/**\n * dd-resizable.ts 4.1.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizableHandle } from './dd-resizable-handle';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { DDUtils } from './dd-utils';\nimport { Utils } from '../utils';\nimport { DDUIData, Rect, Size } from '../types';\n\n// TODO: merge with DDDragOpt\nexport interface DDResizableOpt {\n  autoHide?: boolean;\n  handles?: string;\n  maxHeight?: number;\n  maxWidth?: number;\n  minHeight?: number;\n  minWidth?: number;\n  basePosition?: 'fixed' | 'absolute';\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  resize?: (event: Event, ui: DDUIData) => void;\n}\n\nexport class DDResizable extends DDBaseImplement implements HTMLElementExtendOpt<DDResizableOpt> {\n\n  // have to be public else complains for HTMLElementExtendOpt ?\n  public el: HTMLElement;\n  public option: DDResizableOpt;\n\n  /** @internal */\n  private handlers: DDResizableHandle[];\n  /** @internal */\n  private originalRect: Rect;\n  /** @internal */\n  private temporalRect: Rect;\n  /** @internal */\n  private scrollY: number;\n  /** @internal */\n  private scrolled: number;\n  /** @internal */\n  private scrollEl: HTMLElement;\n  /** @internal */\n  private startEvent: MouseEvent;\n  /** @internal value saved in the same order as _originStyleProp[] */\n  private elOriginStyleVal: string[];\n  /** @internal */\n  private parentOriginStylePosition: string;\n  /** @internal */\n  private static _originStyleProp = ['width', 'height', 'position', 'left', 'top', 'opacity', 'zIndex'];\n\n  constructor(el: HTMLElement, opts: DDResizableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    this.enable();\n    this._setupAutoHide();\n    this._setupHandlers();\n  }\n\n  public on(event: 'resizestart' | 'resize' | 'resizestop', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'resizestart' | 'resize' | 'resizestop'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    super.enable();\n    this.el.classList.add('ui-resizable');\n    this.el.classList.remove('ui-resizable-disabled');\n  }\n\n  public disable(): void {\n    super.disable();\n    this.el.classList.add('ui-resizable-disabled');\n    this.el.classList.remove('ui-resizable');\n  }\n\n  public destroy(): void {\n    this._removeHandlers();\n    if (this.option.autoHide) {\n      this.el.removeEventListener('mouseover', this._showHandlers);\n      this.el.removeEventListener('mouseout', this._hideHandlers);\n    }\n    this.el.classList.remove('ui-resizable');\n    delete this.el;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDResizableOpt): DDResizable {\n    let updateHandles = (opts.handles && opts.handles !== this.option.handles);\n    let updateAutoHide = (opts.autoHide && opts.autoHide !== this.option.autoHide);\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    if (updateHandles) {\n      this._removeHandlers();\n      this._setupHandlers();\n    }\n    if (updateAutoHide) {\n      this._setupAutoHide();\n    }\n    return this;\n  }\n\n  /** @internal */\n  private _setupAutoHide(): DDResizable {\n    if (this.option.autoHide) {\n      this.el.classList.add('ui-resizable-autohide');\n      // use mouseover/mouseout instead of mouseenter/mouseleave to get better performance;\n      this.el.addEventListener('mouseover', this._showHandlers);\n      this.el.addEventListener('mouseout', this._hideHandlers);\n    } else {\n      this.el.classList.remove('ui-resizable-autohide');\n      this.el.removeEventListener('mouseover', this._showHandlers);\n      this.el.removeEventListener('mouseout', this._hideHandlers);\n    }\n    return this;\n  }\n\n  /** @internal */\n  private _showHandlers = () => {\n    this.el.classList.remove('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  private _hideHandlers = () => {\n    this.el.classList.add('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  private _setupHandlers(): DDResizable {\n    let handlerDirection = this.option.handles || 'e,s,se';\n    if (handlerDirection === 'all') {\n      handlerDirection = 'n,e,s,w,se,sw,ne,nw';\n    }\n    this.handlers = handlerDirection.split(',')\n      .map(dir => dir.trim())\n      .map(dir => new DDResizableHandle(this.el, dir, {\n        start: (event: MouseEvent) => {\n          this._resizeStart(event);\n        },\n        stop: (event: MouseEvent) => {\n          this._resizeStop(event);\n        },\n        move: (event: MouseEvent) => {\n          this._resizing(event, dir);\n        }\n      }));\n    return this;\n  }\n\n  /** @internal */\n  private _resizeStart(event: MouseEvent): DDResizable {\n    this.originalRect = this.el.getBoundingClientRect();\n    this.scrollEl = Utils.getScrollParent(this.el);\n    this.scrollY = this.scrollEl.scrollTop;\n    this.startEvent = event;\n    this._setupHelper();\n    this._applyChange();\n    const ev = DDUtils.initEvent<MouseEvent>(event, { type: 'resizestart', target: this.el });\n    if (this.option.start) {\n      this.option.start(ev, this._ui());\n    }\n    this.el.classList.add('ui-resizable-resizing');\n    this.triggerEvent('resizestart', ev);\n    return this;\n  }\n\n  /** @internal */\n  private _resizing(event: MouseEvent, dir: string): DDResizable {\n    this.scrolled = this.scrollEl.scrollTop - this.scrollY;\n    this.temporalRect = this._getChange(event, dir);\n    this._applyChange();\n    const ev = DDUtils.initEvent<MouseEvent>(event, { type: 'resize', target: this.el });\n    if (this.option.resize) {\n      this.option.resize(ev, this._ui());\n    }\n    this.triggerEvent('resize', ev);\n    return this;\n  }\n\n  /** @internal */\n  private _resizeStop(event: MouseEvent): DDResizable {\n    const ev = DDUtils.initEvent<MouseEvent>(event, { type: 'resizestop', target: this.el });\n    if (this.option.stop) {\n      this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\n    }\n    this.el.classList.remove('ui-resizable-resizing');\n    this.triggerEvent('resizestop', ev);\n    this._cleanHelper();\n    delete this.startEvent;\n    delete this.originalRect;\n    delete this.temporalRect;\n    delete this.scrollY;\n    delete this.scrolled;\n    return this;\n  }\n\n  /** @internal */\n  private _setupHelper(): DDResizable {\n    this.elOriginStyleVal = DDResizable._originStyleProp.map(prop => this.el.style[prop]);\n    this.parentOriginStylePosition = this.el.parentElement.style.position;\n    if (window.getComputedStyle(this.el.parentElement).position.match(/static/)) {\n      this.el.parentElement.style.position = 'relative';\n    }\n    this.el.style.position = this.option.basePosition || 'absolute'; // or 'fixed'\n    this.el.style.opacity = '0.8';\n    this.el.style.zIndex = '1000';\n    return this;\n  }\n\n  /** @internal */\n  private _cleanHelper(): DDResizable {\n    DDResizable._originStyleProp.forEach((prop, i) => {\n      this.el.style[prop] = this.elOriginStyleVal[i] || null;\n    });\n    this.el.parentElement.style.position = this.parentOriginStylePosition || null;\n    return this;\n  }\n\n  /** @internal */\n  private _getChange(event: MouseEvent, dir: string): Rect {\n    const oEvent = this.startEvent;\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n    \n    const offsetX = event.clientX - oEvent.clientX;\n    const offsetY = event.clientY - oEvent.clientY;\n\n    if (dir.indexOf('e') > -1) {\n      newRect.width += event.clientX - oEvent.clientX;\n    }\n    if (dir.indexOf('s') > -1) {\n      newRect.height += event.clientY - oEvent.clientY;\n    }\n    if (dir.indexOf('w') > -1) {\n      newRect.width -= offsetX;\n      newRect.left += offsetX;\n    }\n    if (dir.indexOf('n') > -1) {\n      newRect.height -= offsetY;\n      newRect.top += offsetY\n    }\n    const reshape = this._getReShapeSize(newRect.width, newRect.height);\n    if (newRect.width !== reshape.width) {\n      if (dir.indexOf('w') > -1) {\n        newRect.left += newRect.width - reshape.width;\n      }\n      newRect.width = reshape.width;\n    }\n    if (newRect.height !== reshape.height) {\n      if (dir.indexOf('n') > -1) {\n        newRect.top += newRect.height - reshape.height;\n      }\n      newRect.height = reshape.height;\n    }\n    return newRect;\n  }\n\n  /** @internal */\n  private _getReShapeSize(oWidth: number, oHeight: number): Size {\n    const maxWidth = this.option.maxWidth || Number.MAX_SAFE_INTEGER;\n    const minWidth = this.option.minWidth || oWidth;\n    const maxHeight = this.option.maxHeight || Number.MAX_SAFE_INTEGER;\n    const minHeight = this.option.minHeight || oHeight;\n    const width = Math.min(maxWidth, Math.max(minWidth, oWidth));\n    const height = Math.min(maxHeight, Math.max(minHeight, oHeight));\n    return { width, height };\n  }\n\n  /** @internal */\n  private _applyChange(): DDResizable {\n    let containmentRect = { left: 0, top: 0, width: 0, height: 0 };\n    if (this.el.style.position === 'absolute') {\n      const containmentEl = this.el.parentElement;\n      const { left, top } = containmentEl.getBoundingClientRect();\n      containmentRect = { left, top, width: 0, height: 0 };\n    }\n    if (!this.temporalRect) return this;\n    Object.keys(this.temporalRect).forEach(key => {\n      const value = this.temporalRect[key];\n      this.el.style[key] = value - containmentRect[key] + 'px';\n    });\n    return this;\n  }\n\n  /** @internal */\n  private _removeHandlers(): DDResizable {\n    this.handlers.forEach(handle => handle.destroy());\n    delete this.handlers;\n    return this;\n  }\n\n  /** @internal */\n  private _ui = (): DDUIData => {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n    const rect = this.temporalRect || newRect;\n    return {\n      position: {\n        left: rect.left - containmentRect.left,\n        top: rect.top - containmentRect.top\n      },\n      size: {\n        width: rect.width,\n        height: rect.height\n      }\n      /* Gridstack ONLY needs position set above... keep around in case.\n      element: [this.el], // The object representing the element to be resized\n      helper: [], // TODO: not support yet - The object representing the helper that's being resized\n      originalElement: [this.el],// we don't wrap here, so simplify as this.el //The object representing the original element before it is wrapped\n      originalPosition: { // The position represented as { left, top } before the resizable is resized\n        left: this.originalRect.left - containmentRect.left,\n        top: this.originalRect.top - containmentRect.top\n      },\n      originalSize: { // The size represented as { width, height } before the resizable is resized\n        width: this.originalRect.width,\n        height: this.originalRect.height\n      }\n      */\n    };\n  }\n}\n","/**\n * dd-utils.ts 4.1.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\nexport class DDUtils {\n\n  public static isEventSupportPassiveOption = ((() => {\n    let supportsPassive = false;\n    let passiveTest = () => {\n      // do nothing\n    };\n    document.addEventListener('test', passiveTest, {\n      get passive() {\n        supportsPassive = true;\n        return true;\n      }\n    });\n    document.removeEventListener('test', passiveTest);\n    return supportsPassive;\n  })());\n\n  public static clone(el: HTMLElement): HTMLElement {\n    const node = el.cloneNode(true) as HTMLElement;\n    node.removeAttribute('id');\n    return node;\n  }\n\n  public static appendTo(el: HTMLElement, parent: string | HTMLElement | Node): void {\n    let parentNode: HTMLElement;\n    if (typeof parent === 'string') {\n      parentNode = document.querySelector(parent as string);\n    } else {\n      parentNode = parent as HTMLElement;\n    }\n    if (parentNode) {\n      parentNode.appendChild(el);\n    }\n  }\n\n  public static setPositionRelative(el: HTMLElement): void {\n    if (!(/^(?:r|a|f)/).test(window.getComputedStyle(el).position)) {\n      el.style.position = \"relative\";\n    }\n  }\n\n  public static addElStyles(el: HTMLElement, styles: { [prop: string]: string | string[] }): void {\n    if (styles instanceof Object) {\n      for (const s in styles) {\n        if (styles.hasOwnProperty(s)) {\n          if (Array.isArray(styles[s])) {\n            // support fallback value\n            (styles[s] as string[]).forEach(val => {\n              el.style[s] = val;\n            });\n          } else {\n            el.style[s] = styles[s];\n          }\n        }\n      }\n    }\n  }\n\n  public static initEvent<T>(e: DragEvent | MouseEvent, info: { type: string; target?: EventTarget }): T {\n    const evt = { type: info.type };\n    const obj = {\n      button: 0,\n      which: 0,\n      buttons: 1,\n      bubbles: true,\n      cancelable: true,\n      target: info.target ? info.target : e.target\n    };\n    // don't check for `instanceof DragEvent` as Safari use MouseEvent #1540\n    if ((e as DragEvent).dataTransfer) {\n      evt['dataTransfer'] = (e as DragEvent).dataTransfer; // workaround 'readonly' field.\n    }\n    ['altKey','ctrlKey','metaKey','shiftKey'].forEach(p => evt[p] = e[p]); // keys\n    ['pageX','pageY','clientX','clientY','screenX','screenY'].forEach(p => evt[p] = e[p]); // point info\n    return {...evt, ...obj} as unknown as T;\n  }\n}","/**\n * gridstack-dd-native.ts 4.1.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\nimport { DDElement, DDElementHost } from './dd-element';\n\nimport { GridStackElement } from '../gridstack';\nimport { GridStackDD, DDOpts, DDKey, DDDropOpt, DDCallback, DDValue } from '../gridstack-dd';\nimport { GridItemHTMLElement, DDDragInOpt } from '../types';\nimport { Utils } from '../utils';\n\n// export our base class (what user should use) and all associated types\nexport * from '../gridstack-dd';\n\n/**\n * HTML 5 Native DragDrop based drag'n'drop plugin.\n */\nexport class GridStackDDNative extends GridStackDD {\n\n  public resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDDNative {\n    this._getDDElements(el).forEach(dEl => {\n      if (opts === 'disable' || opts === 'enable') {\n        dEl.ddResizable && dEl.ddResizable[opts](); // can't create DD as it requires options for setupResizable()\n      } else if (opts === 'destroy') {\n        dEl.ddResizable && dEl.cleanResizable();\n      } else if (opts === 'option') {\n        dEl.setupResizable({ [key]: value });\n      } else {\n        const grid = dEl.el.gridstackNode.grid;\n        let handles = dEl.el.getAttribute('gs-resize-handles') ? dEl.el.getAttribute('gs-resize-handles') : grid.opts.resizable.handles;\n        dEl.setupResizable({\n          ...grid.opts.resizable,\n          ...{ handles: handles },\n          ...{\n            start: opts.start,\n            stop: opts.stop,\n            resize: opts.resize\n          }\n        });\n      }\n    });\n    return this;\n  }\n\n  public draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDDNative {\n    this._getDDElements(el).forEach(dEl => {\n      if (opts === 'disable' || opts === 'enable') {\n        dEl.ddDraggable && dEl.ddDraggable[opts](); // can't create DD as it requires options for setupDraggable()\n      } else if (opts === 'destroy') {\n        dEl.ddDraggable && dEl.cleanDraggable();\n      } else if (opts === 'option') {\n        dEl.setupDraggable({ [key]: value });\n      } else {\n        const grid = dEl.el.gridstackNode.grid;\n        dEl.setupDraggable({\n          ...grid.opts.draggable,\n          ...{\n            containment: (grid.opts._isNested && !grid.opts.dragOut)\n              ? grid.el.parentElement\n              : (grid.opts.draggable.containment || null),\n            start: opts.start,\n            stop: opts.stop,\n            drag: opts.drag\n          }\n        });\n      }\n    });\n    return this;\n  }\n\n  public dragIn(el: GridStackElement, opts: DDDragInOpt): GridStackDDNative {\n    this._getDDElements(el).forEach(dEl => dEl.setupDraggable(opts));\n    return this;\n  }\n\n  public droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): GridStackDDNative {\n    if (typeof opts.accept === 'function' && !opts._accept) {\n      opts._accept = opts.accept;\n      opts.accept = (el) => opts._accept(el);\n    }\n    this._getDDElements(el).forEach(dEl => {\n      if (opts === 'disable' || opts === 'enable') {\n        dEl.ddDroppable && dEl.ddDroppable[opts]();\n      } else if (opts === 'destroy') {\n        if (dEl.ddDroppable) { // error to call destroy if not there\n          dEl.cleanDroppable();\n        }\n      } else if (opts === 'option') {\n        dEl.setupDroppable({ [key]: value });\n      } else {\n        dEl.setupDroppable(opts);\n      }\n    });\n    return this;\n  }\n\n  /** true if element is droppable */\n  public isDroppable(el: DDElementHost): boolean {\n    return !!(el && el.ddElement && el.ddElement.ddDroppable && !el.ddElement.ddDroppable.disabled);\n  }\n\n  /** true if element is draggable */\n  public isDraggable(el: DDElementHost): boolean {\n    return !!(el && el.ddElement && el.ddElement.ddDraggable && !el.ddElement.ddDraggable.disabled);\n  }\n\n  /** true if element is draggable */\n  public isResizable(el: DDElementHost): boolean {\n    return !!(el && el.ddElement && el.ddElement.ddResizable && !el.ddElement.ddResizable.disabled);\n  }\n\n  public on(el: GridItemHTMLElement, name: string, callback: DDCallback): GridStackDDNative {\n    this._getDDElements(el).forEach(dEl =>\n      dEl.on(name, (event: Event) => {\n        callback(\n          event,\n          DDManager.dragElement ? DDManager.dragElement.el : event.target as GridItemHTMLElement,\n          DDManager.dragElement ? DDManager.dragElement.helper : null)\n      })\n    );\n    return this;\n  }\n\n  public off(el: GridItemHTMLElement, name: string): GridStackDD {\n    this._getDDElements(el).forEach(dEl => dEl.off(name));\n    return this;\n  }\n\n  /** @internal returns a list of DD elements, creating them on the fly by default */\n  private _getDDElements(els: GridStackElement, create = true): DDElement[] {\n    let hosts = Utils.getElements(els) as DDElementHost[];\n    if (!hosts.length) return [];\n    let list = hosts.map(e => e.ddElement || (create ? DDElement.init(e) : null));\n    if (!create) { list.filter(d => d); } // remove nulls\n    return list;\n  }\n}\n\n// finally register ourself\nGridStackDD.registerPlugin(GridStackDDNative);\n","/**\r\n * utils.ts 4.1.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridStackElement, GridStackNode, GridStackOptions, numberOrString, GridStackPosition, GridStackWidget } from './types';\r\n\r\nexport interface HeightData {\r\n  h: number;\r\n  unit: string;\r\n}\r\n\r\n/** checks for obsolete method names */\r\n// eslint-disable-next-line\r\nexport function obsolete(self, f, oldName: string, newName: string, rev: string): (...args: any[]) => any {\r\n  let wrapper = (...args) => {\r\n    console.warn('gridstack.js: Function `' + oldName + '` is deprecated in ' + rev + ' and has been replaced ' +\r\n    'with `' + newName + '`. It will be **completely** removed in v1.0');\r\n    return f.apply(self, args);\r\n  }\r\n  wrapper.prototype = f.prototype;\r\n  return wrapper;\r\n}\r\n\r\n/** checks for obsolete grid options (can be used for any fields, but msg is about options) */\r\nexport function obsoleteOpts(opts: GridStackOptions, oldName: string, newName: string, rev: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    opts[newName] = opts[oldName];\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **completely** removed in v1.0');\r\n  }\r\n}\r\n\r\n/** checks for obsolete grid options which are gone */\r\nexport function obsoleteOptsDel(opts: GridStackOptions, oldName: string, rev: string, info: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + info);\r\n  }\r\n}\r\n\r\n/** checks for obsolete Jquery element attributes */\r\nexport function obsoleteAttr(el: HTMLElement, oldName: string, newName: string, rev: string): void {\r\n  let oldAttr = el.getAttribute(oldName);\r\n  if (oldAttr !== null) {\r\n    el.setAttribute(newName, oldAttr);\r\n    console.warn('gridstack.js: attribute `' + oldName + '`=' + oldAttr + ' is deprecated on this object in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **completely** removed in v1.0');\r\n  }\r\n}\r\n\r\n/**\r\n * Utility methods\r\n */\r\nexport class Utils {\r\n\r\n  /** convert a potential selector into actual list of html elements */\r\n  static getElements(els: GridStackElement): HTMLElement[] {\r\n    if (typeof els === 'string') {\r\n      let list = document.querySelectorAll(els);\r\n      if (!list.length && els[0] !== '.' && els[0] !== '#') {\r\n        list = document.querySelectorAll('.' + els);\r\n        if (!list.length) { list = document.querySelectorAll('#' + els) }\r\n      }\r\n      return Array.from(list) as HTMLElement[];\r\n    }\r\n    return [els];\r\n  }\r\n\r\n  /** convert a potential selector into actual single element */\r\n  static getElement(els: GridStackElement): HTMLElement {\r\n    if (typeof els === 'string') {\r\n      if (!els.length) return null;\r\n      if (els[0] === '#') {\r\n        return document.getElementById(els.substring(1));\r\n      }\r\n      if (els[0] === '.' || els[0] === '[') {\r\n        return document.querySelector(els);\r\n      }\r\n\r\n      // if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS\r\n      if(!isNaN(+els[0])) { // start with digit\r\n        return document.getElementById(els);\r\n      }\r\n\r\n      // finally try string, then id then class\r\n      let el = document.querySelector(els);\r\n      if (!el) { el = document.getElementById(els) }\r\n      if (!el) { el = document.querySelector('.' + els) }\r\n      return el as HTMLElement;\r\n    }\r\n    return els;\r\n  }\r\n\r\n  /** returns true if a and b overlap */\r\n  static isIntercepted(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return !(a.y >= b.y + b.h || a.y + a.h <= b.y || a.x + a.w <= b.x || a.x >= b.x + b.w);\r\n  }\r\n\r\n  /** returns true if a and b touch edges or corners */\r\n  static isTouching(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return Utils.isIntercepted(a, {x: b.x-0.5, y: b.y-0.5, w: b.w+1, h: b.h+1})\r\n  }\r\n  /**\r\n   * Sorts array of nodes\r\n   * @param nodes array to sort\r\n   * @param dir 1 for asc, -1 for desc (optional)\r\n   * @param width width of the grid. If undefined the width will be calculated automatically (optional).\r\n   **/\r\n  static sort(nodes: GridStackNode[], dir?: -1 | 1, column?: number): GridStackNode[] {\r\n    column = column || nodes.reduce((col, n) => Math.max(n.x + n.w, col), 0) || 12;\r\n    if (dir === -1)\r\n      return nodes.sort((a, b) => (b.x + b.y * column)-(a.x + a.y * column));\r\n    else\r\n      return nodes.sort((b, a) => (b.x + b.y * column)-(a.x + a.y * column));\r\n  }\r\n\r\n  /**\r\n   * creates a style sheet with style id under given parent\r\n   * @param id will set the 'gs-style-id' attribute to that id\r\n   * @param parent to insert the stylesheet as first child,\r\n   * if none supplied it will be appended to the document head instead.\r\n   */\r\n  static createStylesheet(id: string, parent?: HTMLElement): CSSStyleSheet {\r\n    let style: HTMLStyleElement = document.createElement('style');\r\n    style.setAttribute('type', 'text/css');\r\n    style.setAttribute('gs-style-id', id);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if ((style as any).styleSheet) { // TODO: only CSSImportRule have that and different beast ??\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (style as any).styleSheet.cssText = '';\r\n    } else {\r\n      style.appendChild(document.createTextNode('')); // WebKit hack\r\n    }\r\n    if (!parent) {\r\n      // default to head\r\n      parent = document.getElementsByTagName('head')[0];\r\n      parent.appendChild(style);\r\n    } else {\r\n      parent.insertBefore(style, parent.firstChild);\r\n    }\r\n    return style.sheet as CSSStyleSheet;\r\n  }\r\n\r\n  /** removed the given stylesheet id */\r\n  static removeStylesheet(id: string): void {\r\n    let el = document.querySelector('STYLE[gs-style-id=' + id + ']');\r\n    if (el && el.parentNode) el.remove();\r\n  }\r\n\r\n  /** inserts a CSS rule */\r\n  static addCSSRule(sheet: CSSStyleSheet, selector: string, rules: string): void {\r\n    if (typeof sheet.addRule === 'function') {\r\n      sheet.addRule(selector, rules);\r\n    } else if (typeof sheet.insertRule === 'function') {\r\n      sheet.insertRule(`${selector}{${rules}}`);\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  static toBool(v: unknown): boolean {\r\n    if (typeof v === 'boolean') {\r\n      return v;\r\n    }\r\n    if (typeof v === 'string') {\r\n      v = v.toLowerCase();\r\n      return !(v === '' || v === 'no' || v === 'false' || v === '0');\r\n    }\r\n    return Boolean(v);\r\n  }\r\n\r\n  static toNumber(value: null | string): number {\r\n    return (value === null || value.length === 0) ? undefined : Number(value);\r\n  }\r\n\r\n  static parseHeight(val: numberOrString): HeightData {\r\n    let h: number;\r\n    let unit = 'px';\r\n    if (typeof val === 'string') {\r\n      let match = val.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);\r\n      if (!match) {\r\n        throw new Error('Invalid height');\r\n      }\r\n      unit = match[2] || 'px';\r\n      h = parseFloat(match[1]);\r\n    } else {\r\n      h = val;\r\n    }\r\n    return { h, unit };\r\n  }\r\n\r\n  /** copies unset fields in target to use the given default sources values */\r\n  // eslint-disable-next-line\r\n  static defaults(target, ...sources): {} {\r\n\r\n    sources.forEach(source => {\r\n      for (const key in source) {\r\n        if (!source.hasOwnProperty(key)) return;\r\n        if (target[key] === null || target[key] === undefined) {\r\n          target[key] = source[key];\r\n        } else if (typeof source[key] === 'object' && typeof target[key] === 'object') {\r\n          // property is an object, recursively add it's field over... #1373\r\n          this.defaults(target[key], source[key]);\r\n        }\r\n      }\r\n    });\r\n\r\n    return target;\r\n  }\r\n\r\n  /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */\r\n  static same(a: unknown, b: unknown): boolean {\r\n    if (typeof a !== 'object')  return a == b;\r\n    if (typeof a !== typeof b) return false;\r\n    // else we have object, check just 1 level deep for being same things...\r\n    if (Object.keys(a).length !== Object.keys(b).length) return false;\r\n    for (const key in a) {\r\n      if (a[key] !== b[key]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /* copies over b size & position (GridStackPosition), and possibly min/max as well */\r\n  static copyPos(a: GridStackWidget, b: GridStackWidget, minMax = false): GridStackWidget {\r\n    a.x = b.x;\r\n    a.y = b.y;\r\n    a.w = b.w;\r\n    a.h = b.h;\r\n    if (!minMax) return a;\r\n    if (b.minW) a.minW = b.minW;\r\n    if (b.minH) a.minH = b.minH;\r\n    if (b.maxW) a.maxW = b.maxW;\r\n    if (b.maxH) a.maxH = b.maxH;\r\n    return a;\r\n  }\r\n\r\n  /* true if a and b has same size & position */\r\n  static samePos(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return a && b && a.x === b.x && a.y === b.y && a.w === b.w && a.h === b.h;\r\n  }\r\n\r\n  /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */\r\n  static removeInternalAndSame(a: unknown, b: unknown):void {\r\n    if (typeof a !== 'object' || typeof b !== 'object') return;\r\n    for (let key in a) {\r\n      let val = a[key];\r\n      if (val && typeof val === 'object' && b[key] !== undefined) {\r\n        for (let i in val) {\r\n          if (val[i] === b[key][i] || i[0] === '_') { delete val[i] }\r\n        }\r\n        if (!Object.keys(val).length) { delete a[key] }\r\n      } else if (val === b[key] || key[0] === '_') { delete a[key] }\r\n    }\r\n  }\r\n\r\n  /** return the closest parent matching the given class */\r\n  static closestByClass(el: HTMLElement, name: string): HTMLElement {\r\n\r\n    while(el = el.parentElement) {\r\n      if (el.classList.contains(name)) return el;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** delay calling the given function for given delay, preventing new calls from happening while waiting */\r\n  static throttle(func: () => void, delay: number): () => void {\r\n    let isWaiting = false;\r\n    return (...args) => {\r\n      if (!isWaiting) {\r\n        isWaiting = true;\r\n        setTimeout(() => { func(...args); isWaiting = false; }, delay);\r\n      }\r\n    }\r\n  }\r\n\r\n  static removePositioningStyles(el: HTMLElement): void {\r\n    let style = el.style;\r\n    if (style.position) {\r\n      style.removeProperty('position');\r\n    }\r\n    if (style.left) {\r\n      style.removeProperty('left');\r\n    }\r\n    if (style.top) {\r\n      style.removeProperty('top');\r\n    }\r\n    if (style.width) {\r\n      style.removeProperty('width');\r\n    }\r\n    if (style.height) {\r\n      style.removeProperty('height');\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  static getScrollParent(el: HTMLElement): HTMLElement {\r\n    if (el === null) return document.documentElement;\r\n    const style = getComputedStyle(el);\r\n    const overflowRegex = /(auto|scroll)/;\r\n\r\n    if (overflowRegex.test(style.overflow + style.overflowY)) {\r\n      return el;\r\n    } else {\r\n      return this.getScrollParent(el.parentElement);\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  static updateScrollPosition(el: HTMLElement, position: {top: number}, distance: number): void {\r\n    // is widget in view?\r\n    let rect = el.getBoundingClientRect();\r\n    let innerHeightOrClientHeight = (window.innerHeight || document.documentElement.clientHeight);\r\n    if (rect.top < 0 ||\r\n      rect.bottom > innerHeightOrClientHeight\r\n    ) {\r\n      // set scrollTop of first parent that scrolls\r\n      // if parent is larger than el, set as low as possible\r\n      // to get entire widget on screen\r\n      let offsetDiffDown = rect.bottom - innerHeightOrClientHeight;\r\n      let offsetDiffUp = rect.top;\r\n      let scrollEl = this.getScrollParent(el);\r\n      if (scrollEl !== null) {\r\n        let prevScroll = scrollEl.scrollTop;\r\n        if (rect.top < 0 && distance < 0) {\r\n          // moving up\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;\r\n          }\r\n        } else if (distance > 0) {\r\n          // moving down\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;\r\n          }\r\n        }\r\n        // move widget y by amount scrolled\r\n        position.top += scrollEl.scrollTop - prevScroll;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal Function used to scroll the page.\r\n   *\r\n   * @param event `MouseEvent` that triggers the resize\r\n   * @param el `HTMLElement` that's being resized\r\n   * @param distance Distance from the V edges to start scrolling\r\n   */\r\n  static updateScrollResize(event: MouseEvent, el: HTMLElement, distance: number): void {\r\n    const scrollEl = this.getScrollParent(el);\r\n    const height = scrollEl.clientHeight;\r\n\r\n    const top = event.clientY < distance;\r\n    const bottom = event.clientY > height - distance;\r\n\r\n    if (top) {\r\n      // This also can be done with a timeout to keep scrolling while the mouse is\r\n      // in the scrolling zone. (will have smoother behavior)\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: event.clientY - distance});\r\n    } else if (bottom) {\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: distance - (height - event.clientY)});\r\n    }\r\n  }\r\n}\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(930);\n"],"sourceRoot":""}