<?php

/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Zikula\ContentModule\Form\Type\Base;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\DateIntervalType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\ResetType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Translation\Extractor\Annotation\Ignore;
use Translation\Extractor\Annotation\Translate;
use Zikula\ContentModule\Form\Type\Field\MultiListType;
use Zikula\ContentModule\AppSettings;
use Zikula\ContentModule\Helper\ListEntriesHelper;

/**
 * Configuration form type base class.
 */
abstract class AbstractConfigType extends AbstractType
{

    /**
     * @var ListEntriesHelper
     */
    protected $listHelper;

    public function __construct(
        ListEntriesHelper $listHelper
    ) {
        $this->listHelper = $listHelper;
    }

    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $this->addGeneralSettingsFields($builder, $options);
        $this->addCustomStylesFields($builder, $options);
        $this->addAdditionalFieldsFields($builder, $options);
        $this->addPermalinksFields($builder, $options);
        $this->addListViewsFields($builder, $options);
        $this->addModerationFields($builder, $options);
        $this->addIntegrationFields($builder, $options);
        $this->addVersioningFields($builder, $options);

        $this->addSubmitButtons($builder, $options);
    }

    /**
     * Adds fields for general settings fields.
     */
    public function addGeneralSettingsFields(FormBuilderInterface $builder, array $options = []): void
    {
        
        $listEntries = $this->listHelper->getEntries('appSettings', 'stateOfNewPages');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('stateOfNewPages', ChoiceType::class, [
            'label' => 'State of new pages:',
            'empty_data' => '1',
            'attr' => [
                'class' => '',
                'title' => 'Choose the state of new pages.'
            ],
            'required' => true,
            'choices' => /** @Ignore */$choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false
        ]);
        
        $builder->add('countPageViews', CheckboxType::class, [
            'label' => 'Count page views:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'Page views are only counted when the user has no edit access. Enable if you want to use the block showing most viewed pages.'
            ],
            'help' => 'Page views are only counted when the user has no edit access. Enable if you want to use the block showing most viewed pages.',
            'attr' => [
                'class' => '',
                'title' => 'The count page views option'
            ],
            'required' => false,
        ]);
        
        $builder->add('googleMapsApiKey', TextType::class, [
            'label' => 'Google maps api key:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'If you want to use Google maps you need an API key for it. You should enable both "Maps JavaScript API" and "Maps Static API".'
            ],
            'help' => 'If you want to use Google maps you need an API key for it. You should enable both "Maps JavaScript API" and "Maps Static API".',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => 'Enter the google maps api key.'
            ],
            'required' => false,
        ]);
        
        $builder->add('yandexTranslateApiKey', TextType::class, [
            'label' => 'Yandex translate api key:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'If you want to get translation support by Yandex which can provide suggestions you need an API key for it.'
            ],
            'help' => 'If you want to get translation support by Yandex which can provide suggestions you need an API key for it.',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => 'Enter the yandex translate api key.'
            ],
            'required' => false,
        ]);
        
        $builder->add('enableRawPlugin', CheckboxType::class, [
            'label' => 'Enable raw plugin:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'Whether to enable the unfiltered raw text plugin. Use this plugin with caution and if you can trust your editors, since no filtering is being done on the content. To be used for iframes, JavaScript blocks, etc.'
            ],
            'help' => 'Whether to enable the unfiltered raw text plugin. Use this plugin with caution and if you can trust your editors, since no filtering is being done on the content. To be used for iframes, JavaScript blocks, etc.',
            'attr' => [
                'class' => '',
                'title' => 'The enable raw plugin option'
            ],
            'required' => false,
        ]);
        
        $builder->add('inheritPermissions', CheckboxType::class, [
            'label' => 'Inherit permissions:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'Whether to inherit permissions from parent to child pages or not.'
            ],
            'help' => 'Whether to inherit permissions from parent to child pages or not.',
            'attr' => [
                'class' => '',
                'title' => 'The inherit permissions option'
            ],
            'required' => false,
        ]);
        
        $builder->add('enableAutomaticPageLinks', CheckboxType::class, [
            'label' => 'Enable automatic page links:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'Whether page titles should automatically be linked using MultiHook.'
            ],
            'help' => 'Whether page titles should automatically be linked using MultiHook.',
            'attr' => [
                'class' => '',
                'title' => 'The enable automatic page links option'
            ],
            'required' => false,
        ]);
    }

    /**
     * Adds fields for custom styles fields.
     */
    public function addCustomStylesFields(FormBuilderInterface $builder, array $options = []): void
    {
        
        $builder->add('pageStyles', TextareaType::class, [
            'label' => 'Page styles:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'A list of CSS class names available for styling pages - for example "product" or "legal".'
            ],
            /** @Ignore */
            'help' => [
                /** @Translate */'A list of CSS class names available for styling pages - for example "product" or "legal".',
                /** @Translate */'Note: this value must not exceed %length% characters.',
            ],
            'help_translation_parameters' => ['%length%' => 5000],
            'empty_data' => 'dummy|Dummy',
            'attr' => [
                'maxlength' => 5000,
                'class' => '',
                'title' => 'Enter the page styles.'
            ],
            'required' => true,
        ]);
        
        $builder->add('sectionStyles', TextareaType::class, [
            'label' => 'Section styles:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'A list of CSS class names available for styling page sections - for example "header" or "reference-row".'
            ],
            /** @Ignore */
            'help' => [
                /** @Translate */'A list of CSS class names available for styling page sections - for example "header" or "reference-row".',
                /** @Translate */'Note: this value must not exceed %length% characters.',
            ],
            'help_translation_parameters' => ['%length%' => 5000],
            'empty_data' => 'dummy|Dummy',
            'attr' => [
                'maxlength' => 5000,
                'class' => '',
                'title' => 'Enter the section styles.'
            ],
            'required' => true,
        ]);
        
        $builder->add('contentStyles', TextareaType::class, [
            'label' => 'Content styles:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'A list of CSS class names available for styling single content elements - for instance "note" or "shadow".'
            ],
            /** @Ignore */
            'help' => [
                /** @Translate */'A list of CSS class names available for styling single content elements - for instance "note" or "shadow".',
                /** @Translate */'Note: this value must not exceed %length% characters.',
            ],
            'help_translation_parameters' => ['%length%' => 5000],
            'empty_data' => 'dummy|Dummy',
            'attr' => [
                'maxlength' => 5000,
                'class' => '',
                'title' => 'Enter the content styles.'
            ],
            'required' => true,
        ]);
    }

    /**
     * Adds fields for additional fields fields.
     */
    public function addAdditionalFieldsFields(FormBuilderInterface $builder, array $options = []): void
    {
        
        $builder->add('enableOptionalString1', CheckboxType::class, [
            'label' => 'Enable optional string 1:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'If you need an additional string for each page you can enable an optional field.'
            ],
            'help' => 'If you need an additional string for each page you can enable an optional field.',
            'attr' => [
                'class' => '',
                'title' => 'The enable optional string 1 option'
            ],
            'required' => false,
        ]);
        
        $builder->add('enableOptionalString2', CheckboxType::class, [
            'label' => 'Enable optional string 2:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'If you need an additional string for each page you can enable an optional field.'
            ],
            'help' => 'If you need an additional string for each page you can enable an optional field.',
            'attr' => [
                'class' => '',
                'title' => 'The enable optional string 2 option'
            ],
            'required' => false,
        ]);
        
        $builder->add('enableOptionalText', CheckboxType::class, [
            'label' => 'Enable optional text:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'If you need an additional text for each page you can enable an optional field.'
            ],
            'help' => 'If you need an additional text for each page you can enable an optional field.',
            'attr' => [
                'class' => '',
                'title' => 'The enable optional text option'
            ],
            'required' => false,
        ]);
    }

    /**
     * Adds fields for permalinks fields.
     */
    public function addPermalinksFields(FormBuilderInterface $builder, array $options = []): void
    {
        
        $builder->add('ignoreBundleNameInRoutes', CheckboxType::class, [
            'label' => 'Ignore bundle name in routes:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'This removes the module name (defaults to "content") from permalinks.'
            ],
            'help' => 'This removes the module name (defaults to "content") from permalinks.',
            'attr' => [
                'class' => '',
                'title' => 'The ignore bundle name in routes option'
            ],
            'required' => false,
        ]);
        
        $builder->add('ignoreEntityNameInRoutes', CheckboxType::class, [
            'label' => 'Ignore entity name in routes:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'This removes the primary entity name ("page") from permalinks.'
            ],
            'help' => 'This removes the primary entity name ("page") from permalinks.',
            'attr' => [
                'class' => '',
                'title' => 'The ignore entity name in routes option'
            ],
            'required' => false,
        ]);
        
        $builder->add('ignoreFirstTreeLevelInRoutes', CheckboxType::class, [
            'label' => 'Ignore first tree level in routes:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'This removes the first tree level of pages from permalinks of pages in greater levels. If enabled first level pages act only as dummys while second level pages are the actual main pages. Recommended because it allows working with only one single tree of pages.'
            ],
            'help' => 'This removes the first tree level of pages from permalinks of pages in greater levels. If enabled first level pages act only as dummys while second level pages are the actual main pages. Recommended because it allows working with only one single tree of pages.',
            'attr' => [
                'class' => '',
                'title' => 'The ignore first tree level in routes option'
            ],
            'required' => false,
        ]);
        
        $listEntries = $this->listHelper->getEntries('appSettings', 'permalinkSuffix');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('permalinkSuffix', ChoiceType::class, [
            'label' => 'Permalink suffix:',
            'empty_data' => 'none',
            'attr' => [
                'class' => '',
                'title' => 'Choose the permalink suffix.'
            ],
            'required' => true,
            'choices' => /** @Ignore */$choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false
        ]);
    }

    /**
     * Adds fields for list views fields.
     */
    public function addListViewsFields(FormBuilderInterface $builder, array $options = []): void
    {
        
        $builder->add('pageEntriesPerPage', IntegerType::class, [
            'label' => 'Page entries per page:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'The amount of pages shown per page'
            ],
            'help' => 'The amount of pages shown per page',
            'empty_data' => 10,
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'title' => 'Enter the page entries per page. Only digits are allowed.'
            ],
            'required' => true,
        ]);
        
        $builder->add('linkOwnPagesOnAccountPage', CheckboxType::class, [
            'label' => 'Link own pages on account page:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'Whether to add a link to pages of the current user on his account page'
            ],
            'help' => 'Whether to add a link to pages of the current user on his account page',
            'attr' => [
                'class' => '',
                'title' => 'The link own pages on account page option'
            ],
            'required' => false,
        ]);
        
        $builder->add('pagePrivateMode', CheckboxType::class, [
            'label' => 'Page private mode:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'Whether users may only see own pages'
            ],
            'help' => 'Whether users may only see own pages',
            'attr' => [
                'class' => '',
                'title' => 'The page private mode option'
            ],
            'required' => false,
        ]);
        
        $builder->add('showOnlyOwnEntries', CheckboxType::class, [
            'label' => 'Show only own entries:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'Whether only own entries should be shown on view pages by default or not'
            ],
            'help' => 'Whether only own entries should be shown on view pages by default or not',
            'attr' => [
                'class' => '',
                'title' => 'The show only own entries option'
            ],
            'required' => false,
        ]);
    }

    /**
     * Adds fields for moderation fields.
     */
    public function addModerationFields(FormBuilderInterface $builder, array $options = []): void
    {
        
        $builder->add('allowModerationSpecificCreatorForPage', CheckboxType::class, [
            'label' => 'Allow moderation specific creator for page:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'Whether to allow moderators choosing a user which will be set as creator.'
            ],
            'help' => 'Whether to allow moderators choosing a user which will be set as creator.',
            'attr' => [
                'class' => '',
                'title' => 'The allow moderation specific creator for page option'
            ],
            'required' => false,
        ]);
        
        $builder->add('allowModerationSpecificCreationDateForPage', CheckboxType::class, [
            'label' => 'Allow moderation specific creation date for page:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'Whether to allow moderators choosing a custom creation date.'
            ],
            'help' => 'Whether to allow moderators choosing a custom creation date.',
            'attr' => [
                'class' => '',
                'title' => 'The allow moderation specific creation date for page option'
            ],
            'required' => false,
        ]);
    }

    /**
     * Adds fields for integration fields.
     */
    public function addIntegrationFields(FormBuilderInterface $builder, array $options = []): void
    {
        
        $listEntries = $this->listHelper->getEntries('appSettings', 'enabledFinderTypes');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('enabledFinderTypes', MultiListType::class, [
            'label' => 'Enabled finder types:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Which sections are supported in the Finder component (used by Scribite plug-ins).'
            ],
            'help' => 'Which sections are supported in the Finder component (used by Scribite plug-ins).',
            'empty_data' => [],
            'attr' => [
                'class' => '',
                'title' => 'Choose the enabled finder types.'
            ],
            'required' => false,
            'placeholder' => 'Choose an option',
            'choices' => /** @Ignore */$choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => true,
            'expanded' => false
        ]);
    }

    /**
     * Adds fields for versioning fields.
     */
    public function addVersioningFields(FormBuilderInterface $builder, array $options = []): void
    {
        
        $listEntries = $this->listHelper->getEntries('appSettings', 'revisionHandlingForPage');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('revisionHandlingForPage', ChoiceType::class, [
            'label' => 'Revision handling for page:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Adding a limitation to the revisioning will still keep the possibility to revert pages to an older version. You will loose the possibility to inspect changes done earlier than the oldest stored revision though.'
            ],
            'help' => 'Adding a limitation to the revisioning will still keep the possibility to revert pages to an older version. You will loose the possibility to inspect changes done earlier than the oldest stored revision though.',
            'empty_data' => 'unlimited',
            'attr' => [
                'class' => '',
                'title' => 'Choose the revision handling for page.'
            ],
            'required' => true,
            'choices' => /** @Ignore */$choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false
        ]);
        
        $listEntries = $this->listHelper->getEntries('appSettings', 'maximumAmountOfPageRevisions');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('maximumAmountOfPageRevisions', ChoiceType::class, [
            'label' => 'Maximum amount of page revisions:',
            'empty_data' => '25',
            'attr' => [
                'class' => '',
                'title' => 'Choose the maximum amount of page revisions.'
            ],
            'required' => false,
            'placeholder' => 'Choose an option',
            'choices' => /** @Ignore */$choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false
        ]);
        
        $builder->add('periodForPageRevisions', DateIntervalType::class, [
            'label' => 'Period for page revisions:',
            'empty_data' => 'P1Y0M0DT0H0M0S',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => 'Choose the period for page revisions.'
            ],
            'required' => false,
            /** @Ignore */
            'labels' => [
                'years' => /** @Translate */'Years',
                'months' => /** @Translate */'Months',
                'days' => /** @Translate */'Days',
                'hours' => /** @Translate */'Hours',
                'minutes' => /** @Translate */'Minutes',
                'seconds' => /** @Translate */'Seconds'
            ],
            /** @Ignore */
            'placeholder' => [
                'years' => /** @Translate */'Years',
                'months' => /** @Translate */'Months',
                'days' => /** @Translate */'Days',
                'hours' => /** @Translate */'Hours',
                'minutes' => /** @Translate */'Minutes',
                'seconds' => /** @Translate */'Seconds'
            ],
            'input' => 'string',
            'widget' => 'choice',
            'with_years' => true,
            'with_months' => true,
            'with_weeks' => false,
            'with_days' => true,
            'with_hours' => true,
            'with_minutes' => true,
            'with_seconds' => true
        ]);
        
        $builder->add('showPageHistory', CheckboxType::class, [
            'label' => 'Show page history:',
            'label_attr' => [
                'class' => 'tooltips switch-custom',
                'title' => 'Whether to show the version history to editors or not.'
            ],
            'help' => 'Whether to show the version history to editors or not.',
            'attr' => [
                'class' => '',
                'title' => 'The show page history option'
            ],
            'required' => false,
        ]);
    }

    /**
     * Adds submit buttons.
     */
    public function addSubmitButtons(FormBuilderInterface $builder, array $options = []): void
    {
        $builder->add('save', SubmitType::class, [
            'label' => 'Update configuration',
            'icon' => 'fa-check',
            'attr' => [
                'class' => 'btn-success'
            ]
        ]);
        $builder->add('reset', ResetType::class, [
            'label' => 'Reset',
            'icon' => 'fa-sync',
            'attr' => [
                'formnovalidate' => 'formnovalidate'
            ]
        ]);
        $builder->add('cancel', SubmitType::class, [
            'label' => 'Cancel',
            'validate' => false,
            'icon' => 'fa-times'
        ]);
    }

    public function getBlockPrefix()
    {
        return 'zikulacontentmodule_config';
    }

    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults([
            // define class for underlying data
            'data_class' => AppSettings::class,
        ]);
    }
}
