<?php

/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Zikula\ContentModule\Form\Type\Finder\Base;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\HiddenType;
use Symfony\Component\Form\Extension\Core\Type\SearchType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Contracts\Translation\TranslatorInterface;
use Zikula\CategoriesModule\Form\Type\CategoriesType;
use Zikula\Common\Translator\TranslatorTrait;
use Zikula\ContentModule\Helper\FeatureActivationHelper;

/**
 * Page finder form type base class.
 */
abstract class AbstractPageFinderType extends AbstractType
{
    use TranslatorTrait;

    /**
     * @var FeatureActivationHelper
     */
    protected $featureActivationHelper;

    public function __construct(
        TranslatorInterface $translator,
        FeatureActivationHelper $featureActivationHelper
    ) {
        $this->setTranslator($translator);
        $this->featureActivationHelper = $featureActivationHelper;
    }

    public function setTranslator(TranslatorInterface $translator): void
    {
        $this->translator = $translator;
    }

    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->setMethod('GET')
            ->add('objectType', HiddenType::class, [
                'data' => $options['object_type']
            ])
            ->add('editor', HiddenType::class, [
                'data' => $options['editor_name']
            ])
        ;

        if ($this->featureActivationHelper->isEnabled(FeatureActivationHelper::CATEGORIES, $options['object_type'])) {
            $this->addCategoriesField($builder, $options);
        }
        $this->addPasteAsField($builder, $options);
        $this->addSortingFields($builder, $options);
        $this->addAmountField($builder, $options);
        $this->addSearchField($builder, $options);

        $builder
            ->add('update', SubmitType::class, [
                'label' => $this->trans('Change selection'),
                'icon' => 'fa-check',
                'attr' => [
                    'class' => 'btn btn-success'
                ]
            ])
            ->add('cancel', SubmitType::class, [
                'label' => $this->trans('Cancel'),
                'validate' => false,
                'icon' => 'fa-times',
                'attr' => [
                    'class' => 'btn btn-default'
                ]
            ])
        ;
    }

    /**
     * Adds a categories field.
     */
    public function addCategoriesField(FormBuilderInterface $builder, array $options = []): void
    {
        $entityCategoryClass = 'Zikula\ContentModule\Entity\\' . ucfirst($options['object_type']) . 'CategoryEntity';
        $builder->add('categories', CategoriesType::class, [
            'label' => $this->trans('Category') . ':',
            'empty_data' => null,
            'attr' => [
                'class' => 'category-selector',
                'title' => $this->trans('This is an optional filter.')
            ],
            'help' => $this->trans('This is an optional filter.'),
            'required' => false,
            'multiple' => false,
            'module' => 'ZikulaContentModule',
            'entity' => ucfirst($options['object_type']) . 'Entity',
            'entityCategoryClass' => $entityCategoryClass,
            'showRegistryLabels' => true
        ]);
    }

    /**
     * Adds a "paste as" field.
     */
    public function addPasteAsField(FormBuilderInterface $builder, array $options = []): void
    {
        $builder->add('pasteAs', ChoiceType::class, [
            'label' => $this->trans('Paste as') . ':',
            'empty_data' => 1,
            'choices' => [
                $this->trans('Relative link to the page') => 1,
                $this->trans('Absolute url to the page') => 2,
                $this->trans('ID of page') => 3
            ],
            'multiple' => false,
            'expanded' => false
        ]);
    }

    /**
     * Adds sorting fields.
     */
    public function addSortingFields(FormBuilderInterface $builder, array $options = []): void
    {
        $builder
            ->add('sort', ChoiceType::class, [
                'label' => $this->trans('Sort by') . ':',
                'empty_data' => '',
                'choices' => [
                    $this->trans('Title') => 'title',
                    $this->trans('Views') => 'views',
                    $this->trans('Active') => 'active',
                    $this->trans('Active from') => 'activeFrom',
                    $this->trans('Active to') => 'activeTo',
                    $this->trans('In menu') => 'inMenu',
                    $this->trans('Optional string 1') => 'optionalString1',
                    $this->trans('Optional string 2') => 'optionalString2',
                    $this->trans('Current version') => 'currentVersion',
                    $this->trans('Creation date') => 'createdDate',
                    $this->trans('Creator') => 'createdBy',
                    $this->trans('Update date') => 'updatedDate',
                    $this->trans('Updater') => 'updatedBy'
                ],
                'multiple' => false,
                'expanded' => false
            ])
            ->add('sortdir', ChoiceType::class, [
                'label' => $this->trans('Sort direction') . ':',
                'empty_data' => 'asc',
                'choices' => [
                    $this->trans('Ascending') => 'asc',
                    $this->trans('Descending') => 'desc'
                ],
                'multiple' => false,
                'expanded' => false
            ])
        ;
    }

    /**
     * Adds a page size field.
     */
    public function addAmountField(FormBuilderInterface $builder, array $options = []): void
    {
        $builder->add('num', ChoiceType::class, [
            'label' => $this->trans('Page size') . ':',
            'empty_data' => 20,
            'attr' => [
                'class' => 'text-right'
            ],
            'choices' => [
                5 => 5,
                10 => 10,
                15 => 15,
                20 => 20,
                30 => 30,
                50 => 50,
                100 => 100
            ],
            'multiple' => false,
            'expanded' => false
        ]);
    }

    /**
     * Adds a search field.
     */
    public function addSearchField(FormBuilderInterface $builder, array $options = []): void
    {
        $builder->add('q', SearchType::class, [
            'label' => $this->trans('Search for') . ':',
            'required' => false,
            'attr' => [
                'maxlength' => 255
            ]
        ]);
    }

    public function getBlockPrefix()
    {
        return 'zikulacontentmodule_pagefinder';
    }

    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver
            ->setDefaults([
                'object_type' => 'page',
                'editor_name' => 'ckeditor'
            ])
            ->setRequired(['object_type', 'editor_name'])
            ->setAllowedTypes('object_type', 'string')
            ->setAllowedTypes('editor_name', 'string')
            ->setAllowedValues('editor_name', ['ckeditor', 'quill', 'summernote', 'tinymce'])
        ;
    }
}
