<?php

/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Zikula\ContentModule\Form\Type\QuickNavigation\Base;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\HiddenType;
use Symfony\Component\Form\Extension\Core\Type\SearchType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Contracts\Translation\TranslatorInterface;
use Zikula\CategoriesModule\Form\Type\CategoriesType;
use Zikula\Common\Translator\TranslatorTrait;
use Zikula\ContentModule\Form\Type\Field\MultiListType;
use Zikula\ContentModule\Helper\FeatureActivationHelper;
use Zikula\ContentModule\Helper\ListEntriesHelper;

/**
 * Page quick navigation form type base class.
 */
abstract class AbstractPageQuickNavType extends AbstractType
{
    use TranslatorTrait;

    /**
     * @var ListEntriesHelper
     */
    protected $listHelper;

    /**
     * @var FeatureActivationHelper
     */
    protected $featureActivationHelper;

    public function __construct(
        TranslatorInterface $translator,
        ListEntriesHelper $listHelper,
        FeatureActivationHelper $featureActivationHelper
    ) {
        $this->setTranslator($translator);
        $this->listHelper = $listHelper;
        $this->featureActivationHelper = $featureActivationHelper;
    }

    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->setMethod('GET')
            ->add('all', HiddenType::class)
            ->add('own', HiddenType::class)
            ->add('tpl', HiddenType::class)
        ;

        if ($this->featureActivationHelper->isEnabled(FeatureActivationHelper::CATEGORIES, 'page')) {
            $this->addCategoriesField($builder, $options);
        }
        $this->addListFields($builder, $options);
        $this->addSearchField($builder, $options);
        $this->addSortingFields($builder, $options);
        $this->addAmountField($builder, $options);
        $this->addBooleanFields($builder, $options);
        $builder->add('updateview', SubmitType::class, [
            'label' => $this->trans('OK'),
            'attr' => [
                'class' => 'btn btn-default btn-sm'
            ]
        ]);
    }

    /**
     * Adds a categories field.
     */
    public function addCategoriesField(FormBuilderInterface $builder, array $options = []): void
    {
        $objectType = 'page';
        $entityCategoryClass = 'Zikula\ContentModule\Entity\\' . ucfirst($objectType) . 'CategoryEntity';
        $builder->add('categories', CategoriesType::class, [
            'label' => $this->trans('Category'),
            'empty_data' => null,
            'attr' => [
                'class' => 'form-control-sm category-selector',
                'title' => $this->trans('This is an optional filter.')
            ],
            'required' => false,
            'multiple' => false,
            'module' => 'ZikulaContentModule',
            'entity' => ucfirst($objectType) . 'Entity',
            'entityCategoryClass' => $entityCategoryClass,
            'showRegistryLabels' => true
        ]);
    }

    /**
     * Adds list fields.
     */
    public function addListFields(FormBuilderInterface $builder, array $options = []): void
    {
        $listEntries = $this->listHelper->getEntries('page', 'workflowState');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('workflowState', ChoiceType::class, [
            'label' => $this->trans('State'),
            'attr' => [
                'class' => 'form-control-sm'
            ],
            'required' => false,
            'placeholder' => $this->trans('All'),
            'choices' => $choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false
        ]);
        $listEntries = $this->listHelper->getEntries('page', 'scope');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('scope', MultiListType::class, [
            'label' => $this->trans('Scope'),
            'attr' => [
                'class' => 'form-control-sm'
            ],
            'required' => false,
            'placeholder' => $this->trans('All'),
            'choices' => $choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => true,
            'expanded' => false
        ]);
    }

    /**
     * Adds a search field.
     */
    public function addSearchField(FormBuilderInterface $builder, array $options = []): void
    {
        $builder->add('q', SearchType::class, [
            'label' => $this->trans('Search'),
            'attr' => [
                'maxlength' => 255,
                'class' => 'form-control-sm'
            ],
            'required' => false
        ]);
    }


    /**
     * Adds sorting fields.
     */
    public function addSortingFields(FormBuilderInterface $builder, array $options = []): void
    {
        $builder
            ->add('sort', ChoiceType::class, [
                'label' => $this->trans('Sort by'),
                'attr' => [
                    'class' => 'form-control-sm'
                ],
                'choices' =>             [
                    $this->trans('Title') => 'title',
                    $this->trans('Views') => 'views',
                    $this->trans('Active') => 'active',
                    $this->trans('Active from') => 'activeFrom',
                    $this->trans('Active to') => 'activeTo',
                    $this->trans('In menu') => 'inMenu',
                    $this->trans('Optional string 1') => 'optionalString1',
                    $this->trans('Optional string 2') => 'optionalString2',
                    $this->trans('Current version') => 'currentVersion',
                    $this->trans('Creation date') => 'createdDate',
                    $this->trans('Creator') => 'createdBy',
                    $this->trans('Update date') => 'updatedDate',
                    $this->trans('Updater') => 'updatedBy'
                ],
                'required' => true,
                'expanded' => false
            ])
            ->add('sortdir', ChoiceType::class, [
                'label' => $this->trans('Sort direction'),
                'empty_data' => 'asc',
                'attr' => [
                    'class' => 'form-control-sm'
                ],
                'choices' => [
                    $this->trans('Ascending') => 'asc',
                    $this->trans('Descending') => 'desc'
                ],
                'required' => true,
                'expanded' => false
            ])
        ;
    }

    /**
     * Adds a page size field.
     */
    public function addAmountField(FormBuilderInterface $builder, array $options = []): void
    {
        $builder->add('num', ChoiceType::class, [
            'label' => $this->trans('Page size'),
            'empty_data' => 20,
            'attr' => [
                'class' => 'form-control-sm text-right'
            ],
            'choices' => [
                5 => 5,
                10 => 10,
                15 => 15,
                20 => 20,
                30 => 30,
                50 => 50,
                100 => 100
            ],
            'required' => false,
            'expanded' => false
        ]);
    }

    /**
     * Adds boolean fields.
     */
    public function addBooleanFields(FormBuilderInterface $builder, array $options = []): void
    {
        $builder->add('showTitle', ChoiceType::class, [
            'label' => $this->trans('Show title'),
            'attr' => [
                'class' => 'form-control-sm'
            ],
            'required' => false,
            'placeholder' => $this->trans('All'),
            'choices' => [
                $this->trans('No') => 'no',
                $this->trans('Yes') => 'yes'
            ]
        ]);
        $builder->add('skipHookSubscribers', ChoiceType::class, [
            'label' => $this->trans('Skip hook subscribers'),
            'attr' => [
                'class' => 'form-control-sm'
            ],
            'required' => false,
            'placeholder' => $this->trans('All'),
            'choices' => [
                $this->trans('No') => 'no',
                $this->trans('Yes') => 'yes'
            ]
        ]);
        $builder->add('active', ChoiceType::class, [
            'label' => $this->trans('Active'),
            'attr' => [
                'class' => 'form-control-sm'
            ],
            'required' => false,
            'placeholder' => $this->trans('All'),
            'choices' => [
                $this->trans('No') => 'no',
                $this->trans('Yes') => 'yes'
            ]
        ]);
        $builder->add('inMenu', ChoiceType::class, [
            'label' => $this->trans('In menu'),
            'attr' => [
                'class' => 'form-control-sm'
            ],
            'required' => false,
            'placeholder' => $this->trans('All'),
            'choices' => [
                $this->trans('No') => 'no',
                $this->trans('Yes') => 'yes'
            ]
        ]);
    }

    public function getBlockPrefix()
    {
        return 'zikulacontentmodule_pagequicknav';
    }

    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults([
            'csrf_protection' => false
        ]);
    }
}
