<?php

/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Zikula\ContentModule\ContentType\Form\Type;

use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\UrlType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Contracts\Translation\TranslatorInterface;
use Zikula\Common\Content\AbstractContentFormType;
use Zikula\Common\Content\ContentTypeInterface;

/**
 * Unfiltered raw form type class.
 */
class UnfilteredType extends AbstractContentFormType
{
    public function __construct(TranslatorInterface $translator)
    {
        $this->setTranslator($translator);
    }

    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $context = $options['context'] ?? ContentTypeInterface::CONTEXT_EDIT;
        $builder->add('text', TextareaType::class, [
            'label' => $this->trans('Unfiltered text') . ':',
            'required' => false
        ]);
        if (ContentTypeInterface::CONTEXT_EDIT === $context) {
            $builder
                ->add('useiframe', CheckboxType::class, [
                    'label' => $this->trans('Use an iframe instead of the text field') . ':',
                    'label_attr' => ['class' => 'switch-custom'],
                    'help' => $this->trans('If this setting is enabled the text field above will be ignored and iframe parameters will be used.'),
                    'required' => false
                ])
                ->add('iframeSrc', UrlType::class, [
                    'label' => $this->trans('iframe src') . ':',
                    'help' => $this->trans('the src parameter of the iframe'),
                    'required' => false,
                    'attr' => [
                        'maxlength' => 150
                    ]
                ])
            ;
        }
        $builder
            ->add('iframeName', TextType::class, [
                'label' => $this->trans('iframe name parameter') . ':',
                'required' => false,
                'attr' => [
                    'maxlength' => 150
                ]
            ])
            ->add('iframeTitle', TextType::class, [
                'label' => $this->trans('iframe title parameter') . ':',
                'required' => false,
                'attr' => [
                    'maxlength' => 150
                ]
            ])
        ;
        if (ContentTypeInterface::CONTEXT_EDIT === $context) {
            $builder
                ->add('iframeStyle', TextType::class, [
                    'label' => $this->trans('iframe style') . ':',
                    'help' => $this->trans('the style parameter of the iframe, e.g. "border:0"'),
                    'required' => false,
                    'attr' => [
                        'maxlength' => 150
                    ]
                ])
                ->add('iframeWidth', IntegerType::class, [
                    'label' => $this->trans('iframe width') . ':',
                    'input_group' => ['right' => $this->trans('pixels')],
                    'required' => false
                ])
                ->add('iframeHeight', IntegerType::class, [
                    'label' => $this->trans('iframe height') . ':',
                    'input_group' => ['right' => $this->trans('pixels')],
                    'required' => false
                ])
                ->add('iframeBorder', IntegerType::class, [
                    'label' => $this->trans('iframe border') . ':',
                    'required' => false
                ])
                ->add('iframeScrolling', TextType::class, [
                    'label' => $this->trans('iframe scrolling') . ':',
                    'help' => $this->trans('the scrolling parameter of the iframe, e.g. "no"'),
                    'required' => false,
                    'attr' => [
                        'maxlength' => 20
                    ]
                ])
                ->add('iframeAllowTransparancy', CheckboxType::class, [
                    'label' => $this->trans('Allow transparancy on the iframe') . ':',
                    'label_attr' => ['class' => 'switch-custom'],
                    'required' => false
                ])
            ;
        }
    }

    public function getBlockPrefix()
    {
        return 'zikulacontentmodule_contenttype_unfiltered';
    }
}
