<?php

/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Zikula\ContentModule\ContentType\Form\Type;

use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\NumberType;
use Symfony\Component\Form\Extension\Core\Type\RangeType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Contracts\Translation\TranslatorInterface;
use Zikula\Common\Content\AbstractContentFormType;
use Zikula\Common\Content\ContentTypeInterface;

/**
 * Google map form type class.
 */
class GoogleMapType extends AbstractContentFormType
{
    public function __construct(TranslatorInterface $translator)
    {
        $this->setTranslator($translator);
    }

    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $context = $options['context'] ?? ContentTypeInterface::CONTEXT_EDIT;
        if (ContentTypeInterface::CONTEXT_EDIT === $context) {
            $builder
                ->add('latitude', NumberType::class, [
                    'label' => $this->trans('Latitude') . ':',
                    'help' => $this->trans('A numeral that has a precision to 6 decimal places. For example, 40.714728.'),
                    'attr' => [
                        'maxlength' => 30
                    ]
                ])
                ->add('longitude', NumberType::class, [
                    'label' => $this->trans('Longitude') . ':',
                    'help' => $this->trans('A numeral that has a precision to 6 decimal places. For example, 40.714728.'),
                    'attr' => [
                        'maxlength' => 30
                    ]
                ])
                ->add('zoom', RangeType::class, [
                    'label' => $this->trans('Zoom level') . ':',
                    'help' => $this->trans('From 0 for the entire world to 21 for individual buildings.'),
                    'attr' => [
                        'min' => 0,
                        'max' => 21
                    ]
                ])
                ->add('mapType', ChoiceType::class, [
                    'label' => $this->trans('Map type') . ':',
                    'label_attr' => [
                        'class' => 'radio-inline'
                    ],
                    'choices' => [
                        $this->trans('Roadmap') => 'roadmap',
                        $this->trans('Satellite') => 'satellite',
                        $this->trans('Hybrid') => 'hybrid',
                        $this->trans('Terrain') => 'terrain'
                    ],
                    'expanded' => true
                ])
                ->add('height', IntegerType::class, [
                    'label' => $this->trans('Height of the displayed map') . ':',
                    'attr' => [
                        'maxlength' => 4
                    ],
                    'input_group' => ['right' => $this->trans('pixels')]
                ])
            ;
        }
        $builder
            ->add('text', TextType::class, [
                'label' => $this->trans('Description to be shown below the map') . ':',
                'attr' => [
                    'maxlength' => 255
                ]
            ])
            ->add('infoText', TextareaType::class, [
                'label' => $this->trans('Text to be shown in the popup window of the marker') . ':',
                'help' => $this->trans('Can contain HTML markup. Leave this field empty for disabling the popup window.'),
                'required' => false
            ])
        ;
        if (ContentTypeInterface::CONTEXT_EDIT === $context) {
            $builder
                ->add('trafficOverlay', CheckboxType::class, [
                    'label' => $this->trans('Display a traffic overlay') . ':',
                    'label_attr' => ['class' => 'switch-custom'],
                    'required' => false
                ])
                ->add('bicycleOverlay', CheckboxType::class, [
                    'label' => $this->trans('Display a bicycle overlay') . ':',
                    'label_attr' => ['class' => 'switch-custom'],
                    'required' => false
                ])
                ->add('streetViewControl', CheckboxType::class, [
                    'label' => $this->trans('Display the streetview control') . ':',
                    'label_attr' => ['class' => 'switch-custom'],
                    'required' => false
                ])
                ->add('directionsLink', CheckboxType::class, [
                    'label' => $this->trans('Display a link to directions to this location in Google Maps') . ':',
                    'label_attr' => ['class' => 'switch-custom'],
                    'required' => false
                ])
                ->add('directionsInline', CheckboxType::class, [
                    'label' => $this->trans('Display directions inline within the map') . ':',
                    'label_attr' => ['class' => 'switch-custom'],
                    'required' => false
                ])
            ;
        }
    }

    public function getBlockPrefix()
    {
        return 'zikulacontentmodule_contenttype_googlemap';
    }
}
