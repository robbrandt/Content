<?php

declare(strict_types=1);

/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @link https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

namespace Zikula\ContentModule\ContentType;

use Exception;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\HttpKernel\HttpKernelInterface;
use Zikula\Bundle\CoreBundle\HttpKernel\ZikulaHttpKernelInterface;
use Zikula\Common\Content\AbstractContentType;
use Zikula\Common\Content\ContentTypeInterface;
use Zikula\ContentModule\ContentType\Form\Type\ControllerType as FormType;

/**
 * Controller content type.
 */
class ControllerType extends AbstractContentType
{
    /**
     * @var ZikulaHttpKernelInterface
     */
    protected $kernel;

    /**
     * @var RequestStack
     */
    protected $requestStack;

    public function getCategory(): string
    {
        return ContentTypeInterface::CATEGORY_EXPERT;
    }

    public function getIcon(): string
    {
        return 'cog';
    }

    public function getTitle(): string
    {
        return $this->__('Controller');
    }

    public function getDescription(): string
    {
        return $this->__('Display controller output from any installed module, theme or bundle.');
    }

    public function getDefaultData(): array
    {
        return [
            'controller' => '',
            'query' => '',
            'request' => '',
            'attributes' => ''
        ];
    }

    public function displayView(): string
    {
        $this->fetchContent();

        return parent::displayView();
    }

    public function displayEditing(): string
    {
        $output = $this->displayView();

        if ('' === $this->data['content'] && '' !== $this->data['noDisplayMessage']) {
            return '<p class="alert alert-info">' . $this->data['noDisplayMessage'] . '</p>';
        }

        $quickAction = '<a href="javascript:void(0);" title="' . $this->translator->__('Preview controller content') . '" onclick="jQuery(this).parent().next(\'.hidden\').removeClass(\'hidden\'); jQuery(this).remove();"><i class="fa fa-2x fa-eye"></i></a>';
        $editOutput = '<h3>' . $this->data['controller'] . '</h3>';
        if ($this->data['query']) {
            $editOutput .= '<p>' . $this->translator->__('GET parameters') . ': <em>' . $this->data['query'] . '</em></p>';
        }
        if ($this->data['request']) {
            $editOutput .= '<p>' . $this->translator->__('POST parameters') . ': <em>' . $this->data['request'] . '</em></p>';
        }
        if ($this->data['attributes']) {
            $editOutput .= '<p>' . $this->translator->__('Request attributes') . ': <em>' . $this->data['attributes'] . '</em></p>';
        }
        $editOutput .= '<p>' . $quickAction . '</p>';
        $editOutput .= '<div class="hidden">' . $output . '</div>';

        return $editOutput;
    }

    /**
     * Retrieves output information.
     */
    protected function fetchContent(): void
    {
        $this->data['content'] = '';
        $this->data['noDisplayMessage'] = '';

        $controller = $this->data['controller'];
        if (!$controller) {
            return;
        }

        list($bundleName) = explode(':', $controller);
        if (!$this->kernel->isBundle($bundleName)) {
            $this->data['noDisplayMessage'] = $this->translator->__f('Module %module is not available.', ['%module' => $bundleName]);
            return;
        }
        $moduleInstance = $this->kernel->getModule($bundleName);
        if (!isset($moduleInstance)) {
            $this->data['noDisplayMessage'] = $this->translator->__f('Module %module is not available.', ['%module' => $bundleName]);
            return;
        }

        try {
            $this->data['content'] = $this->callController();
        } catch (Exception $exception) {
            $this->data['content'] = '<p class="alert alert-danger">' . $exception->getMessage() . '</p>';
        }
    }

    /**
     * Calls the controller.
     */
    protected function callController(): string
    {
        static $recursionLevel = 0;
        if (4 < $recursionLevel) {
            return $this->translator->__('Maximum number of pages-in-pages reached! You probably included this page in itself.');
        }

        $controller = $this->data['controller'];
        list($bundleName) = explode(':', $controller);

        parse_str($this->data['query'], $query);
        parse_str($this->data['request'], $request);
        parse_str($this->data['attributes'], $attributes);
        $attributes['_controller'] = $controller;
        $subRequest = $this->requestStack->getMasterRequest()->duplicate($query, $request, $attributes);
        $subRequest->attributes->set('_zkModule', $bundleName);

        ++$recursionLevel;

        return $this->kernel
            ->handle($subRequest, HttpKernelInterface::SUB_REQUEST)
            ->getContent();
    }

    public function getEditFormClass(): string
    {
        return FormType::class;
    }

    /**
     * @required
     */
    public function setAdditionalDepencies(
        ZikulaHttpKernelInterface $kernel,
        RequestStack $requestStack
    ): void {
        $this->kernel = $kernel;
        $this->requestStack = $requestStack;
    }
}
