<?php

declare(strict_types=1);

/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @link https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

namespace Zikula\ContentModule\ContentType;

use Symfony\Component\HttpFoundation\RequestStack;
use Zikula\Common\Content\AbstractContentType;
use Zikula\Common\Content\ContentTypeInterface;
use Zikula\ContentModule\ContentType\Form\Type\GoogleMapType as FormType;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;

/**
 * Google map content type.
 */
class GoogleMapType extends AbstractContentType
{
    /**
     * @var RequestStack
     */
    protected $requestStack;

    /**
     * @var string
     */
    protected $googleMapsApiKey;

    public function getCategory(): string
    {
        return ContentTypeInterface::CATEGORY_EXTERNAL;
    }

    public function getIcon(): string
    {
        return 'map-marker';
    }

    public function getTitle(): string
    {
        return $this->__('Google map');
    }

    public function getDescription(): string
    {
        return $this->__('Display a Google map position.');
    }

    public function getAdminInfo(): string
    {
        return $this->__('You need to specify a Google Maps API key in the configuration form in order to activate this plugin.');
    }

    public function isActive(): bool
    {
        // Only active when the API key is available
        return '' !== $this->googleMapsApiKey && parent::isActive();
    }

    public function getDefaultData(): array
    {
        return [
            'latitude' => '55.8756960390043',
            'longitude' => '12.36185073852539',
            'zoom' => 5,
            'mapType' => 'roadmap',
            'height' => 400,
            'text' => '',
            'infoText' => '',
            'trafficOverlay' => false,
            'bicycleOverlay' => false,
            'streetViewControl' => false,
            'directionsLink' => false,
            'directionsInline' => false
        ];
    }

    public function getTranslatableDataFields(): array
    {
        return ['text', 'infoText'];
    }

    public function getSearchableText(): string
    {
        return html_entity_decode(strip_tags($this->data['text']));
    }

    public function getEditFormClass(): string
    {
        return FormType::class;
    }

    public function getAssets(string $context): array
    {
        $request = $this->requestStack->getMasterRequest();
        $locale = null !== $request ? $request->getLocale() : 'en';

        $assets = parent::getAssets($context);

        if (ContentTypeInterface::CONTEXT_VIEW === $context) {
            $assets['js'][] = $this->assetHelper->resolve('@ZikulaContentModule:js/ZikulaContentModule.ContentType.GoogleMap.js');
        }
        if (ContentTypeInterface::CONTEXT_EDIT === $context) {
            $assets['js'][] = $this->assetHelper->resolve('@ZikulaContentModule:js/ZikulaContentModule.ContentType.GoogleEdit.js');
        }

        $googleMapsScript = 'https://maps.google.com/maps/api/js?v=3&key=' . $this->googleMapsApiKey . '&language=' . $locale;
        if (ContentTypeInterface::CONTEXT_VIEW === $context) {
            $googleMapsScript .= '&callback=contentInitGoogleMapDisplay';
        }
        if (ContentTypeInterface::CONTEXT_EDIT === $context) {
            $googleMapsScript .= '&callback=contentInitGoogleMapEdit';
        }
        $assets['js'][] = $googleMapsScript;

        return $assets;
    }

    public function getJsEntrypoint(string $context): ?string
    {
        /*if (ContentTypeInterface::CONTEXT_VIEW === $context) {
            return 'contentInitGoogleMapDisplay';
        }*/
        if (ContentTypeInterface::CONTEXT_EDIT === $context) {
            return 'contentInitGoogleMapEdit';
        }

        return null;
    }

    /**
     * @required
     */
    public function setAdditionalDepencies(
        RequestStack $requestStack,
        VariableApiInterface $variableApi
    ): void {
        $this->requestStack = $requestStack;
        $this->googleMapsApiKey = $variableApi->get('ZikulaContentModule', 'googleMapsApiKey', '');
    }
}
