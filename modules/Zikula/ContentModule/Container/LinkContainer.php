<?php

/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Zikula\ContentModule\Container;

use Zikula\ContentModule\Container\Base\AbstractLinkContainer;
use Zikula\Core\LinkContainer\LinkContainerInterface;

/**
 * This is the link container service implementation class.
 */
class LinkContainer extends AbstractLinkContainer
{
    public function getLinks(string $type = LinkContainerInterface::TYPE_ADMIN): array
    {
        $links = parent::getLinks($type);
        $hasAddPermissions = $this->permissionHelper->hasComponentPermission('page', ACCESS_ADD);

        $routeArea = LinkContainerInterface::TYPE_ADMIN === $type ? 'admin' : '';

        $addNewPageLink = [
            'url' => $this->router->generate('zikulacontentmodule_page_' . $routeArea . 'edit'),
            'text' => $this->trans('Add a new page', [], 'zikulacontentmodule'),
            'title' => $this->trans('Add a new page', [], 'zikulacontentmodule'),
            'icon' => 'plus-square fa-fw'
        ];

        if (LinkContainerInterface::TYPE_ACCOUNT === $type) {
            foreach ($links as $k => $v) {
                if ('list-alt' === $v['icon']) {
                    $links[$k]['icon'] = 'book';
                }
            }
            if ($hasAddPermissions) {
                if ($this->permissionHelper->hasPermission(ACCESS_ADMIN)) {
                    if (true === $this->variableApi->get('ZikulaContentModule', 'linkOwnPagesOnAccountPage', true)) {
                        // add link between the two existing ones
                        $links = [
                            $links[0],
                            $addNewPageLink,
                            $links[1]
                        ];
                    } else {
                        $links[] = $addNewPageLink;
                    }
                } else {
                    $links[] = $addNewPageLink;
                }
            }
        } elseif (in_array($type, [LinkContainerInterface::TYPE_ADMIN, LinkContainerInterface::TYPE_USER], true)) {
            $pagesSubLinks = [];

            if ('admin' === $routeArea) {
                if ($hasAddPermissions) {
                    $pagesSubLinks[] = $addNewPageLink;
                }
                $routeName = 'zikulacontentmodule_page_' . $routeArea . 'view';
                $pagesSubLinks[] = [
                    'url' => $this->router->generate($routeName),
                    'text' => $this->trans('Tabular view', [], 'zikulacontentmodule'),
                    'title' => $this->trans('Shows the pages table', [], 'zikulacontentmodule'),
                    'icon' => 'table fa-fw'
                ];
                $pagesSubLinks[] = [
                    'url' => $this->router->generate($routeName, ['tpl' => 'tree']),
                    'text' => $this->trans('Hierarchy view', [], 'zikulacontentmodule'),
                    'title' => $this->trans('Shows the pages tree', [], 'zikulacontentmodule'),
                    'icon' => 'code-branch fa-fw'
                ];
            } else {
                $pagesSubLinks[] = [
                    'url' => $this->router->generate('zikulacontentmodule_page_sitemap'),
                    'text' => $this->trans('Sitemap', [], 'zikulacontentmodule'),
                    'title' => $this->trans('Sitemap', [], 'zikulacontentmodule'),
                    'icon' => 'sitemap fa-fw'
                ];
                if ($hasAddPermissions) {
                    $pagesSubLinks[] = $addNewPageLink;
                }
                $pagesSubLinks[] = [
                    'url' => $this->router->generate('zikulacontentmodule_page_view'),
                    'text' => $this->trans('Simple list', [], 'zikulacontentmodule'),
                    'title' => $this->trans('Shows a simple list of pages', [], 'zikulacontentmodule'),
                    'icon' => 'table fa-fw'
                ];
                $pagesSubLinks[] = [
                    'url' => $this->router->generate('zikulacontentmodule_page_view', ['list' => 'extended']),
                    'text' => $this->trans('Extended list', [], 'zikulacontentmodule'),
                    'title' => $this->trans(
                        'Shows an extended list of pages with first content elements',
                        [],
                        'zikulacontentmodule'
                    ),
                    'icon' => 'list fa-fw'
                ];
                $pagesSubLinks[] = [
                    'url' => $this->router->generate('zikulacontentmodule_page_view', ['list' => 'complete']),
                    'text' => $this->trans('Complete list', [], 'zikulacontentmodule'),
                    'title' => $this->trans(
                        'Shows a complete list of pages with complete content',
                        [],
                        'zikulacontentmodule'
                    ),
                    'icon' => 'th-large fa-fw'
                ];
                $pagesSubLinks[] = [
                    'url' => $this->router->generate('zikulacontentmodule_page_view', ['list' => 'categories']),
                    'text' => $this->trans('Categories list', [], 'zikulacontentmodule'),
                    'title' => $this->trans('Shows content grouped by categories', [], 'zikulacontentmodule'),
                    'icon' => 'archive fa-fw'
                ];
            }

            foreach ($links as $k => $v) {
                if ($this->trans('Pages', [], 'zikulacontentmodule') === $v['text']) {
                    $links[$k]['icon'] = 'book';
                    $links[$k]['links'] = $pagesSubLinks;
                }
            }
        }

        return $links;
    }
}
