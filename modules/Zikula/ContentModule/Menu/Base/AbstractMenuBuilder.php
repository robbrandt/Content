<?php

/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Zikula\ContentModule\Menu\Base;

use Knp\Menu\FactoryInterface;
use Knp\Menu\ItemInterface;
use Symfony\Component\EventDispatcher\EventDispatcherInterface;
use Symfony\Component\EventDispatcher\LegacyEventDispatcherProxy;
use Symfony\Component\HttpFoundation\RequestStack;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;
use Zikula\UsersModule\Constant as UsersConstant;
use Zikula\ContentModule\Entity\PageEntity;
use Zikula\ContentModule\Entity\ContentItemEntity;
use Zikula\ContentModule\ContentEvents;
use Zikula\ContentModule\Event\ConfigureItemActionsMenuEvent;
use Zikula\ContentModule\Helper\EntityDisplayHelper;
use Zikula\ContentModule\Helper\LoggableHelper;
use Zikula\ContentModule\Helper\PermissionHelper;
use Zikula\UsersModule\Api\ApiInterface\CurrentUserApiInterface;

/**
 * Menu builder base class.
 */
class AbstractMenuBuilder
{
    use TranslatorTrait;

    /**
     * @var FactoryInterface
     */
    protected $factory;

    /**
     * @var EventDispatcherInterface
     */
    protected $eventDispatcher;

    /**
     * @var RequestStack
     */
    protected $requestStack;

    /**
     * @var PermissionHelper
     */
    protected $permissionHelper;

    /**
     * @var EntityDisplayHelper
     */
    protected $entityDisplayHelper;

    /**
     * @var LoggableHelper
     */
    protected $loggableHelper;

    /**
     * @var CurrentUserApiInterface
     */
    protected $currentUserApi;

    public function __construct(
        TranslatorInterface $translator,
        FactoryInterface $factory,
        EventDispatcherInterface $eventDispatcher,
        RequestStack $requestStack,
        PermissionHelper $permissionHelper,
        EntityDisplayHelper $entityDisplayHelper,
        LoggableHelper $loggableHelper,
        CurrentUserApiInterface $currentUserApi
    ) {
        $this->setTranslator($translator);
        $this->factory = $factory;
        $this->eventDispatcher = LegacyEventDispatcherProxy::decorate($eventDispatcher);
        $this->requestStack = $requestStack;
        $this->permissionHelper = $permissionHelper;
        $this->entityDisplayHelper = $entityDisplayHelper;
        $this->loggableHelper = $loggableHelper;
        $this->currentUserApi = $currentUserApi;
    }

    public function setTranslator(TranslatorInterface $translator): void
    {
        $this->translator = $translator;
    }

    /**
     * Builds the item actions menu.
     */
    public function createItemActionsMenu(array $options = []): ItemInterface
    {
        $menu = $this->factory->createItem('itemActions');
        if (!isset($options['entity'], $options['area'], $options['context'])) {
            return $menu;
        }

        $entity = $options['entity'];
        $routeArea = $options['area'];
        $context = $options['context'];

        // return empty menu for preview of deleted items
        $routeName = $this->requestStack->getMasterRequest()->get('_route');
        if (false !== stripos($routeName, 'displaydeleted')) {
            return $menu;
        }
        $menu->setChildrenAttribute('class', 'list-inline item-actions');

        $this->eventDispatcher->dispatch(
            new ConfigureItemActionsMenuEvent($this->factory, $menu, $options),
            ContentEvents::MENU_ITEMACTIONS_PRE_CONFIGURE
        );

        $currentUserId = $this->currentUserApi->isLoggedIn()
            ? $this->currentUserApi->get('uid')
            : UsersConstant::USER_ID_ANONYMOUS
        ;
        if ($entity instanceof PageEntity) {
            $routePrefix = 'zikulacontentmodule_page_';
            $isOwner = 0 < $currentUserId
                && null !== $entity->getCreatedBy()
                && $currentUserId === $entity->getCreatedBy()->getUid()
            ;
        
            if ('admin' === $routeArea) {
                $title = $this->__('Preview', 'zikulacontentmodule');
                $previewRouteParameters = $entity->createUrlArgs();
                $previewRouteParameters['preview'] = 1;
                $menu->addChild($title, [
                    'route' => $routePrefix . 'display',
                    'routeParameters' => $previewRouteParameters
                ]);
                $menu[$title]->setLinkAttribute('target', '_blank');
                $menu[$title]->setLinkAttribute('title',
                    $this->__('Open preview page', 'zikulacontentmodule')
                );
                if ('display' === $context) {
                    $menu[$title]->setLinkAttribute('class', 'btn btn-sm btn-default');
                }
                $menu[$title]->setAttribute('icon', 'fa fa-search-plus');
            }
            if ('display' !== $context) {
                $title = $this->__('Details', 'zikulacontentmodule');
                $menu->addChild($title, [
                    'route' => $routePrefix . $routeArea . 'display',
                    'routeParameters' => $entity->createUrlArgs()
                ]);
                $entityTitle = $this->entityDisplayHelper->getFormattedTitle($entity);
                $menu[$title]->setLinkAttribute('title',
                    str_replace('"', '', $entityTitle)
                );
                if ('display' === $context) {
                    $menu[$title]->setLinkAttribute('class', 'btn btn-sm btn-default');
                }
                $menu[$title]->setAttribute('icon', 'fa fa-eye');
            }
            if ($this->permissionHelper->mayEdit($entity)) {
                // only allow editing for the owner or people with higher permissions
                if ($isOwner || $this->permissionHelper->hasEntityPermission($entity, ACCESS_ADD)) {
                    $title = $this->__('Edit', 'zikulacontentmodule');
                    $menu->addChild($title, [
                        'route' => $routePrefix . $routeArea . 'edit',
                        'routeParameters' => $entity->createUrlArgs(true)
                    ]);
                    $menu[$title]->setLinkAttribute('title',
                        $this->__('Edit this page', 'zikulacontentmodule')
                    );
                    if ('display' === $context) {
                        $menu[$title]->setLinkAttribute('class', 'btn btn-sm btn-default');
                    }
                    $menu[$title]->setAttribute('icon', 'fa fa-pencil-square-o');
                    $title = $this->__('Reuse', 'zikulacontentmodule');
                    $menu->addChild($title, [
                        'route' => $routePrefix . $routeArea . 'edit',
                        'routeParameters' => ['astemplate' => $entity->getKey()]
                    ]);
                    $menu[$title]->setLinkAttribute('title',
                        $this->__('Reuse for new page', 'zikulacontentmodule')
                    );
                    if ('display' === $context) {
                        $menu[$title]->setLinkAttribute('class', 'btn btn-sm btn-default');
                    }
                    $menu[$title]->setAttribute('icon', 'fa fa-files-o');
                    if ($this->permissionHelper->hasEntityPermission($entity, ACCESS_ADD)) {
                        $title = $this->__('Add sub page', 'zikulacontentmodule');
                        $menu->addChild($title, [
                            'route' => $routePrefix . $routeArea . 'edit',
                            'routeParameters' => ['parent' => $entity->getKey()]
                        ]);
                        $menu[$title]->setLinkAttribute('title',
                            $this->__('Add a sub page to this page', 'zikulacontentmodule')
                        );
                        if ('display' === $context) {
                            $menu[$title]->setLinkAttribute('class', 'btn btn-sm btn-default');
                        }
                        $menu[$title]->setAttribute('icon', 'fa fa-child');
                    }
                }
            }
            if ($this->permissionHelper->mayAccessHistory($entity)) {
                if (in_array($context, ['view', 'display']) && $this->loggableHelper->hasHistoryItems($entity)) {
                    $title = $this->__('History', 'zikulacontentmodule');
                    $menu->addChild($title, [
                        'route' => $routePrefix . $routeArea . 'loggablehistory',
                        'routeParameters' => $entity->createUrlArgs()
                    ]);
                    $menu[$title]->setLinkAttribute('title',
                        $this->__('Watch version history', 'zikulacontentmodule')
                    );
                    if ('display' === $context) {
                        $menu[$title]->setLinkAttribute('class', 'btn btn-sm btn-default');
                    }
                    $menu[$title]->setAttribute('icon', 'fa fa-history');
                }
            }
            if ('display' === $context) {
                $title = $this->__('Pages list', 'zikulacontentmodule');
                $menu->addChild($title, [
                    'route' => $routePrefix . $routeArea . 'view'
                ]);
                $menu[$title]->setLinkAttribute('title', $title);
                if ('display' === $context) {
                    $menu[$title]->setLinkAttribute('class', 'btn btn-sm btn-default');
                }
                $menu[$title]->setAttribute('icon', 'fa fa-reply');
            }
        }
        if ($entity instanceof ContentItemEntity) {
            $routePrefix = 'zikulacontentmodule_contentitem_';
            $isOwner = 0 < $currentUserId
                && null !== $entity->getCreatedBy()
                && $currentUserId === $entity->getCreatedBy()->getUid()
            ;
        
        }

        $this->eventDispatcher->dispatch(
            new ConfigureItemActionsMenuEvent($this->factory, $menu, $options),
            ContentEvents::MENU_ITEMACTIONS_POST_CONFIGURE
        );

        return $menu;
    }
}
