<?php

declare(strict_types=1);

/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @link https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

namespace Zikula\ContentModule\Helper;

use Zikula\ContentModule\Entity\Repository\PageTranslationRepository;
use Zikula\ContentModule\Helper\Base\AbstractModelHelper;
use Zikula\ContentModule\Entity\PageTranslationEntity;
use Zikula\ContentModule\Entity\ContentItemTranslationEntity;

/**
 * Helper implementation class for model layer methods.
 */
class ModelHelper extends AbstractModelHelper
{
    public function resolveSortParameter(string $objectType = '', string $sorting = 'default'): string
    {
        if ('page' === $objectType && 'views' === $sorting) {
            return 'views DESC';
        }

        return parent::resolveSortParameter($objectType, $sorting);
    }

    /**
     * Duplicates all translations of a given page.
     */
    public function clonePageTranslations(int $oldPageId, int $newPageId, string $titleSuffix): void
    {
        $entityManager = $this->entityFactory->getEntityManager();
        /** @var PageTranslationRepository $translationRepository */
        $translationRepository = $entityManager->getRepository(PageTranslationEntity::class);

        // first remove translations which were cloned above
        $translations = $translationRepository->findBy(['foreignKey' => $newPageId]);
        foreach ($translations as $translation) {
            $entityManager->remove($translation);
        }
        $entityManager->flush();

        // second clone all translations
        $translations = $translationRepository->findBy(['foreignKey' => $oldPageId]);
        /** @var PageTranslationEntity $translation */
        foreach ($translations as $translation) {
            $newTranslation = clone $translation;
            $newTranslation->setForeignKey($newPageId);
            if ('title' === $newTranslation->getField()) {
                $newTranslation->setContent($newTranslation->getContent() . $titleSuffix);
            } elseif ('slug' === $newTranslation->getField()) {
                $newTranslation->setContent($newTranslation->getContent() . str_replace(' ', '-', $titleSuffix));
            }
            $entityManager->persist($newTranslation);
        }
        $entityManager->flush();
    }

    /**
     * Duplicates all translations of a given content item.
     */
    public function cloneContentTranslations(int $oldItemId, int $newItemId): void
    {
        $entityManager = $this->entityFactory->getEntityManager();
        $translationRepository = $entityManager->getRepository(ContentItemTranslationEntity::class);

        // first remove translations which were cloned above
        $translations = $translationRepository->findBy(['foreignKey' => $newItemId]);
        foreach ($translations as $translation) {
            $entityManager->remove($translation);
        }
        $entityManager->flush();

        // second clone all translations
        $translations = $translationRepository->findBy(['foreignKey' => $oldItemId]);
        foreach ($translations as $translation) {
            $newTranslation = clone $translation;
            $newTranslation->setForeignKey($newItemId);
            $entityManager->persist($newTranslation);
        }
        $entityManager->flush();
    }
}
