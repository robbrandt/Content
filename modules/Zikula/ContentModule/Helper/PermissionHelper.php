<?php

/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Zikula\ContentModule\Helper;

use Zikula\Bundle\CoreBundle\Doctrine\EntityAccess;
use Zikula\ContentModule\Entity\PageEntity;
use Zikula\ContentModule\Helper\Base\AbstractPermissionHelper;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;
use Zikula\GroupsModule\Constant as GroupsConstant;
use Zikula\GroupsModule\Entity\GroupEntity;

/**
 * Permission helper implementation class.
 */
class PermissionHelper extends AbstractPermissionHelper
{
    /**
     * @var bool
     */
    protected $inheritPermissions;

    public function hasEntityPermission(EntityAccess $entity, int $permissionLevel, int $userId = null): bool
    {
        $result = parent::hasEntityPermission($entity, $permissionLevel, $userId);

        $objectType = $entity->get_objectType();

        if (ACCESS_READ === $permissionLevel) {
            if ('page' === $objectType && 'approved' !== $entity->getWorkflowState()) {
                if ($this->currentUserApi->get('uid') !== $entity->getCreatedBy()->getUid()) {
                    return false;
                }
            }

            $scopes = $this->extractMultiList($entity->getScope());
            $userScopes = $this->getUserScopes();
            if (in_array(GroupsConstant::GROUP_ID_ADMIN, $userScopes, true)) {
                // always let admin access
                return true;
            }
            $hasScope = false;
            foreach ($scopes as $scope) {
                if (in_array($scope, $userScopes, true)) {
                    $hasScope = true;
                    break;
                }
            }
            $result = $hasScope;
        }

        if ('page' !== $objectType) {
            return $result;
        }

        if (!$this->inheritPermissions) {
            return $result;
        }

        if ($result) {
            return true;
        }

        if (null !== $entity->getParent()) {
            return $this->hasEntityPermission($entity->getParent(), $permissionLevel, $userId);
        }

        return false;
    }

    /**
     * Checks if the content type with the given name may be read.
     */
    public function mayManagePageContent(PageEntity $entity, int $userId = null): bool
    {
        $component = 'ZikulaContentModule:PageContent:';
        $instance = $entity->getKey() . '::';

        return $this->permissionApi->hasPermission($component, $instance, ACCESS_EDIT, $userId);
    }

    /**
     * Checks if the content type with the given name may be read.
     */
    public function mayReadContentType(string $name, int $userId = null): bool
    {
        $component = 'ZikulaContentModule:Plugin:Content';
        $instance = $name . '::';

        return $this->permissionApi->hasPermission($component, $instance, ACCESS_READ, $userId);
    }

    /**
     * @required
     */
    public function setInheritPermissions(VariableApiInterface $variableApi): void
    {
        $this->inheritPermissions = (bool)$variableApi->get('ZikulaContentModule', 'inheritPermissions');
    }

    /**
     * Returns the allowed content item scopes for the current user.
     */
    public function getUserScopes(): array
    {
        $scopes = [];
        $scopes[] = '0'; // public (all)

        $isLoggedIn = $this->currentUserApi->isLoggedIn();
        if ($isLoggedIn) {
            $scopes[] = '-1'; // logged in members
        } else {
            $scopes[] = '-2'; // not logged in people
        }

        // get user groups
        $groups = $this->currentUserApi->get('groups');
        /** @var GroupEntity $group */
        foreach ($groups as $group) {
            $scopes[] = (string)$group->getGid();
        }

        return $scopes;
    }

    /**
     * Extract concatenated multi selection.
     */
    public function extractMultiList(string $value): array
    {
        $listValues = explode('###', $value);
        $amountOfValues = count($listValues);
        if (1 < $amountOfValues && '' === $listValues[$amountOfValues - 1]) {
            unset($listValues[$amountOfValues - 1]);
        }
        if ('' === $listValues[0]) {
            // use array_shift instead of unset for proper key reindexing
            // keys must start with 0, otherwise the dropdownlist form plugin gets confused
            array_shift($listValues);
        }
    
        return $listValues;
    }
}
