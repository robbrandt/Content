<?php

/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Zikula\ContentModule\Helper;

use Exception;
use Symfony\Component\Routing\RouterInterface;
use Zikula\CategoriesModule\Entity\CategoryEntity;
use Zikula\ContentModule\Entity\PageEntity;
use Zikula\ContentModule\Entity\PageCategoryEntity;
use Zikula\ContentModule\Entity\ContentItemEntity;
use Zikula\ContentModule\Helper\Base\AbstractExampleDataHelper;

/**
 * Example data helper implementation class.
 */
class ExampleDataHelper extends AbstractExampleDataHelper
{
    /**
     * @var RouterInterface
     */
    protected $router;

    /**
     * @var ContentDisplayHelper
     */
    protected $displayHelper;

    public function createDefaultData(): void
    {
        $entityManager = $this->entityFactory->getEntityManager();
        // example category
        $categoryId = 41; // Business and work
        /** @var CategoryEntity $category */
        $category = $entityManager->find('ZikulaCategoriesModule:CategoryEntity', $categoryId);

        // determine category registry identifiers
        $registryRepository = $entityManager->getRepository('ZikulaCategoriesModule:CategoryRegistryEntity');
        $categoryRegistries = $registryRepository->findBy(['modname' => 'ZikulaContentModule']);
        $categoryRegistry = null;
        foreach ($categoryRegistries as $registry) {
            if ('PageEntity' === $registry->getEntityname()) {
                $categoryRegistry = $registry;
                break;
            }
        }

        $contentTypeNamespace = 'Zikula\\ContentModule\\ContentType\\';
        $itemHeightEditing = 3;

        $mainPage = new PageEntity();
        $mainPage->setTitle($this->translator->trans('Pages'));
        $mainPage->setLayout([]);
        $mainPage->setActive(true);
        $mainPage->setInMenu(true);
        $mainPage->setParent(null);
        $mainPage->setRoot(1);

        $mainContentInfo = [];
        $item = new ContentItemEntity();
        $item->setOwningType($contentTypeNamespace . 'HeadingType');
        $item->setContentData([
            'text' => $this->translator->trans(
                'This is only a dummy page containing the real pages',
                [],
                'exampledata'
            ),
            'headingType' => 'h3'
        ]);
        $mainContentInfo[] = [$item, 'header', ['x' => 0, 'y' => 0, 'width' => 12, 'minWidth' => 2]];

        $page = new PageEntity();
        $page->setTitle($this->translator->trans('Content introduction page', [], 'exampledata'));
        $page->setLayout([]);
        $page->setActive(true);
        $page->setInMenu(true);
        $page->setParent($mainPage);
        $page->setRoot(1);
        $page->getCategories()->add(new PageCategoryEntity($categoryRegistry->getId(), $category, $page));

        $contentInfo = [];

        $item = new ContentItemEntity();
        $item->setOwningType($contentTypeNamespace . 'HeadingType');
        $item->setContentData([
            'text' => $this->translator->trans(
                'A content page consists of various content items in a chosen Bootstrap grid',
                [],
                'exampledata'
            ),
            'headingType' => 'h3'
        ]);
        $contentType = $this->displayHelper->initContentType($item);
        $item->setSearchText($contentType->getSearchableText());
        $item->setAdditionalSearchText(
            $this->translator->trans(
                'Content pages may arrange content items using Bootstrap layout.',
                [],
                'exampledata'
            )
        );
        $contentInfo[] = [$item, 'header', ['x' => 0, 'y' => 0, 'width' => 12, 'minWidth' => 2]];

        $item = new ContentItemEntity();
        $item->setOwningType($contentTypeNamespace . 'HtmlType');
        $item->setContentData([
            'text' => $this->translator->trans(
                '<p>Each created page can arrange their content elements using arbitrary grid layouts. Each page may contains various layout sections. In each section you can place one or more content items of various kinds like:</p> <ul> <li>HTML text;</li> <li>YouTube videos;</li> <li>Google maps;</li> <li>Quotes;</li> <li>Atom or RSS feeds;</li> <li>Computer code;</li> <li>Zikula blocks;</li> <li>the output of another Zikula module or Symfony bundle.</li> </ul> <p>Within these layout sections you can sort the content items by means of drag & drop.<br /> You can make an unlimited number of pages and structure them hierarchical. Your page structure can be displayed in a multi level menu in your website.</p>',
                [],
                'exampledata'
            )
        ]);
        $contentType = $this->displayHelper->initContentType($item);
        $item->setSearchText($contentType->getSearchableText());
        $item->setAdditionalSearchText(
            $this->translator->trans(
                'Content pages may contain many different types of content items.',
                [],
                'exampledata'
            )
        );
        $contentInfo[] = [$item, 'mid', ['x' => 0, 'y' => 0, 'width' => 8, 'minWidth' => 2]];

        $item = new ContentItemEntity();
        $item->setOwningType($contentTypeNamespace . 'QuoteType');
        $item->setContentData([
            'text' => $this->translator->trans(
                'Zikula allows you to build simple one-page websites to individual web applications.',
                [],
                'exampledata'
            ),
            'source' => $this->translator->trans('https://ziku.la/en/', [], 'exampledata'),
            'description' => $this->translator->trans('Zikula homepage', [], 'exampledata')
        ]);
        $contentType = $this->displayHelper->initContentType($item);
        $item->setSearchText($contentType->getSearchableText());
        $item->setAdditionalSearchText(
            $this->translator->trans(
                'Zikula and Content provide powerful tools for creating websites and web applications.',
                [],
                'exampledata'
            )
        );
        $contentInfo[] = [$item, 'mid', ['x' => 8, 'y' => 0, 'width' => 4, 'minWidth' => 2]];

        $item = new ContentItemEntity();
        $item->setOwningType($contentTypeNamespace . 'HtmlType');
        $item->setContentData([
            'text' => $this->translator->trans(
                '<p><strong>This is a second HTML text content item in the left column.</strong><br />Content is an extendable module. You can create your own content plugins and other Zikula modules can also offer additional content items. For example a calendar module may provide a Content plugin for a list of the latest events.</p>',
                [],
                'exampledata'
            )
        ]);
        $contentType = $this->displayHelper->initContentType($item);
        $item->setSearchText($contentType->getSearchableText());
        $item->setAdditionalSearchText(
            $this->translator->trans(
                'Content can be extended by other modules which can contribute additional content types.',
                [],
                'exampledata'
            )
        );
        $contentInfo[] = [$item, 'mid', ['x' => 0, 'y' => $itemHeightEditing, 'width' => 8, 'minWidth' => 2]];

        $item = new ContentItemEntity();
        $item->setOwningType($contentTypeNamespace . 'ComputerCodeType');
        $item->setContentData([
            'text' => $this->translator->trans(
                '$this->doAction($var); // just some code',
                [],
                'exampledata'
            ),
            'codeFilter' => 'native'
        ]);
        $contentType = $this->displayHelper->initContentType($item);
        $item->setSearchText($contentType->getSearchableText());
        $contentInfo[] = [$item, 'mid', ['x' => 8, 'y' => $itemHeightEditing, 'width' => 4, 'minWidth' => 2]];

        $item = new ContentItemEntity();
        $item->setOwningType($contentTypeNamespace . 'HtmlType');
        $item->setContentData([
            'text' => $this->translator->trans(
                '<p>So you see that you can place all kinds of content on the page in your own style and liking. This makes Content a really powerful module.</p><p>It also features additional functionality, like translating content and tracking changes between different versions.</p>',
                [],
                'exampledata'
            )
        ]);
        $contentType = $this->displayHelper->initContentType($item);
        $item->setSearchText($contentType->getSearchableText());
        $item->setAdditionalSearchText(
            $this->translator->trans(
                'Content also offers functionality for versioning and managing translations.',
                [],
                'exampledata'
            )
        );
        $contentInfo[] = [$item, 'mid', ['x' => 8, 'y' => 2 * $itemHeightEditing, 'width' => 4, 'minWidth' => 2]];

        $item = new ContentItemEntity();
        $item->setOwningType($contentTypeNamespace . 'HtmlType');
        $adminPageListUrl = $this->router->generate('zikulacontentmodule_page_adminview');
        $adminSettingsUrl = $this->router->generate('zikulacontentmodule_config_config');
        $item->setContentData([
            'text' => $this->translator->transf(
                'This <strong>footer</strong> finishes this introduction page. And now, please enjoy using Content. The <a href="%adminPageListUrl%">Page list</a> interface lets you edit or delete this introduction page. In the <a href="%adminSettingsUrl%">administration settings</a> you can further control the Content module.',
                [
                    '%adminPageListUrl%' => $adminPageListUrl,
                    '%adminSettingsUrl%' => $adminSettingsUrl
                ],
                [],
                'exampledata'
            )
        ]);
        $contentType = $this->displayHelper->initContentType($item);
        $item->setSearchText($contentType->getSearchableText());
        $contentInfo[] = [$item, 'footer', ['x' => 0, 'y' => 0, 'width' => 12, 'minWidth' => 2]];

        // execute the workflow action for each entity
        $flashBag = $this->requestStack->getCurrentRequest()->getSession()->getFlashBag();
        $action = 'submit';
        try {
            $success = true;

            $layoutData = [
                'header' => ['id' => 'section1', 'stylingClasses' => '', 'widgets' => []]
            ];
            foreach ($mainContentInfo as $itemInfo) {
                $item = $itemInfo[0];
                $destinationRow = $itemInfo[1];
                $layoutInfo = $itemInfo[2];

                $success &= $this->workflowHelper->executeAction($item, $action);

                $mainPage->addContentItems($item);
                $layoutInfo['id'] = $item->getId();
                $layoutData[$destinationRow]['widgets'][] = $layoutInfo;
            }
            $layoutData = [$layoutData['header']];
            $mainPage->setLayout($layoutData);
            $success &= $this->workflowHelper->executeAction($mainPage, $action);

            $layoutData = [
                'header' => ['id' => 'section1', 'stylingClasses' => '', 'widgets' => []],
                'mid' => ['id' => 'section2', 'stylingClasses' => '', 'widgets' => []],
                'footer' => ['id' => 'section3', 'stylingClasses' => '', 'widgets' => []]
            ];
            foreach ($contentInfo as $itemInfo) {
                $item = $itemInfo[0];
                $destinationRow = $itemInfo[1];
                $layoutInfo = $itemInfo[2];

                $success &= $this->workflowHelper->executeAction($item, $action);

                $page->addContentItems($item);
                $layoutInfo['id'] = $item->getId();
                $layoutData[$destinationRow]['widgets'][] = $layoutInfo;
            }
            $layoutData = [$layoutData['header'], $layoutData['mid'], $layoutData['footer']];
            $page->setLayout($layoutData);

            $success &= $this->workflowHelper->executeAction($page, $action);
            $flashBag->add('success', $this->translator->trans(
                'An example page for introduction with several content items has been created.',
                [],
                'exampledata'
            ));
        } catch (Exception $exception) {
            $flashBag->add('warning', $this->translator->trans(
                'Warning! Could not create the example page for introduction.',
                [],
                'exampledata'
            ));
            $flashBag->add(
                'error',
                $this->translator->trans('Exception during example data creation') . ': ' . $exception->getMessage()
            );
            $this->logger->error(
                '{app}: Could not completely create example data after installation. Error details: {errorMessage}.',
                ['app' => 'ZikulaContentModule', 'errorMessage' => $exception->getMessage()]
            );
        }
    }

    /**
     * @required
     */
    public function setRouter(RouterInterface $router): void
    {
        $this->router = $router;
    }

    /**
     * @required
     */
    public function setContentDisplayHelper(ContentDisplayHelper $displayHelper): void
    {
        $this->displayHelper = $displayHelper;
    }
}
