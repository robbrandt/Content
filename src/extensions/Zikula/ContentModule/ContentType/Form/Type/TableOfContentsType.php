<?php

/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.5.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Zikula\ContentModule\ContentType\Form\Type;

use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Translation\Extractor\Annotation\Ignore;
use Translation\Extractor\Annotation\Translate;
use Zikula\ContentModule\Entity\Factory\EntityFactory;
use Zikula\ContentModule\Entity\PageEntity;
use Zikula\ContentModule\Form\DataTransformer\PageTransformer;
use Zikula\ContentModule\Form\Type\Field\EntityTreeType;
use Zikula\ExtensionsModule\ModuleInterface\Content\Form\Type\AbstractContentFormType;

/**
 * Table of contents form type class.
 */
class TableOfContentsType extends AbstractContentFormType
{
    /**
     * @var EntityFactory
     */
    protected $entityFactory;

    public function __construct(EntityFactory $entityFactory)
    {
        $this->entityFactory = $entityFactory;
    }

    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $inclusionChoices = [
            /** @Translate */'No' => 0,
            /** @Translate */'Yes, unlimited' => 1,
            /** @Translate */'Yes, limited' => 2
        ];
        $builder
            ->add('page', EntityTreeType::class, [
                'class' => PageEntity::class,
                'multiple' => false,
                'expanded' => false,
                'use_joins' => false,
                'placeholder' => 'All pages',
                'required' => false,
                'label' => 'Page:',
                'attr' => [
                    'title' => 'Choose the start page.'
                ]
            ])
            ->add('includeSelf', CheckboxType::class, [
                'label' => 'Include self into the table of contents:',
                'label_attr' => ['class' => 'switch-custom'],
                'required' => false
            ])
            ->add('includeStart', CheckboxType::class, [
                'label' => 'Include start page into the table of contents:',
                'label_attr' => ['class' => 'switch-custom'],
                'required' => false
            ])
            ->add('includeNotInMenu', CheckboxType::class, [
                'label' => 'Include subpages that are not in the menus:',
                'label_attr' => ['class' => 'switch-custom'],
                'required' => false
            ])
            ->add('includeHeading', ChoiceType::class, [
                'label' => 'Include heading items on pages:',
                'choices' => /** @Ignore */$inclusionChoices
            ])
            ->add('includeHeadingLevel', IntegerType::class, [
                'label' => 'Include heading items up to page level:',
                'help' => 'if heading items are included and not unlimited; select 0 to include the headings only for the selected page',
                'attr' => [
                    'maxlength' => 10
                ],
                'required' => false
            ])
            ->add('includeSubpage', ChoiceType::class, [
                'label' => 'Include subpages:',
                'choices' => /** @Ignore */$inclusionChoices
            ])
            ->add('includeSubpageLevel', IntegerType::class, [
                'label' => 'Include subpages into table up to level:',
                'help' => 'if subpages are included and not unlimited',
                'attr' => [
                    'maxlength' => 10
                ],
                'required' => false
            ])
        ;
        $transformer = new PageTransformer($this->entityFactory);
        $builder->get('page')->addModelTransformer($transformer);
    }

    public function getBlockPrefix()
    {
        return 'zikulacontentmodule_contenttype_tableofcontents';
    }

    public function configureOptions(OptionsResolver $resolver)
    {
        parent::configureOptions($resolver);

        $resolver->setDefaults([
            'translation_domain' => 'contentTypes'
        ]);
    }
}
