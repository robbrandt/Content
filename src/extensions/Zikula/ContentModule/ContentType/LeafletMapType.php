<?php

/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 *
 * @see https://ziku.la
 *
 * @version Generated by ModuleStudio 1.5.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Zikula\ContentModule\ContentType;

use Symfony\Component\Filesystem\Filesystem;
use Zikula\Bundle\CoreBundle\HttpKernel\ZikulaHttpKernelInterface;
use Zikula\ContentModule\ContentType\Form\Type\LeafletMapType as FormType;
use Zikula\ExtensionsModule\ModuleInterface\Content\AbstractContentType;
use Zikula\ExtensionsModule\ModuleInterface\Content\ContentTypeInterface;

/**
 * Leaflet map content type.
 */
class LeafletMapType extends AbstractContentType
{
    /**
     * @var ZikulaHttpKernelInterface
     */
    private $kernel;

    /**
     * @var Filesystem
     */
    private $fileSystem;

    public function getCategory(): string
    {
        return ContentTypeInterface::CATEGORY_EXTERNAL;
    }

    public function getIcon(): string
    {
        return 'leaf';
    }

    public function getTitle(): string
    {
        return $this->translator->trans('Leaflet map', [], 'contentTypes');
    }

    public function getDescription(): string
    {
        return $this->translator->trans('Display a Leaflet map position.', [], 'contentTypes');
    }

    public function getDefaultData(): array
    {
        return [
            'latitude' => '55.8756960390043',
            'longitude' => '12.36185073852539',
            'zoom' => 5,
            'height' => 400,
            'text' => '',
            'tileLayerUrl' => 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
            'tileLayerAttribution' => '&copy;'
                . ' <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
        ];
    }

    public function getTranslatableDataFields(): array
    {
        return ['text'];
    }

    public function getSearchableText(): string
    {
        return html_entity_decode(strip_tags($this->data['text'] ?? ''));
    }

    public function getEditFormClass(): string
    {
        return FormType::class;
    }

    public function getAssets(string $context): array
    {
        $assets = parent::getAssets($context);

        if (in_array($context, [ContentTypeInterface::CONTEXT_VIEW, ContentTypeInterface::CONTEXT_EDIT], true)) {
            $leafletSrcPath = $this->kernel->getProjectDir() . '/src/extensions/Zikula/ContentModule/vendor/drmonty/leaflet/';
            $leafletPublicPath = $this->kernel->getProjectDir() . '/public/modules/zikulacontent/';

            $leafletFiles = [
                ['type' => 'css', 'file' => 'leaflet.css'],
                ['type' => 'images', 'file' => 'layers-2x.png'],
                ['type' => 'images', 'file' => 'layers.png'],
                ['type' => 'images', 'file' => 'marker-icon-2x.png'],
                ['type' => 'images', 'file' => 'marker-icon.png'],
                ['type' => 'images', 'file' => 'marker-shadow.png'],
                ['type' => 'js', 'file' => 'leaflet.min.js'],
            ];
            foreach ($leafletFiles as $fileDef) {
                $relativeFilePath = $fileDef['type'] . '/' . $fileDef['file'];
                if (!$this->fileSystem->exists($leafletPublicPath . $relativeFilePath)) {
                    $this->fileSystem->copy($leafletSrcPath . $relativeFilePath, $leafletPublicPath . $relativeFilePath);
                }
                $assets[$fileDef['type']][] = $this->assetHelper->resolve(
                    '@ZikulaContentModule:' . $relativeFilePath
                );
            }

            $assets['js'][] = $this->assetHelper->resolve(
                '@ZikulaContentModule:js/ZikulaContentModule.ContentType.LeafletMap.js'
            );
        }

        return $assets;
    }

    public function getJsEntrypoint(string $context): ?string
    {
        if (ContentTypeInterface::CONTEXT_VIEW === $context) {
            return 'contentInitLeafletDisplay';
        }
        if (ContentTypeInterface::CONTEXT_EDIT === $context) {
            return 'contentInitLeafletEdit';
        }

        return null;
    }

    /**
     * @required
     */
    public function setAdditionalDepencies(
        ZikulaHttpKernelInterface $kernel,
        Filesystem $fileSystem
    ): void {
        $this->kernel = $kernel;
        $this->fileSystem = $fileSystem;
    }
}
