<?php

/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.5.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Zikula\ContentModule\Collector;

use Zikula\ExtensionsModule\ModuleInterface\Content\ContentTypeInterface;

/**
 * Content type collector implementation class.
 */
class ContentTypeCollector
{
    /**
     * List of service objects
     * @var array
     */
    private $contentTypes;

    /**
     * @param ContentTypeInterface[] $contentTypes
     */
    public function __construct(iterable $contentTypes)
    {
        $this->contentTypes = [];
        foreach ($contentTypes as $contentType) {
            $this->add($contentType);
        }
    }

    /**
     * Adds a content type to the collection.
     */
    public function add(ContentTypeInterface $contentType): void
    {
        $id = str_replace('\\', '_', get_class($contentType));

        $this->contentTypes[$id] = $contentType;
    }

    /**
     * Returns a content type from the collection by service.id.
     */
    public function get(string $id): ?ContentTypeInterface
    {
        return $this->contentTypes[$id] ?? null;
    }

    /**
     * Returns all the content types in the collection.
     *
     * @return ContentTypeInterface[]
     */
    public function getAll(): iterable
    {
        $this->sortTypes();

        return $this->contentTypes;
    }

    /**
     * Returns all active content types in the collection.
     *
     * @return ContentTypeInterface[]
     */
    public function getActive(): iterable
    {
        return array_filter($this->getAll(), static function (ContentTypeInterface $item) {
            return $item->isActive();
        });
    }

    /**
     * Sorts available types by their title.
     */
    private function sortTypes(): void
    {
        $types = $this->contentTypes;
        usort($types, static function (ContentTypeInterface $a, ContentTypeInterface $b) {
            return strcmp($a->getTitle(), $b->getTitle());
        });
        $this->contentTypes = $types;
    }

    public function getContentTypesChoiceList(): array
    {
        $this->sortTypes();

        $choices = [];
        foreach ($this->contentTypes as $contentTypeId => $contentType) {
            $choices[$contentType->getTitle()] = $contentTypeId;
        }
        ksort($choices);

        return $choices;
    }
}
