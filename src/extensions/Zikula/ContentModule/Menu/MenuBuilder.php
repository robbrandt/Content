<?php

/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 *
 * @see https://ziku.la
 *
 * @version Generated by ModuleStudio 1.5.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Zikula\ContentModule\Menu;

use Knp\Menu\ItemInterface;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Contracts\Translation\TranslatorInterface;
use Zikula\ContentModule\Entity\PageEntity;
use Zikula\ContentModule\Menu\Base\AbstractMenuBuilder;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;

/**
 * Menu builder implementation class.
 */
class MenuBuilder extends AbstractMenuBuilder
{
    /**
     * @var TranslatorInterface
     */
    private $translator;

    /**
     * @var CsrfTokenManagerInterface
     */
    private $csrfTokenManager;

    /**
     * @var bool
     */
    protected $multilingual;

    public function createItemActionsMenu(array $options = []): ItemInterface
    {
        $menu = parent::createItemActionsMenu($options);
        if (!isset($options['entity'], $options['area'], $options['context'])) {
            return $menu;
        }

        $entity = $options['entity'];
        if (!($entity instanceof PageEntity)) {
            return $menu;
        }

        $hasEditPermissions = $this->permissionHelper->mayEdit($entity);
        $hasContentPermissions = $this->permissionHelper->mayManagePageContent($entity);
        if (!$hasEditPermissions && !$hasContentPermissions) {
            return $menu;
        }

        $searchLabel = $this->translator->trans('Details');
        $reuseLabel = $this->translator->trans('Reuse', [], 'page');
        if ($hasEditPermissions) {
            $searchLabel = $reuseLabel;
        }
        $searchFound = false;
        $reappendChildren = [];
        foreach ($menu->getChildren() as $item) {
            if (!$searchFound) {
                if ($searchLabel === $item->getName()) {
                    $searchFound = true;
                    if ($searchLabel === $reuseLabel) {
                        $menu->removeChild($item);
                    }
                }
                continue;
            }
            $reappendChildren[] = $item;
            $menu->removeChild($item);
        }

        $routePrefix = 'zikulacontentmodule_page_';
        $routeArea = $options['area'];
        $context = $options['context'];

        if ($hasContentPermissions) {
            $menu->addChild('Manage content', [
                'route' => $routePrefix . $routeArea . 'managecontent',
                'routeParameters' => $entity->createUrlArgs(),
            ])
                ->setLinkAttribute(
                    'title',
                    'Manage content elements of page'
                )
                ->setLinkAttribute('class', 'display' === $context ? 'btn btn-sm btn-secondary' : '')
                ->setAttribute('icon', 'fas fa-cubes')
                ->setExtra('translation_domain', 'page')
            ;
        }
        if ($hasEditPermissions) {
            $routeParameters = $entity->createUrlArgs();
            $routeParameters['token'] = $this->getCsrfToken('duplicate-page');
            $menu->addChild('Duplicate', [
                'route' => $routePrefix . $routeArea . 'duplicate',
                'routeParameters' => $routeParameters,
            ])
                ->setLinkAttribute(
                    'title',
                    'Duplicate this page'
                )
                ->setLinkAttribute('class', 'display' === $context ? 'btn btn-sm btn-secondary' : '')
                ->setAttribute('icon', 'fas fa-copy')
                ->setExtra('translation_domain', 'page')
            ;
        }
        if ($this->multilingual && $hasEditPermissions && $hasContentPermissions) {
            $menu->addChild('Translate', [
                'route' => $routePrefix . $routeArea . 'translate',
                'routeParameters' => $entity->createUrlArgs(),
            ])
                ->setLinkAttribute(
                    'title',
                    'Translate this page'
                )
                ->setLinkAttribute('class', 'display' === $context ? 'btn btn-sm btn-secondary' : '')
                ->setAttribute('icon', 'fas fa-language')
                ->setExtra('translation_domain', 'page')
            ;
        }

        foreach ($reappendChildren as $item) {
            $menu->addChild($item);
        }

        return $menu;
    }

    /**
     * @required
     */
    public function setAdditionalDependencies(
        TranslatorInterface $translator,
        CsrfTokenManagerInterface $csrfTokenManager,
        VariableApiInterface $variableApi,
    ): void {
        $this->translator = $translator;
        $this->csrfTokenManager = $csrfTokenManager;
        $this->multilingual = $variableApi->getSystemVar('multilingual', true);
    }

    private function getCsrfToken(string $tokenId): string
    {
        return $this->csrfTokenManager->getToken($tokenId)->getValue();
    }
}
